<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UtilZ.Dotnet.Ex</name>
    </assembly>
    <members>
        <member name="T:UtilZ.Dotnet.Ex.Base.SerializeEx">
            <summary>
            序列化扩展类[注:当对象中有继承后重写父类的属性时,不适用]
            </summary>
            <summary>
            序列化扩展类[注:当对象中有继承后重写父类的属性时,不适用]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.JsonSerializerObject(System.Object)">
            <summary>
            JSON序列化
            </summary>
            <param name="obj">要序列化的对象</param>
            <returns>json序列化之后的字符串</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.JsonDeserializeObject``1(System.String)">
            <summary>
            JSON反序列化
            </summary>
            <typeparam name="T">反序列化之类的类型</typeparam>
            <param name="json">待反序列化的json字符串</param>
            <returns>反序列化之后的对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.JsonDeserializeObject(System.String,System.Type)">
            <summary>
            JSON反序列化
            </summary>
            <param name="json">待反序列化的json字符串</param>
            <param name="targetType">反序列化之类的类型</param>
            <returns>反序列化之后的对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.XmlSerializer(System.Object,System.String)">
            <summary>
            XML序列化
            </summary>
            <param name="obj">待序列化对象</param>
            <param name="filePath">序列化文件路径</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.XmlSerializer(System.Object)">
            <summary>
            XML序列化
            </summary>
            <param name="obj">待序列化对象</param>
            <returns>xml</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.XmlDeserializerFromFile``1(System.String)">
            <summary>        
            XML反序列化
            </summary>
            <param name="filePath">序列化文件路径</param>
            <returns>反序列化后的对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.XmlDeserializerFromFile(System.String,System.Type)">
            <summary>        
            XML反序列化
            </summary>
            <param name="filePath">序列化文件路径</param>
            <param name="type">目标类型</param>
            <returns>反序列化后的对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.XmlDeserializerFromString``1(System.String)">
            <summary>        
            XML反序列化
            </summary>
            <param name="xmlStr">xml</param>
            <returns>反序列化后的对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.XmlDeserializerFromString(System.String,System.Type)">
            <summary>        
            XML反序列化
            </summary>
            <param name="xmlStr">xml</param>
            <param name="type">目标类型</param>
            <returns>反序列化后的对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.BinarySerialize(System.Object,System.String)">
            <summary>
            二进制序列化
            </summary>
            <param name="obj">待序列化对象</param>
            <param name="filePath">序列化文件路径</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.BinarySerialize(System.Object)">
            <summary>
            可序列化对象序列化为byte数组
            </summary>
            <param name="obj">可序列化对象</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.BinaryDeserialize``1(System.String)">
            <summary>        
            二进制反序列化
            </summary>
            <param name="filePath">序列化文件路径</param>
            <returns>反序列化后的对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.BinaryDeserialize``1(System.Byte[])">
            <summary>
            二进制转换为可序列化的对象
            </summary>
            <typeparam name="T">可序列化的类型 </typeparam>
            <param name="buffer">byte数组</param>
            <returns>可序列化的类型实例</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.BinaryDeserialize(System.Byte[])">
            <summary>
            二进制转换为可序列化的对象
            </summary>
            <param name="buffer">byte数组</param>
            <returns>可序列化的类型实例</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.RuntimeJsonSerializerObject(System.Object)">
            <summary>
            JSON序列化
            </summary>
            <param name="obj">要序列化的对象</param>
            <returns>json序列化之后的字符串</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SerializeEx.RuntimeJsonDeserializeObject``1(System.String)">
            <summary>
            JSON反序列化
            </summary>
            <typeparam name="T">反序列化之类的类型</typeparam>
            <param name="json">json字符串</param>
            <returns>反序列化之后的对象</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.IPartAsynWait">
            <summary>
            异步等待UI接口
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.IPartAsynWait.Canceled">
            <summary>
            获取是否已经取消
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.IPartAsynWait.Title">
            <summary>
            获取或设置提示标题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.IPartAsynWait.Message">
            <summary>
            获取或设置提示内容
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.IPartAsynWait.ShowCancel">
            <summary>
            是否显示取消按钮
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.IPartAsynWait.ShadeBackground">
            <summary>
            获取或设置遮罩层背景色
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.Ex.Base.IPartAsynWait.CanceledNotify">
            <summary>
            取消通知事件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPartAsynWait.Cancel">
            <summary>
            取消操作
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPartAsynWait.StartAnimation">
            <summary>
            开始等待动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPartAsynWait.StopAnimation">
            <summary>
            停止等待动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPartAsynWait.SetInfo(System.Object)">
            <summary>
            设置信息(保留接口),比如用来设置其它的什么进度条之类的
            </summary>
            <param name="para">参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPartAsynWait.Reset">
            <summary>
            重置异步等待框
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.IPartAsynWait.InvokeRequired">
             <summary>
            获取一个值，该值指示调用方在对控件进行方法调用时是否必须调用 Invoke 方法，因为调用方位于创建控件所在的线程以外的线程中[如果控件的 true 是在与调用线程不同的线程上创建的（说明您必须通过 Invoke 方法对控件进行调用），则为 System.Windows.Forms.Control.Handle；否则为false]
             </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPartAsynWait.Invoke(System.Delegate)">
            <summary>
            在拥有此控件的基础窗口句柄的线程上执行指定的委托
            </summary>
            <param name="method">包含要在控件的线程上下文中调用的方法的委托</param>
            <returns>正在被调用的委托的返回值，或者如果委托没有返回值，则为 null</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPartAsynWait.Invoke(System.Delegate,System.Object[])">
            <summary>
            在拥有控件的基础窗口句柄的线程上，用指定的自变量列表执行指定委托
            </summary>
            <param name="method">一个方法委托，它采用的参数的数量和类型与 args 参数中所包含的相同</param>
            <param name="args">作为指定方法的自变量传递的对象数组。 如果此方法没有参数，该参数可以是 null</param>
            <returns>System.Object，它包含正被调用的委托返回值；如果该委托没有返回值，则为 null</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.PartAsynFuncPara`1">
            <summary>
            异步执行执行委托参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.PartAsynFuncPara`1.Para">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.PartAsynFuncPara`1.Token">
            <summary>
            取消通知对象
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.PartAsynFuncPara`1.AsynWait">
            <summary>
            异步等待提示UI
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PartAsynFuncPara`1.#ctor(`0,System.Threading.CancellationToken,UtilZ.Dotnet.Ex.Base.IPartAsynWait)">
            <summary>
            构造函数
            </summary>
            <param name="para">输入参数</param>
            <param name="token">取消通知对象</param>
            <param name="asynWait">异步等待提示UI</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.DisplayNameExAttribute">
            <summary>
            显示名称特性
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DisplayNameExAttribute.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DisplayNameExAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DisplayNameExAttribute.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="tag">标识</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DisplayNameExAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="description">描述</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DisplayNameExAttribute.#ctor(System.String,System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="description">描述</param>
            <param name="tag">标识</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DisplayNameExAttribute.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="orderIndex">项显示顺序</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DisplayNameExAttribute.#ctor(System.String,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="orderIndex">项显示顺序</param>
            <param name="description">描述</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DisplayNameExAttribute.#ctor(System.String,System.Int32,System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="orderIndex">项显示顺序</param>
            <param name="description">描述</param>
            <param name="tag">标识</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.DisplayNameExAttribute.OrderIndex">
            <summary>
            项显示顺序
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.DisplayNameExAttribute.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.DisplayNameExAttribute.Tag">
            <summary>
            获取或设置标识
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DisplayNameExAttribute.ToString">
            <summary>
            重写ToString方法
            </summary>
            <returns>返回特性文本</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ActivatorEx">
            <summary>
             Activator类型扩展方法类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ActivatorEx.CreateInstance(System.String,System.Object[])">
            <summary>
            创建实例
            </summary>
            <param name="typeFullName">类型名称[格式:类型名,程序集命名.例如:Oracle.ManagedDataAccess.Client.OracleConnection,Oracle.ManagedDataAccess, Version=4.121.1.0, Culture=neutral, PublicKeyToken=89b483f429c47342]</param>
            <param name="args">构造函数参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ActivatorEx.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            创建指定接口类型实例 
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <param name="type">实现该接口的类</param>
            <param name="args">构造函数个数数组</param>
            <returns>接口实例</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ApplicationEx">
            <summary>
            应用程序辅助类,控制台程序正常结束需要手动调用ApplicationHelper.OnRaiseApplicationExitNotify方法
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ApplicationEx.RaiseApplicationExitNotify">
            <summary>
            触发应用程序结束通知
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ApplicationEx.Add(UtilZ.Dotnet.Ex.Base.ApplicationExitNotify)">
            <summary>
            添加应用程序退出通知
            </summary>
            <param name="applicationExitNotify"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ApplicationEx.Remove(UtilZ.Dotnet.Ex.Base.ApplicationExitNotify)">
            <summary>
            移除应用程序退出通知
            </summary>
            <param name="applicationExitNotify"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ApplicationEx.Clear">
            <summary>
            清空应用程序退出通知
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ApplicationExitNotify">
            <summary>
            应用程序退出通知
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ApplicationExitNotify._exitNotifyCallback">
            <summary>
            结束通知回调
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ApplicationExitNotify.OnRaiseApplicationExitNotify">
            <summary>
            触发应用程序结束通知
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ApplicationExitNotify.#ctor(System.Action)">
            <summary>
            构造函数 
            </summary>
            <param name="exitNotifyCallback">结束通知回调</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.AssemblyEx">
            <summary>
            程序集管理辅助类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AssemblyEx._enable">
            <summary>
            是否内部加载数据库访问组件
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.AssemblyEx.Enable">
            <summary>
            获取或设置是否内部加载数据库访问组件,true:内部加载,false:外部加载
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AssemblyEx._findArea">
            <summary>
            查找范围[true:主程序及所有了子目录;false:仅RequestingAssembly所在目录]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.AssemblyEx.FindArea">
            <summary>
            获取或设置查找范围[true:主程序及所有了子目录;false:仅RequestingAssembly所在目录]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AssemblyEx._manualLoadAssemblyFuncDic">
            <summary>
            手动加载程序集委托列表
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AssemblyEx.ManualLoadAssembly(System.Object,System.ResolveEventArgs)">
            <summary>
            加载数组库访问程序集
            </summary>
            <param name="sender">sender</param>
            <param name="args">需要的程序集名称信息参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AssemblyEx.AddManualLoadAssemblyFunc(System.String,System.Func{System.Object,System.ResolveEventArgs,System.Reflection.Assembly})">
            <summary>
            添加一个手动加载程序集委托
            </summary>
            <param name="key">委托key</param>
            <param name="func">委托,找着了返回目标程序集,未找着返回null</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AssemblyEx.RemoveManualLoadAssemblyFunc(System.String)">
            <summary>
            移除一个手动加载程序集委托
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AssemblyEx.ClearManualLoadAssemblyFunc">
            <summary>
            清空手动加载程序集委托
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AssemblyEx.FindAssembly(System.String)">
            <summary>
            从当前应用程序域中查找指定名称的程序集[找到返回目标程序集,没找到返回null]
            </summary>
            <param name="name">程序集名称或全名</param>
            <returns>找到返回目标程序集,没找到返回null</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AssemblyEx.AddAssembly(System.Reflection.Assembly)">
            <summary>
            添加一个程序集
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AssemblyEx.AddAssembly(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            添加一个程序集集合
            </summary>
            <param name="assemblies">程序集集合</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.AssemblyEx.TargetAssemblys">
            <summary>
            获取目标程序集集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AssemblyEx.ContainsAssembly(System.String)">
            <summary>
            目标程序集中是否包含指定名称的程序集[存在返回:true,否则返回false]
            </summary>
            <param name="assemblyName">程序集名称</param>
            <returns>存在返回:true,否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AssemblyEx.RemoveAssembly(System.Reflection.Assembly)">
            <summary>
            移除目标程序集
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AssemblyEx.ClearAssembly">
            <summary>
            清空目标程序集集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AssemblyEx.GetAssemblyName(System.String)">
            <summary>
            获取程序集名称[获取失败或非.net程序集,则返回null]
            </summary>
            <param name="assemblyPath">程序集路径</param>
            <returns>程序集名称</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AssemblyEx.IsX64OrX86(System.String)">
            <summary>
            判断dll文件是64位还是32位[true:64位;false:32位;.NET AnyCpu程序集判断为32位]
            </summary>
            <param name="dllFilePath">dll文件路径</param>
            <returns>[true:64位;false:32位;.NET AnyCpu程序集判断为32位]</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AssemblyEx.GetAssemblyGUID(System.Reflection.Assembly)">
            <summary>
            获取程序集GUID
            </summary>
            <param name="assembly">Assembly</param>
            <returns>程序集GUID</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.AttributeEx">
            <summary>
            特性辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AttributeEx.UpdateValue``2(``0,``0)">
            <summary>
            将T类型valueObj对象中通过W特性标记的属性的值设置到T类型的targetObj对象中
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="W">特性类型</typeparam>
            <param name="valueObj">值对象</param>
            <param name="targetObj">目标对象</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.BlockingCollectionEx`1">
            <summary>
            线程安全集合提供阻止和限制功能
            </summary>
            <typeparam name="T">集合中的元素类型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionEx`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BlockingCollectionEx`1.Count">
            <summary>
            获取项数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionEx`1.Add(`0)">
            <summary>
            添加项
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionEx`1.Take">
            <summary>
            从集合中中获取一项,如果没有,则阻塞
            </summary>
            <returns>从该集合中移除的项</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionEx`1.Take(System.Threading.CancellationToken)">
            <summary>
            从集合中中获取一项,如果没有,则阻塞
            </summary>
            <param name="token">操作取消通知</param>
            <returns>从该集合中移除的项</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionEx`1.Take(System.Int32)">
            <summary>
            从集合中中获取一项,如果没有,则阻塞
            </summary>
            <param name="millisecondsTimeout">阻塞超时时长,单位毫秒</param>
            <returns>从该集合中移除的项</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionEx`1.Take(System.Int32,System.Threading.CancellationToken)">
            <summary>
            从集合中中获取一项,如果没有,则阻塞
            </summary>
            <param name="millisecondsTimeout">阻塞超时时长,单位毫秒</param>
            <param name="token">操作取消通知</param>
            <returns>从该集合中移除的项</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionEx`1.TryTake(`0@)">
            <summary>
            在观察取消标记时，尝试在指定的时间内从集合中移除某个项
            异常:
            System.OperationCanceledException:如果集合释放。
            System.ArgumentOutOfRangeException:millisecondsTimeout 是一个非 -1 的负数，而 -1 表示无限期超时。
            </summary>
            <param name="item">从该集合中移除的项</param>
            <returns>如果在指定的时间内可以从集合中移除某个项，则为 true；否则为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionEx`1.TryTake(`0@,System.Int32)">
            <summary>
            在观察取消标记时，尝试在指定的时间内从集合中移除某个项
            异常:
            System.OperationCanceledException:如果集合释放。
            System.ArgumentOutOfRangeException:millisecondsTimeout 是一个非 -1 的负数，而 -1 表示无限期超时。
            </summary>
            <param name="item">从该集合中移除的项</param>
            <param name="millisecondsTimeout">等待的毫秒数，或为 System.Threading.Timeout.Infinite (-1)，表示无限期等待</param>
            <returns>如果在指定的时间内可以从集合中移除某个项，则为 true；否则为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionEx`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)">
            <summary>
            在观察取消标记时，尝试在指定的时间内从集合中移除某个项
            异常:
            System.OperationCanceledException:如果 System.Threading.CancellationToken已取消。
            System.ArgumentOutOfRangeException:millisecondsTimeout 是一个非 -1 的负数，而 -1 表示无限期超时。
            </summary>
            <param name="item">从该集合中移除的项</param>
            <param name="millisecondsTimeout">等待的毫秒数，或为 System.Threading.Timeout.Infinite (-1)，表示无限期等待</param>
            <param name="token">要观察的取消标记</param>
            <returns>如果在指定的时间内可以从集合中移除某个项，则为 true；否则为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionEx`1.ToArray">
            <summary>
            将项从集合中实例复制到新数组中
            </summary>
            <returns>包含集合元素的副本的数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionEx`1.Clear">
            <summary>
            清空集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionEx`1.Dispose">
            <summary>
            IDisposable
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.BlockingCollectionExThread`1">
            <summary>
            BlockingCollectionEx线程
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.BlockingCollectionExThread`1.ADD_PROCESS_THREAD_THRESHOLD">
            <summary>
            默认添加处理线程阈值条件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.BlockingCollectionExThread`1._addProcessThreadConditionType">
            <summary>
            添加处理线程条件类型[true:外部条件;false:线程数]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BlockingCollectionExThread`1.Count">
            <summary>
            获取项数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionExThread`1.#ctor(System.Func{System.Int32,System.Boolean},System.String,System.Action{`0},System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="addProcessThreadFunc">添加线程条件,参数为当前处理的线程数,返回值true表示可增加线程处理;false表示不再增加线程处理</param>
            <param name="threadNamePre">线程名前续</param>
            <param name="process">处理回调</param>
            <param name="addProcessThreadThreshold">新添加处理线程阈值条件,当未处理集合中的项数超过此值时会新添加一个处理线程</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionExThread`1.#ctor(System.Int32,System.String,System.Action{`0},System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="maxThreadCount">最大并发处理线程数,小于1无限制,最多为CPU核心数</param>
            <param name="threadNamePre">线程名前续</param>
            <param name="process">处理回调</param>
            <param name="addProcessThreadThreshold">新添加处理线程阈值条件,当未处理集合中的项数超过此值时会新添加一个处理线程</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionExThread`1.#ctor(System.String,System.Action{`0},System.Int32,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="threadNamePre">线程名前续</param>
            <param name="process">处理回调</param>
            <param name="addProcessThreadThreshold">新添加处理线程阈值条件,当未处理集合中的项数超过此值时会新添加一个处理线程</param>
            <param name="addProcessThreadConditionType">添加处理线程条件类型[true:外部条件;false:线程数]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionExThread`1.Add(`0)">
            <summary>
            添加项
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionExThread`1.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BlockingCollectionExThread`1.Dispose">
            <summary>
            IDisposable
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.CharEx">
            <summary>
             char类型扩展方法类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.CharEx.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.CharEx._chinesePunctuations">
            <summary>
            中文标点符号
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.CharEx._chineseCharMinValue">
            <summary>
            中文汉字字符最小值
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.CharEx._chineseCharMaxValue">
            <summary>
            中文汉字字符最大值
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.CharEx.IsChineseChar(System.Char)">
            <summary>
            验证一个字符是否是中文字符[中文字符:返回true,否则返回false]
            </summary>
            <param name="ch">待验证的字符</param>
            <returns>中文字符:返回true,否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.CharEx.IsLetter(System.Char)">
            <summary>
            验证一个字符是否属于26个字母[true:属于26个字母,false:非26个英文字母]
            </summary>
            <param name="ch">待验证的字符</param>
            <returns>true:属于26个字母,false:非26个英文字母</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.CharEx.IsLetterUpper(System.Char)">
            <summary>
            字母是否是大写字母[true:是,false:不是]
            </summary>
            <param name="ch">待验证的字符</param>
            <returns>true:是,false:不是</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.CharEx.IsLetterLower(System.Char)">
            <summary>
            字母是否是小写字母[true:是,false:不是]
            </summary>
            <param name="ch">待验证的字符</param>
            <returns>true:是,false:不是</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.CompressEx">
            <summary>
            压缩解压
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.CompressEx.CompressBytes(System.Byte[])">
            <summary>
            压缩字节数组
            </summary>
            <param name="bytes">待压缩字节数组</param>
            <returns>压缩后的字节数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.CompressEx.DecompressBytes(System.Byte[])">
            <summary>
            解压缩字节数组
            </summary>
            <param name="bytes">待解压字节数组</param>
            <returns>解压后的字节数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.CompressEx.CompressDir(System.IO.DirectoryInfo)">
            <summary>
            压缩目录
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.CompressEx.DecompressDir(System.IO.DirectoryInfo)">
            <summary>
            解压缩目录
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.CompressEx.CompressFile(System.IO.FileInfo)">
            <summary>
            压缩文件
            </summary>
            <param name="fileToCompress"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.CompressEx.DecompressFile(System.IO.FileInfo)">
            <summary>
            解压缩文件
            </summary>
            <param name="fileToDecompress"></param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ConvertEx">
            <summary>
            Convert类型扩展方法类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConvertEx.ConvertTo``2(``0)">
            <summary>
            转换数据到
            </summary>
            <typeparam name="T">要待转换的目标类型</typeparam>
            <typeparam name="TResult">目标类型</typeparam>
            <param name="value">要转换的值</param>
            <returns>转换后的值,存放在object中,如果转换失败为目标类型的默认值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConvertEx.TryConvertTo``2(``0,``1@)">
            <summary>
            尝试转换数据到
            </summary>
            <typeparam name="T">要待转换的目标类型</typeparam>
            <typeparam name="TResult">目标类型</typeparam>
            <param name="value">要转换的值</param>
            <param name="result">结果值</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConvertEx.ConvertToObject(System.Type,System.Object)">
            <summary>
            转换数据到
            </summary>
            <param name="targetValueType">要待转换的目标类型</param>
            <param name="value">要转换的值</param>
            <returns>转换后的值,存放在object中,如果转换失败为目标类型的默认值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConvertEx.TryConvertToObject(System.Type,System.Object,System.Object@)">
            <summary>
            尝试转换数据到指定类型
            </summary>
            <param name="targetValueType">要待转换的目标类型</param>
            <param name="value">要转换的值</param>
            <param name="result">转换后的值</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConvertEx.ConvertTo``1(System.String,System.Byte)">
            <summary>
            字符串转换为指定类型数值类型
            </summary>
            <typeparam name="T">目标数值类型</typeparam>
            <param name="value">待转换字符串</param>
            <param name="fromBase">值中数字基数(value是何种进制的字符串),必须是2,8,10,16</param>
            <returns>目标数值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConvertEx.ConvertTo``1(System.String,``0,System.Byte,System.IFormatProvider)">
            <summary>
            各种进制字符串转换为数据类型,转换失败返回默认值,包括枚举
            </summary>
            <typeparam name="T">目标数值类型</typeparam>
            <param name="value">要转换的值</param>
            <param name="defaultValue">转换失败时的默认值</param>
            <param name="fromBase">值中数字基数(value是何种进制的字符串),必须是2,8,10,16</param>
            <param name="formatProvider">一个提供区域性特定的格式设置信息的对象</param>
            <returns>转换后的值,存放在object中,如果转换失败为目标类型的默认值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConvertEx.ConvertTo(System.Type,System.String,System.Byte,System.IFormatProvider)">
            <summary>
            将字符串转换为值类型数据,包括枚举
            </summary>
            <param name="targetValueType">要待转换的目标类型</param>
            <param name="value">要转换的值</param>
            <param name="fromBase">值中数字基数(value是何种进制的字符串),必须是2,8,10,16</param>
            <param name="formatProvider">一个提供区域性特定的格式设置信息的对象</param>
            <returns>转换后的值,存放在object中,如果转换失败为目标类型的默认值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConvertEx.TryConvertTo(System.Type,System.String,System.Object@)">
            <summary>
            尝试将字符串转换为值类型数据,包括枚举
            </summary>
            <param name="targetValueType">要待转换的目标类型</param>
            <param name="value">要转换的值</param>
            <param name="result">转换结果</param>
            <returns>转换后的值,存放在object中,如果转换失败为目标类型的默认值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConvertEx.GetTypeDefaultValue(System.Type)">
            <summary>
            获得类型默认值
            </summary>
            <param name="targetType">要获取默认值的目标类型</param>
            <returns>类型默认值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.DateTimeEx">
            <summary>
             DateTime类型扩展方法类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DateTimeEx.CompareDate(System.DateTime,System.DateTime)">
            <summary>
            比较日期的年月日是否相等
            </summary>
            <param name="dt">日期</param>
            <param name="dstTime">目标日期</param>
            <returns>相等返回true,不等返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DateTimeEx.TimestampToDateTime(System.Double)">
            <summary>
            日期时间戳转为日期时间
            </summary>
            <param name="timestampValue">日期时间戳值</param>
            <returns>日期时间</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.DebugEx">
            <summary>
            调试辅助类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.DebugEx.ObjDic">
            <summary>
            获取对象字典集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DebugEx.Add(System.String,System.Object)">
            <summary>
            添加一个调试对象
            </summary>
            <param name="key">对象key</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DebugEx.Remove(System.String)">
            <summary>
            移除一个调试对象
            </summary>
            <param name="key">对象key</param>
            <returns>移除结果</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.DirectoryInfoEx">
            <summary>
            扩展DirectoryInfo类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.DirectoryInfoEx._currentAssemblyDirectory">
            <summary>
            当前程序集所在目录
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.DirectoryInfoEx.CurrentAssemblyDirectory">
            <summary>
            获取当前程序集所在目录
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DirectoryInfoEx.CopyFolder(System.String,System.String)">
            <summary>
            复制文件夹内容到指定目录
            </summary>
            <param name="srcDir">原目录</param>
            <param name="dstDir">目标目录</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DirectoryInfoEx.CopyFolder(System.IO.DirectoryInfo,System.String)">
            <summary>
            复制文件夹内容到指定目录
            </summary>
            <param name="srcDirInfo">原目录信息</param>
            <param name="dstDir">目标目录</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DirectoryInfoEx.GetFullPath(System.String)">
            <summary>
            获取路径中有携带特殊目录的路径转换为完整路径
            </summary>
            <param name="srcPath">有携带特殊目录的路径</param>
            <returns>完整路径</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DirectoryInfoEx.OpenFileDirectory(System.String)">
            <summary>
            打开指定文件所在目录[如果文件不存在,但目录存在则打开该文件上一层目录,如果目录不存在,则直接返回]
            </summary>
            <param name="filePath">指定文件路径</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DirectoryInfoEx.CheckDirectory(System.String)">
            <summary>
            检查目录是否存在,如果不存在则创建
            </summary>
            <param name="dir">目录</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DirectoryInfoEx.CheckFilePathDirectory(System.String)">
            <summary>
            检查文件路径中所包含的目录是否存在,如果不存在则创建
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.DoubleEx">
            <summary>
            Double扩展方法
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DoubleEx.Valid(System.Double)">
            <summary>
            判断double值是否有效[有效返回true;无效返回false]
            </summary>
            <param name="value">目标值</param>
            <returns>有效返回true;无效返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DoubleEx.ConvertToDouble(System.Object)">
            <summary>
            将object转换为double,转换失败返回double.NaN
            </summary>
            <param name="obj">目标对象</param>
            <returns>转换结果</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.EnumEx">
            <summary>
            枚举辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.AssertEnum``1">
            <summary>
            断言类型T为枚举类型
            </summary>
            <typeparam name="T">类型T</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.AssertEnum(System.Type)">
            <summary>
            断言类型T为枚举类型
            </summary>
            <param name="enumType">枚举类型</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.GetEnumByDisplayNameExAttributeDisplayName(System.Type,System.String)">
            <summary>
            根据枚举DisplayNameExAttribute特性文本获取对应的枚举项
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="displayName">显示文本</param>
            <returns>枚举项</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.GetDisplayNameExAttributeItemList(System.Type)">
            <summary>
            获取枚举特性转换成的DropdownBindingItem列表
            </summary>
            <param name="enumType">枚举类型</param>
            <returns>绑定列表集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.GetEnumItemAttribute``2">
            <summary>
            获取枚举特性转换成的字典集合[key:枚举值;value:枚举项上标记的特性(多项取第一项)]
            </summary>
            <typeparam name="ET">枚举类型</typeparam>
            <typeparam name="AT">枚举上对应的特性类型</typeparam>
            <returns>枚举特性转换成的字典集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.GetEnumItemDisplayName(System.Object)">
            <summary>
            获取枚举项上的特性显示文本
            </summary>
            <param name="enumItem">枚举值</param>
            <returns>特性显示文本</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.GetEnumItemDisplayName``1(``0)">
            <summary>
            获取枚举项上的特性显示文本
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumItem">枚举值</param>
            <returns>特性显示文本</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.PrimitiveGetEnumItemDisplayName(System.Type,System.Object)">
            <summary>
            获取枚举项上的显示文本
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="enumItem">枚举项</param>
            <returns>显示文本</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.GetEnumItemTag(System.Object)">
            <summary>
            获取枚举项上的标识
            </summary>
            <param name="enumItem">枚举值</param>
            <returns>枚举项上的标识</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.GetEnumItemTag``1(``0)">
            <summary>
            获取枚举项上的标识
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumItem">枚举值</param>
            <returns>枚举项上的标识</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.PrimitiveGetEnumItemTag(System.Type,System.Object)">
            <summary>
            获取枚举项上的标识
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="enumItem">枚举值</param>
            <returns>枚举项上的标识</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.GetEnumItemDescription(System.Object)">
            <summary>
            获取枚举项上的描述
            </summary>
            <param name="enumItem">枚举值</param>
            <returns>枚举项上的标识</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.GetEnumItemDescription``1(``0)">
            <summary>
            获取枚举项上的描述
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumItem">枚举值</param>
            <returns>枚举项上的标识</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.PrimitiveGetEnumItemDescription(System.Type,System.Object)">
            <summary>
            获取枚举项上的描述
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="enumItem">枚举值</param>
            <returns>枚举项上的标识</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.GetEnumItemDisplayNameExAttribute(System.Object)">
            <summary>
            获取枚举项上的特性
            </summary>
            <param name="enumItem">枚举值</param>
            <returns>特性</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.GetEnumItemDisplayNameExAttribute``1(``0)">
            <summary>
            获取枚举项上的特性
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumItem">枚举值</param>
            <returns>特性显示文本</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EnumEx.PrimitiveGetEnumItemDisplayNameExAttribute(System.Type,System.Object)">
            <summary>
            获取枚举项上的特性
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="enumItem">枚举项</param>
            <returns>显示文本</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.EnvironmentEx">
            <summary>
            环境扩展类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.EnvironmentEx.AppType">
            <summary>
            获取当前环境是否是WebApp环境[true:WebApp;false:exe]
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.AppType">
            <summary>
            应用类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AppType.Exe">
            <summary>
            exe可执行程序
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AppType.Service">
            <summary>
            服务
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AppType.WebApp">
            <summary>
            Web应用
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.EventWaitHandleEx">
            <summary>
            EventWaitHandle扩展类,通知正在等待的线程已发生事件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.EventWaitHandleEx._eventWaitHandle">
            <summary>
            通知正在等待的线程已发生事件对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.EventWaitHandleEx._isDisposed">
            <summary>
            对象是否已释放[true:已释放;false:未释放]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EventWaitHandleEx.#ctor(System.Boolean,System.Threading.EventResetMode)">
            <summary>
            构造函数
            </summary>
            <param name="initialState"></param>
            <param name="mode"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EventWaitHandleEx.Reset">
            <summary>
            将事件状态设置为非终止，从而导致线程受阻[如果该操作成功，则为 true；否则为 false]
            </summary>
            <returns>如果该操作成功，则为 true；否则为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EventWaitHandleEx.Set">
            <summary>
            将事件状态设置为有信号，从而允许一个或多个等待线程继续执行[如果该操作成功，则为 true；否则为 false]
            </summary>
            <returns>如果该操作成功，则为 true；否则为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EventWaitHandleEx.WaitOne(System.Int32)">
            <summary>
            阻止当前线程，直到当前 System.Threading.WaitHandle 收到信号，同时使用 32 位带符号整数指定时间间隔（以毫秒为单位）
            </summary>
            <param name="millisecondsTimeout">等待的毫秒数，或为 System.Threading.Timeout.Infinite (-1)，表示无限期等待</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EventWaitHandleEx.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EventWaitHandleEx.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDispose">是否释放标识</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.AutoEventWaitHandleManager">
            <summary>
            EventWaitHandle自动管理类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AutoEventWaitHandleManager._htEventWaitHandle">
            <summary>
            key:EventKey(object);value:(EventWaitHandleInfo)
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AutoEventWaitHandleManager.AddIdToCache(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="expirationMilliseconds">缓存项有效时间,小于等于0永不过期,单位/毫秒</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AutoEventWaitHandleManager.CreateEventWaitHandle(System.Object,System.Int32,System.Object)">
            <summary>
            创建并添加EventWaitHandle
            </summary>
            <param name="id">EventWaitHandle的唯一标识</param>
            <param name="expirationMilliseconds">缓存项有效时间,小于等于0永不过期,单位/毫秒</param>
            <param name="tag">Tag</param>
            <returns>创建的EventWaitHandle</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AutoEventWaitHandleManager.AddEventWaitHandle(System.Object,System.Threading.EventWaitHandle,System.Int32,System.Object)">
            <summary>
            添加外部创建的EventWaitHandle
            </summary>
            <param name="id">EventWaitHandle的唯一标识</param>
            <param name="eventWaitHandle">EventWaitHandle</param>
            <param name="expiration">缓存项有效时间,小于等于0永不过期,单位/毫秒</param>
            <param name="tag">Tag</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AutoEventWaitHandleManager.SetEventWaitHandle(System.Object,System.Threading.EventWaitHandle,System.Int32,System.Object)">
            <summary>
            设置外部创建的EventWaitHandle,如果id存在则替换,否则则添加
            </summary>
            <param name="id">EventWaitHandle的唯一标识</param>
            <param name="eventWaitHandle">EventWaitHandle</param>
            <param name="expiration">缓存项有效时间,小于等于0永不过期,单位/毫秒</param>
            <param name="tag">Tag</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AutoEventWaitHandleManager.GetEventWaitHandle(System.Object)">
            <summary>
            获取EventWaitHandle
            </summary>
            <param name="id">EventWaitHandle的唯一标识</param>
            <returns>EventWaitHandle</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AutoEventWaitHandleManager.GetEventWaitHandleInfo(System.Object)">
            <summary>
            获取EventWaitHandleInfo
            </summary>
            <param name="id">EventWaitHandle的唯一标识</param>
            <returns>EventWaitHandleInfo</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AutoEventWaitHandleManager.RemoveEventWaitHandle(System.Object)">
            <summary>
            移除并返回EventWaitHandle
            </summary>
            <param name="id">EventWaitHandle的唯一标识</param>
            <returns>EventWaitHandle</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.EventWaitHandleInfo">
            <summary>
            EventWaitHandleInfo
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.EventWaitHandleInfo.Id">
            <summary>
            EventWaitHandle的唯一标识
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.EventWaitHandleInfo.EventWaitHandle">
            <summary>
            EventWaitHandle
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.EventWaitHandleInfo.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EventWaitHandleInfo.#ctor(System.Object,System.Threading.EventWaitHandle,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="id"></param>
            <param name="eventWaitHandle"></param>
            <param name="tag"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EventWaitHandleInfo.Set(System.Object)">
            <summary>
            发出通知,对象释放将抛出异常
            </summary>
            <param name="tag">tag</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.EventWaitHandleInfo.TrySet(System.Object)">
            <summary>
            尝试发出通知,成功返回true,否则返回false
            </summary>
            <param name="tag">tag</param>
            <returns>成功返回true,否则返回false</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.FileEx">
            <summary>
            文件类扩展方法类[分区文本文件创]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.FileEx.CreateFilePath(System.DateTime,System.DateTime@,System.Int32@,System.String,System.String,System.String,System.String,System.UInt32)">
            <summary>
            创建需要分隔大小的文件路径[2014-10-27_1.log]
            </summary>
            <param name="createTime">创建文件日期</param>
            <param name="lastTime">上次记录日志文件的日期</param>
            <param name="index">当前文件索引,没有记录之前的初始值为-1</param>
            <param name="dateFormat">日期格式</param>
            <param name="directory">文件存放目录</param>
            <param name="fileName">文件名</param>
            <param name="extension">文件扩展名</param>
            <param name="fileSize">文件分隔大小,单位/MB</param>
            <returns>文件路径</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.FileEx.CreateFilePathParaCheck(System.Int32,System.String,System.String,System.UInt32)">
            <summary>
            创建需要分隔大小的文件路径[2014-10-27_1.log]方法参数验证
            </summary>
            <param name="index">当前文件索引,没有记录之前的初始值为-1</param>
            <param name="dateFormat">日期格式</param>
            <param name="directory">文件存放目录</param>
            <param name="fileSize">文件分隔大小</param>
            <returns>文件路径</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.FileEx.UpdateFileIndex(System.String,System.String,System.DateTime,System.String,System.String)">
            <summary>
            更新文件索引
            </summary>
            <param name="directory">文件存放目录</param>
            <param name="extension">文件扩展名</param>
            <param name="dt">日期时间</param>
            <param name="dateFormat">日期格式</param>
            <param name="fileName">文件名</param>
            <returns>文件索引</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.FileEx.GetFileCreateDate(System.String)">
            <summary>
            获取分区文件的创建日期字符串
            </summary>
            <param name="filePath">文件路径</param>
            <returns>分区文件的创建日期字符串</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.FileEx.TryDeleFile(System.String)">
            <summary>
            尝试删除文件[删除成功返回true;失败返回false]
            </summary>
            <param name="filePath">目标文件路由</param>
            <returns>删除成功返回true;失败返回false</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.FileStringCodingEx">
            <summary>
            将文件编码成字符串与将字符串解码成文件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.FileStringCodingEx.DecodingFile(System.String,System.String)">
            <summary>        
            解码编码为字符串的数据，算法: ((firstByte - 65) 左移 4) + lastByte - 65 => sourceByte
            </summary>
            <param name="strData">字符串数据</param>
            <param name="filePath">要保存的文件名</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.FileStringCodingEx.DecodingString(System.String)">
            <summary>
            解码编码为字符串的数据，算法: ((firstByte - 65) 左移 4) + lastByte - 65 => sourceByte
            </summary>
            <param name="strData">字符串数据</param>
            <returns>源数据</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.FileStringCodingEx.EncodingBytes(System.Byte[])">
            <summary>
            编码二进制数据为字符串
            </summary>
            <param name="data">数据</param>
            <returns>编码后的字符串</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.FileStringCodingEx.EncodingFile(System.String)">
            <summary>
            编码二进制数据为字符串
            </summary>
            <param name="filePath">数据文件</param>
            <returns>编码后的字符串</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.FileStringCodingEx.CompressEncoding(System.String)">
            <summary>
            压缩字编码符串
            </summary>
            <param name="input">待压缩的编码字符串</param>
            <returns>压缩后的字符串</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.FileStringCodingEx.DecompressEncoding(System.String)">
            <summary>
            解压缩编码字符串
            </summary>
            <param name="input">待解压缩的编码字符串</param>
            <returns>解压缩后的字符串</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.GUIDEx">
            <summary>
            GUID扩展类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.GUIDEx.GetGUIDHashCode">
            <summary>
            获取GUID对应的HskCode
            </summary>
            <returns>GUID对应的HskCode</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.HashEx">
            <summary>
            Hash和MD5扩展使用类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.HashEx.GetHash(System.String,UtilZ.Dotnet.Ex.Base.MD5HashType)">
            <summary>
            获取二进制数据的Hash值
            </summary>
            <param name="str">要计算Hash值的字符串</param>
            <param name="hashType">HashType[默认值:SHA1Managed]</param>
            <returns>所得Hash值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.HashEx.GetHash(System.Byte[],UtilZ.Dotnet.Ex.Base.MD5HashType)">
            <summary>
            获取二进制数据的Hash值
            </summary>
            <param name="data">要计算Hash值0的二进制数据</param>
            <param name="hashType">HashType[默认值:SHA1Managed]</param>
            <returns>所得Hash值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.HashEx.GetHash(System.Byte[],System.Int32,System.Int32,UtilZ.Dotnet.Ex.Base.MD5HashType)">
            <summary>
            获取二进制数据的Hash值
            </summary>
            <param name="data">要计算Hash值0的二进制数据</param>
            <param name="offset">字节数据中的偏移量,从该位置起使用数据</param>
            <param name="count">数组中用途数据的字节数</param>
            <param name="hashType">HashType[默认值:SHA1Managed]</param>
            <returns>所得Hash值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.HashEx.GetFileHash(System.String,UtilZ.Dotnet.Ex.Base.MD5HashType)">
            <summary>
            获取一个文件的Hash值
            </summary>
            <param name="filePath">要计算Hash值的文件</param>
            <param name="hashType">HashType[默认值:SHA1Managed]</param>
            <returns>所得Hash值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.HashEx.GetDirectoryFileHashTree(System.String,System.String,UtilZ.Dotnet.Ex.Base.MD5HashType)">
            <summary>
            获取指定目录中所有文件的Hash值,以目录树的形式在xml中存放每个文件的Hash
            </summary>
            <param name="targetDirectory">要创建hash树的目标目录</param>
            <param name="xmlPath">保存hash树xml文件的路径</param>
            <param name="hashType">HashType</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.HashEx.CreateHashTree(System.IO.DirectoryInfo,System.Xml.Linq.XElement,System.String,UtilZ.Dotnet.Ex.Base.MD5HashType)">
            <summary>
            递归创建hash树
            </summary>
            <param name="dirInfo">创建hash树的DirectoryInfo</param>
            <param name="parentNode">父结点</param>
            <param name="baseDir">要创建hash树的基础路径</param>
            <param name="hashType">HashType</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.HashEx.ValidateDirectoryFileHashTree(System.String,System.String,UtilZ.Dotnet.Ex.Base.MD5HashType)">
            <summary>
            验证指定目录中所有文件的Hash值,以目录树中存放hash值的xml为准
            </summary>
            <param name="targetDirectory">要验证hash树的目标目录</param>
            <param name="hashXmlFile">Hash xml文件</param>
            <param name="hashType">MD5类型</param>
            <returns>与源一致,返回true,否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.HashEx.CreateHashEntry(UtilZ.Dotnet.Ex.Base.MD5HashType)">
            <summary>
            根据HashType创建对应的Hash实例
            </summary>
            <param name="hashType">HashType</param>
            <returns>Hash实例</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.MD5HashType">
            <summary>
            HashType
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MD5HashType.HMACSHA1">
            <summary>
            使用SHA1哈希函数计算基于哈希值的消息验证代码(HMAC),同样的数据每次计算出的hash会是是不一样的
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MD5HashType.MD5CryptoServiceProvider">
            <summary>
            使用加密服务提供程序(CSP)提供的实现，计算输入数据的MD5哈希值
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MD5HashType.SHA1Managed">
            <summary>
            使用托管库计算输入数据的SHA1哈希值
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MD5HashType.SHA256Managed">
            <summary>
            使用托管库计算输入数据的SHA256哈希值
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MD5HashType.SHA384Managed">
            <summary>
            使用托管库计算输入数据的SHA384哈希值
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MD5HashType.SHA512Managed">
            <summary>
            使用托管库计算输入数据的SHA512哈希算法
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.IPAddressEx">
            <summary>
            IP类型扩展方法类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPAddressEx.ValidateIPV4(System.String)">
            <summary>
            验证IP是否是一个IPV4地址[是合法的ipv4地址返回true,否则返回flase]
            </summary>
            <param name="ipStr">ipv4字符串</param>
            <returns>是合法的ipv4地址返回true,否则返回flase</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPAddressEx.IPV4ToInt32(System.String)">
            <summary>
            IPV4地址转换为Int32整数(返回值存在负数)
            </summary>
            <param name="ipStr">ip字符串</param>
            <returns>ip对应的整数</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPAddressEx.IPV4ToInt64(System.String)">
            <summary>
            IPV4地址转换为Int64整数(返回值全为正数)
            </summary>
            <param name="ipStr">ip字符串</param>
            <returns>ip对应的整数</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPAddressEx.IntToIp(System.Int64)">
            <summary>
            整数转换为IP地址
            </summary>
            <param name="ipValue">ip对应的整数值</param>
            <returns>IP地址</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPAddressEx.PortAvailable(System.Int32)">
            <summary>
            验证一个端口号是否可用
            </summary>
            <param name="port">需要验证的端口号</param>
            <returns>如果可用返回true,否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPAddressEx.PortAvailable(System.Net.IPAddress,System.Int32)">
            <summary>
            验证一个端口号是否被使用
            </summary>
            <param name="ipaddr">IP对象</param>
            <param name="port">需要验证的端口号</param>
            <returns>如果被使用返回true,否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPAddressEx.GetUsedPorts(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            获取已使用的端口号
            </summary>
            <param name="tcpPorts">TCP占用的端口号</param>
            <param name="udpPorts">UDP占用的端口号</param>
            <param name="ipPorts">ip占用的端口号</param>
            <returns>当前所有已使用端口号集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPAddressEx.GetUsedPorts">
            <summary>
            获取已使用的端口号
            </summary>
            <returns>当前所有已使用端口号集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPAddressEx.GetPingServerIpClientIp(System.String)">
            <summary>
            根据服务器IP获取能连接到该服务器的其中一个客户端面IP地址
            </summary>
            <param name="serverIp">服务器IP</param>
            <returns>找到的客户端IP地址</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPAddressEx.ValidateClientIpPingServerIp(System.String,System.String)">
            <summary>
            验证本机中的一个IP是否能连接到服务端
            </summary>
            <param name="clientIp">客户端IP</param>
            <param name="serverIp">服务端IP</param>
            <returns>能ping通:true,否则false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPAddressEx.Ping(System.String,System.Int32)">
            <summary>
            验证本机能否Ping通指定IP或主机名的主机[成功返回true;否则返回false]
            </summary>
            <param name="hostNameOrAddress">IP或主机名</param>
            <param name="timeout">超时时间</param>
            <returns>成功返回true;否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IPAddressEx.Ping(System.Net.IPAddress)">
            <summary>
            win32 IcmpPing
            </summary>
            <param name="ip">目标IP</param>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.MailEx">
            <summary>
            邮件扩展类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MailEx.SendMail(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String},System.Net.Mail.MailAddress,System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Int32,System.Int32)">
            <summary>
            发送邮件
            </summary>
            <param name="smtpHost">邮件服务器主机名称</param>
            <param name="userName">发件人登录用户名</param>
            <param name="password">发件人登录密码</param>
            <param name="subject">主题</param>
            <param name="isBodyHtml">邮件格式[true:html;false:Text]</param>
            <param name="body">内容</param>
            <param name="attachmentFiles">附件文件路径集合</param>
            <param name="from">发送件人地址</param>
            <param name="to">收件人地址集合</param>
            <param name="cc">抄送收件人集合</param>
            <param name="bcc">密件抄送收件人集合</param>
            <param name="repeatCount">重试次数</param>
            <param name="repeatWaitTime">重试间隔，单位/毫秒</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MailEx.AddMailAddress(System.Net.Mail.MailAddressCollection,System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress})">
            <summary>
            将源邮件地址添加到目标邮件地址集合中
            </summary>
            <param name="targetCollection">目标邮件地址集合</param>
            <param name="sourceMailAddrs">源邮件地址集合</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.MathEx">
            <summary>
            Math扩展类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MathEx.ZERO_D">
            <summary>
            double0
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MathEx.ZERO_I">
            <summary>
            int0
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MathEx.ANGLE_0">
            <summary>
            角度0°
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MathEx.ANGLE_90">
            <summary>
            角度90°
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MathEx.ANGLE_180">
            <summary>
            角度180°
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MathEx.ANGLE_270">
            <summary>
            角度270°
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MathEx.ANGLE_360">
            <summary>
            角度360°
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MathEx.AngleToRadians(System.Double)">
            <summary>
            角度转换为弧度
            </summary>
            <param name="angle">角度</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MathEx.RadiansToAngle(System.Double)">
            <summary>
            弧度转换为角度
            </summary>
            <param name="radians">弧度</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MathEx.AbsAngle(System.Double)">
            <summary>
            将角度值转换为0-360°
            </summary>
            <param name="angle">角度值</param>
            <returns>角度值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MathEx.GetQuadrantByAngle(System.Double)">
            <summary>
            获取指定角度所在象限
            </summary>
            <param name="angle">角度</param>
            <returns>角度所在象限</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Quadrant">
            <summary>
            XY坐标系象限类型枚举
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Quadrant.PositiveXAxisAngle">
            <summary>
            正X轴轴线角,即0°角
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Quadrant.One">
            <summary>
            <![CDATA[第一象限(x>0,y>0)]]>
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Quadrant.PositiveYAxisAngle">
            <summary>
            正Y轴轴线角,即90°角
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Quadrant.Two">
            <summary>
            <![CDATA[第二象限(x<0,y>0)]]>
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Quadrant.NegativeXAxisAngle">
            <summary>
            负X轴轴线角,即180°角
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Quadrant.Three">
            <summary>
            <![CDATA[第三象限(x<0,y<0)]]>
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Quadrant.NegativeYAxisAngle">
            <summary>
            负Y轴轴线角,即270°角
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Quadrant.Four">
            <summary>
            <![CDATA[第四象限(x>0,y<0)]]>
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.NamedPipeEx">
            <summary>
            命名管道扩展类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.NamedPipeEx.#ctor(System.String,System.Func{System.Byte[],System.Byte[]},System.Int32)">
            <summary>
            服务端构造函数
            </summary>
            <param name="pipeName">管道名称</param>
            <param name="proFunc">处理回调</param>
            <param name="readDataMillisecondsTimeout">读取数据超时时长,默认5000毫秒,小于等于-1,死等</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.NamedPipeEx.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.NamedPipeEx.Request(System.String,System.Byte[],System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            请求数据
            异常:IOException,TimeoutException
            </summary>
            <param name="pipeName">管道名称</param>
            <param name="data">请求数据</param>
            <param name="millisecondsTimeout">超时时长,小于等于-1,死等,默认为Timeout.Infinite</param>
            <param name="cancellationToken">取消通知</param>
            <returns>响应结果</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.NumberEx">
            <summary>
            数值类型扩展方法类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.NumberEx.ToHexadecimalString``1(``0)">
            <summary>
            转换为十六进制字符串
            </summary>
            <typeparam name="T">具体的某种整形值类型</typeparam>
            <param name="value">十进制整形数值</param>
            <returns>0x开头的十六进制字符串</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.NumberEx.ToPersentString``1(``0,System.Byte)">
            <summary>
            数值类型数据转换为百分比字符串
            </summary>
            <typeparam name="T">具体的某种整形值类型</typeparam>
            <param name="value">十进制整形数值</param>
            <param name="dpCount">百分比保留的小数点位数</param>
            <returns>百分比字符串</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.NumberEx.ToGBString``1(``0)">
            <summary>
            转换内存字节数为GB字符串
            </summary>
            <param name="value">字节数</param>
            <returns>GB字符串</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ObjectEx">
            <summary>
            Object扩展方法类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ObjectEx.DeepCopy``1(System.Object)">
            <summary>
            对象的深拷贝
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="obj">原始对象</param>
            <returns>新实例</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ObjectEx.GetAssemblyDirectory(System.Object)">
            <summary>
            获取对象类型定义程序集所在目录
            </summary>
            <param name="obj">对象</param>
            <returns>程序集所在目录</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ObjectEx.GetAssemblyDirectory``1">
            <summary>
            获取T类型定义程序集所在目录
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns>程序集所在目录</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ObjectEx.GetAssemblyDirectory(System.Type)">
            <summary>
            获取类型定义程序集所在目录
            </summary>
            <param name="type">类型</param>
            <returns>程序集所在目录</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ObjectEx.GetAvailablePhysicalMemory">
            <summary>
            获取当前可用物理内存大小(Microsoft.VisualBasic程序集->Microsoft.VisualBasic.Devices.ComputerInfo.AvailablePhysicalMemory)
            </summary>
            <returns>当前可用物理内存大小</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ProcessEx">
            <summary>
            进程扩展方法
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ProcessEx._processMutex">
            <summary>
            进程互斥对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ProcessEx._lock">
            <summary>
            多线程锁
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ProcessEx.SingleProcessCheck(System.Boolean,System.String)">
            <summary>
            单进程检测[创建进程互斥对象成功返回true;否则返回false]
            </summary>
            <param name="rangeFlag">单进程检测范围[true:所有用户;false:仅当前用户]</param>
            <param name="mutexName">互斥变量名称</param>
            <returns>创建进程互斥对象成功返回true;否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ProcessEx.SynExcuteCmd(System.String,System.String,System.Int32)">
            <summary>
            同步执行程序并返回该程序的执行输出结果
            </summary>
            <param name="appPath">应用程序路径</param>
            <param name="args">启动参数</param>
            <param name="millisecondsTimeout">执行超时时长-1无限时长</param>
            <returns>执行输出结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ProcessEx.ValidaProcessId(System.Int32)">
            <summary>
            验证进程ID是否有效[有效返回true;无效返回false]
            </summary>
            <param name="id">进程ID</param>
            <returns>有效返回true;无效返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ProcessEx.FindProcessByFilePath(System.String)">
            <summary>
            根据程序路径查找进程
            </summary>
            <param name="appExeFilePath">根据程序路</param>
            <returns>进程列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ProcessEx.Start(System.String,System.String)">
            <summary>
            通过指定应用程序的名称和一组命令行参数来启动一个进程资源，并将该资源与新的 System.Diagnostics.Process 组件相关联
            </summary>
            <param name="fileName">要在该进程中运行的应用程序文件的名称</param>
            <param name="arguments">启动该进程时传递的命令行实参</param>
            <returns>与该进程关联的新的 System.Diagnostics.Process 组件；如果没有启动进程资源（例如，如果重用了现有进程），则为 null</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.StringEx">
            <summary>
            字符串类型扩展方法类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.StringEx.TryParseUInt32(System.String,System.UInt32@)">
            <summary>
            字符串扩展方法:十进制或是十六进制的数值字符串转换为uint
            </summary>
            <param name="str">十进制或是十六进制的数值字符</param>
            <param name="value">转换出的uint</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.StringEx.ParseUInt32(System.String)">
            <summary>
            字符串扩展方法:十进制或是十六进制的数值字符串转换为uint
            </summary>
            <param name="str">十进制或是十六进制的数值字符串</param>
            <returns>转换出的uint</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.StringEx.TryParseInt32(System.String,System.Int32@)">
            <summary>
            字符串扩展方法:十进制或是十六进制的数值字符串转换为uint
            </summary>
            <param name="str">十进制或是十六进制的数值字符</param>
            <param name="value">转换出的int</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.StringEx.ParseInt32(System.String)">
            <summary>
            字符串扩展方法:十进制或是十六进制的数值字符串转换为uint
            </summary>
            <param name="str">十进制或是十六进制的数值字符串</param>
            <returns>转换出的int</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.StringEx.CalculateChineseCharCount(System.String)">
            <summary>
            计算字符串中包含的中文字符数
            </summary>
            <param name="str">待计算的字符串</param>
            <returns>字符串中包含的中文字符数</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.StringEx.ToHexadecimaBytes(System.String)">
            <summary>
            字符串转换为十六进制的二进制数据
            </summary>
            <param name="str">待转换的字符串</param>
            <returns>十六进制格式的二进制数据</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.StringEx.IsAllUpper(System.String)">
            <summary>
            字符串的字母是否全大写[true:全大写;false:大小写混合]
            </summary>
            <param name="str">字符串</param>
            <returns>true:全大写;false:大小写混合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.StringEx.IsAllLower(System.String)">
            <summary>
            字符串的字母是否全小写[true:全小写;false:大小写混合]
            </summary>
            <param name="str">字符串</param>
            <returns>true:全小写;false:大小写混合</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.StructEx">
            <summary>
            Struct扩展方法类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.StructEx.StructToBytes(System.Object)">
            <summary>
            将结构体类型转换为字节数据
            </summary>
            <param name="obj">结构体类对象</param>
            <returns>字节数据</returns> 
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.StructEx.ByteToStruct``1(System.Byte[])">
            <summary>
            将字节数组转换为结构体对象
            </summary>
            <typeparam name="T">结构体类型</typeparam>
            <param name="bytes">字节数组</param>
            <returns>结构体对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.StructEx.StructReflectionSetValue``1(``0,System.Collections.Generic.Dictionary{System.Reflection.FieldInfo,System.Object})">
            <summary>
            结构体反射设置值[注:返回的结构体对象不是之前的对象,因为结构体是值类型]
            </summary>
            <typeparam name="T">结构体类型</typeparam>
            <param name="value">要设置值的结构体对象</param>
            <param name="fieldValues">结构体对象要设置的字段及值字典集合</param>
            <returns>设置值后的结构体对象</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.StructReflectionSetValueHelper`1">
            <summary>
            结果体反射设置值辅助类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.StructReflectionSetValueHelper`1.Value">
            <summary>
            结构体对象
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.StructReflectionSetValueHelper`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="value">结构体对象</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.TelnetServer">
            <summary>
            Telnet Server
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TelnetServer.#ctor(System.Func{System.String,System.String},System.String,UtilZ.Dotnet.Ex.Base.TelnetAuthInfo,System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="proCallback">接收命令回调</param>
            <param name="serviceName">回显名称</param>
            <param name="authInfo">登录认证信息</param>
            <param name="ip">监听IP</param>
            <param name="port">监听端口</param>
            <param name="backlog">客户最大连接数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TelnetServer.Start">
            <summary>
            启动监听
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TelnetServer.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TelnetServer.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDispose">是否释放标识</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TelnetClient.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TelnetClient.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDispose">是否释放标识</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.TelnetAuthInfo">
            <summary>
            telnet认证信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.TelnetAuthInfo.IsAuth">
            <summary>
            是否需要登录认证[true:需要登录认证;false:不需要登录认证]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.TelnetAuthInfo.Username">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.TelnetAuthInfo.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TelnetAuthInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TelnetAuthInfo.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ThreadEx">
            <summary>
            线程扩展类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ThreadEx._action">
            <summary>
            线程要执行的委托
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ThreadEx._name">
            <summary>
            线程名称
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ThreadEx._isBackground">
            <summary>
            是否后台运行[true:后台线程;false:前台线程]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ThreadEx._threadLock">
            <summary>
            外部调用线程锁
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ThreadEx._thread">
            <summary>
            执行线程
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ThreadEx.OwnerThread">
            <summary>
            获取内部线程
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ThreadEx._runing">
            <summary>
            当前线程是否正在运行[true:正在运行;false:未运行]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ThreadEx._threadStartPara">
             <summary>
            线程参数
             </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadEx.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="name">线程名称</param>
            <param name="isBackground">是否后台运行[true:后台线程;false:前台线程]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadEx.#ctor(System.Action{UtilZ.Dotnet.Ex.Base.ThreadExPara},System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="action">线程要执行的委托</param>
            <param name="name">线程名称</param>
            <param name="isBackground">后台运行标识[true:后台线程;false:前台线程]</param>
        </member>
        <member name="E:UtilZ.Dotnet.Ex.Base.ThreadEx.Completed">
            <summary>
            线程执行完成事件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadEx.OnRaiseCompleted(UtilZ.Dotnet.Ex.Base.ThreadExCompletedType,System.Exception)">
            <summary>
            触发线程执行完成事件
            </summary>
            <param name="type">线程执行完成类型</param>
            <param name="ex">当执行异常可取消时可能的异常信息</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ThreadEx.ThreadState">
            <summary>
            获取线程当前的状态
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ThreadEx.ManagedThreadId">
            <summary>
            获取当前托管线程的唯一标识符
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ThreadEx.IsRuning">
            <summary>
            当前线程是否正在运行
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadEx.Start(System.Object,System.Threading.ApartmentState)">
            <summary>
            启动线程
            </summary>
            <param name="obj">线程启动参数</param>
            <param name="apartmentState">指定的单元状态 System.Threading.Thread</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadEx.ThreadExcuteMethod(System.Object)">
            <summary>
            线程执行方法
            </summary>
            <param name="obj">线程参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadEx.Stop(System.Boolean,System.Int32)">
            <summary>
            停止线程
            </summary>
            <param name="sycn">是否同步调用停止方法,同步调用会等线程结束后才退出本方法[true:同步;false:异步]</param>
            <param name="synMillisecondsTimeout">同步超时时间,-1表示无限期等待,单位/毫秒[isSycn为true时有效]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadEx.Abort(System.Object)">
            <summary>
            终止线程
            </summary>
            <param name="stateInfo">An object that contains application-specific information, such as state, which can be used by the thread being aborted</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadEx.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadEx.Start(System.Action{UtilZ.Dotnet.Ex.Base.ThreadExPara},System.String,System.Boolean,System.Object)">
            <summary>
            创建线程对象
            </summary>
            <param name="action">线程要执行的委托</param>
            <param name="name">线程名称</param>
            <param name="isBackground">是否后台运行[true:后台线程;false:前台线程]</param>
            <param name="obj">线程启动参数</param>
            <returns>返回线程对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadEx.AssignCoreRun(System.Int32,System.Int32,System.Int32)">
            <summary>
            .net方式指定当前线程运行在指定CPU核心上[多个核心间切换运行,不像win32方式是在一个核心上运行]
            </summary>
            <param name="threadID">线程ID</param>
            <param name="idealProcessor">首选处理器</param>
            <param name="coreID">目标处理器(Power(2,0-4]之间的单值或或位运算值)</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadEx.SetThreadIsBackground(System.Threading.Thread,System.Boolean)">
            <summary>
            设置线程是否为后台线程
            </summary>
            <param name="thread">要设置的线程</param>
            <param name="isBackground">true:后台线程;false:前台线程</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ThreadExPara">
            <summary>
            线程参数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ThreadExPara.Token">
            <summary>
            线程取消通知Token
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ThreadExPara.Para">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadExPara.#ctor(System.Threading.CancellationToken,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="token">CancellationToken</param>
            <param name="para">参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadExPara.WaitOne">
            <summary>
            对Token,WaitHandle方法的包装,Blocks the current thread until the current System.Threading.WaitHandle receives a signal. 
            </summary>
            <returns>true if the current instance receives a signal. 
            If the current instance is never signaled, 
            System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean) never returns.</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadExPara.WaitOne(System.Int32)">
            <summary>
            对Token,WaitHandle方法的包装,Blocks the current thread until the current System.Threading.WaitHandle receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1)to wait indefinitely</param>
            <returns>true if the current instance receives a signal; otherwise, false</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ThreadStartPara">
            <summary>
            线程启动参数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ThreadStartPara.Obj">
            <summary>
            参数对象
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ThreadStartPara.Cts">
            <summary>
            CancellationTokenSource
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadStartPara.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="obj">参数对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadStartPara.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadStartPara.Cancell">
            <summary>
            取消执行
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadStartPara.WaitOne(System.Int32)">
            <summary>
            等待
            </summary>
            <param name="millisecondsTimeout">等待时长,毫秒</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadStartPara.Set">
            <summary>
            发送信息通知
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.IThreadEx">
            <summary>
            扩展线程接口
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.IThreadEx.OwnerThread">
            <summary>
            获取内部线程
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IThreadEx.Start(System.Object,System.Threading.ApartmentState)">
            <summary>
            启动线程
            </summary>
            <param name="obj">线程启动参数</param>
            <param name="apartmentState">指定的单元状态 System.Threading.Thread</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IThreadEx.Stop(System.Boolean,System.Int32)">
            <summary>
            停止线程
            </summary>
            <param name="isSycn">是否同步调用停止方法,同步调用会等线程结束后才退出本方法[true:同步;false:异步]</param>
            <param name="synMillisecondsTimeout">同步超时时间,-1表示无限期等待,单位/毫秒</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.IThreadEx.Abort(System.Object)">
            <summary>
            终止线程
            </summary>
            <param name="stateInfo">An object that contains application-specific information, such as state, which can be used by the thread being aborted</param>
        </member>
        <member name="E:UtilZ.Dotnet.Ex.Base.IThreadEx.Completed">
            <summary>
            线程执行完成事件
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.IThreadEx.ThreadState">
            <summary>
            获取线程当前的状态
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.IThreadEx.ManagedThreadId">
            <summary>
            获取当前托管线程的唯一标识符
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.IThreadEx.IsRuning">
            <summary>
            当前线程是否正在运行
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ThreadExCompletedArgs">
            <summary>
            线程执行完成事件参数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ThreadExCompletedArgs.Type">
            <summary>
            线程执行完成类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ThreadExCompletedArgs.Exception">
            <summary>
            当执行异常可取消时可能的异常信息
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ThreadExCompletedArgs.#ctor(UtilZ.Dotnet.Ex.Base.ThreadExCompletedType,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="type">线程执行完成类型</param>
            <param name="ex">当执行异常可取消时可能的异常信息</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ThreadExCompletedType">
            <summary>
            线程执行完成类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ThreadExCompletedType.Completed">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ThreadExCompletedType.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ThreadExCompletedType.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.TimeEx">
            <summary>
            时间扩展类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TimeEx.GetTimestamp(System.Boolean)">
            <summary>
            获取当前时间的时间戳
            </summary>
            <param name="utc">是否使用utc时间[true:utc时间;false:本机时间]</param>
            <returns>当前时间的时间戳</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TimeEx.DateTimeToTimestamp(System.DateTimeOffset)">
            <summary>
            日期时间转换为时间戳
            </summary>
            <param name="datetime">指定日期时间</param>
            <returns>当前时间的时间戳</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TimeEx.TimestampToDateTime(System.Int64)">
            <summary>
            时间戳转换为日期时间
            </summary>
            <param name="timestamp">时间戳</param>
            <returns>时间</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.TimeoutBase">
            <summary>
            超时基类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.TimeoutBase._millisecondsTimeout">
            <summary>
            超时时长,单位毫秒
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.TimeoutBase.MillisecondsTimeout">
            <summary>
            获取超时时长,单位毫秒
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.TimeoutBase._lastAccessTimestamp">
            <summary>
            最后一次访问时间戳
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.TimeoutBase.LastAccessTimestamp">
            <summary>
            获取最后一次访问时间戳
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TimeoutBase.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="millisecondsTimeout">超时时长,单位毫秒</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TimeoutBase.UpdateLastAccessTimestamp">
            <summary>
            更新访问时间戳
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TimeoutBase.IsTimeout">
            <summary>
            是否超时
            </summary>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.TypeEx">
            <summary>
             Type类型扩展方法类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.TypeEx._htTypes">
            <summary>
            已创建过后类型[key:类型名称;value:Type]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TypeEx.ConvertTypeByTypeFullName(System.String,System.Boolean)">
            <summary>
            根据类型全名称转换为类型
            </summary>
            <param name="typeFullName">类型名称[格式:类型名,程序集命名.例如:Oracle.ManagedDataAccess.Client.OracleConnection,Oracle.ManagedDataAccess, Version=4.121.1.0, Culture=neutral, PublicKeyToken=89b483f429c47342]</param>
            <param name="hasCache">是否缓存转换之后的类型[true:缓存;false:不缓存]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TypeEx.IsSubInterfaceOf(System.Type,System.Type)">
            <summary>
            确定当前的类型是继承自指定的接口[true:继承自接口;false:未继承自接口]
            </summary>
            <param name="type">当前的类型</param>
            <param name="interfaceType">接口类型</param>
            <returns>true:继承自接口;false:未继承自接口</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.XmlEx">
            <summary>
            Xml辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.GetXmlNodeValue(System.Xml.XmlNode,System.Boolean)">
            <summary>
            获取XmlNode值[节点为null时返回空字符串]
            </summary>
            <param name="node">XmlNode</param>
            <param name="nodeIsNullValueIsNull">元素为null时是否返回null[true:null;false:string.Empty],默认为false</param>
            <returns>值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.GetXmlNodeValue(System.Xml.XmlNode,System.Type)">
            <summary>
            获取XmlNode值[节点为null时返回空字符串]
            </summary>
            <param name="node">XmlNode</param>
            <param name="targetType">数据目标类型</param>
            <returns>值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.GetXmlNodeValue``1(System.Xml.XmlNode)">
            <summary>
            获取XmlNode值[节点为null时返回空字符串]
            </summary>
            <param name="node">XmlNode</param>
            <returns>值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.TryGetXmlNodeValue(System.Xml.XmlNode,System.Type,System.Object@)">
            <summary>
            尝试获取并转换XmlNode值[节点为null时返回空字符串]
            </summary>
            <param name="node">XmlNode</param>
            <param name="targetType">数据目标类型</param>
            <param name="result">结果值</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.TryGetXmlNodeValue``1(System.Xml.XmlNode,``0@)">
            <summary>
            尝试获取并转换XmlNode值[节点为null时返回空字符串]
            </summary>
            <param name="node">XmlNode</param>
            <param name="result">结果值</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.GetXmlNodeAttributeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            获取XmlNode指定属性值
            </summary>
            <param name="node">XmlNode</param>
            <param name="attributeName">属性名称</param>
            <param name="attributeNotExitValueIsNull">特性不存在时是否返回null值[true:null;false:string.Empty],默认为false</param>
            <returns>属性值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.GetXmlNodeAttributeValue(System.Xml.XmlNode,System.String,System.Type)">
            <summary>
            获取XmlNode指定属性值
            </summary>
            <param name="node">XmlNode</param>
            <param name="attributeName">属性名称</param>
            <param name="targetType">数据目标类型</param>
            <returns>属性值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.GetXmlNodeAttributeValue``1(System.Xml.XmlNode,System.String)">
            <summary>
            获取XmlNode指定属性值
            </summary>
            <typeparam name="T">数据目标泛型类型</typeparam>
            <param name="node">XmlNode</param>
            <param name="attributeName">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.TryGetXmlNodeAttributeValue(System.Xml.XmlNode,System.String,System.Type,System.Object@)">
            <summary>
            尝试获取并转换XmlNode指定属性值
            </summary>
            <param name="node">XmlNode</param>
            <param name="attributeName">属性名称</param>
            <param name="targetType">数据目标类型</param>
            <param name="result">结果值</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.TryGetXmlNodeAttributeValue``1(System.Xml.XmlNode,System.String,``0@)">
            <summary>
            尝试获取并转换XmlNode指定属性值
            </summary>
            <typeparam name="T">数据目标泛型类型</typeparam>
            <param name="node">XmlNode</param>
            <param name="attributeName">属性名称</param>
            <param name="result">结果值</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.SetXmlNodeAttribute(System.Xml.XmlNode,System.String,System.String,System.Boolean)">
            <summary>
            设置XmlAttribute
            </summary>
            <param name="node">目标XmlNode元素</param>
            <param name="attributeName">特性名称</param>
            <param name="value">特性值</param>
            <param name="valueIsNullAttributeExit">当特性值为null时,是否存在该特性[true:存在;false:不存在]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.CreateXmlNode(System.Xml.XmlDocument,System.String,System.String,System.String,System.String)">
            <summary>
            创建XmlNode
            </summary>
            <param name="xdoc">所属XmlDocument</param>
            <param name="nodeName">要创建的子节点名称</param>
            <param name="attriName">属性名称</param>
            <param name="attiValue">属性值</param>
            <param name="nodeValue">节点值</param>
            <returns>XmlNode</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.CreateXmlCDataSection(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            创建XmlCDataSection
            </summary>
            <param name="xdoc">所属XmlDocument</param>
            <param name="nodeName">节点名称</param>
            <param name="value">值</param>
            <returns>XmlCDataSection</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.GetXElementValue(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            获取XElement元素节点值[节点为null时返回空字符串]
            </summary>
            <param name="ele">XElement节点</param>
            <param name="eleIsNullValueIsNull">元素为null时是否返回null[true:null;false:string.Empty],默认为false</param>
            <returns>值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.GetXElementValue``1(System.Xml.Linq.XElement)">
            <summary>
            获取XElement元素节点值[节点为null时返回空字符串]
            </summary>
            <param name="ele">XElement节点</param>
            <returns>值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.GetXElementValue(System.Xml.Linq.XElement,System.Type)">
            <summary>
            获取XElement元素节点值[节点为null时返回空字符串]
            </summary>
            <param name="ele">XElement节点</param>
            <param name="targetType">数据目标类型</param>
            <returns>值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.TryTryGetXElementValue``1(System.Xml.Linq.XElement,``0@)">
            <summary>
            尝试获取并转换XElement元素节点值
            </summary>
            <param name="ele">XElement节点</param>
            <param name="result">结果值</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.TryGetXElementValue(System.Xml.Linq.XElement,System.Type,System.Object@)">
            <summary>
            尝试获取并转换XElement元素节点值
            </summary>
            <param name="ele">XElement节点</param>
            <param name="targetType">数据目标类型</param>
            <param name="result">结果值</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.GetXElementAttributeValue(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            获取XElement指定属性值
            </summary>
            <param name="ele">XElement</param>
            <param name="attributeName">属性名称</param>
            <param name="attributeNotExitValueIsNull">特性不存在时是否返回null[true:null;false:string.Empty],默认为false</param>
            <returns>属性值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.GetXElementAttributeValue(System.Xml.Linq.XElement,System.String,System.Type)">
            <summary>
            获取XElement指定属性值
            </summary>
            <param name="ele">XElement</param>
            <param name="attributeName">属性名称</param>
            <param name="targetType">数据目标类型</param>
            <returns>属性值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.GetXElementAttributeValue``1(System.Xml.Linq.XElement,System.String)">
            <summary>
            获取XElement指定属性值
            </summary>
            <typeparam name="T">数据目标泛型类型</typeparam>
            <param name="ele">XElement</param>
            <param name="attributeName">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.TryGetXElementAttributeValue(System.Xml.Linq.XElement,System.String,System.Type,System.Object@)">
            <summary>
            尝试获取并转换XElement指定属性值
            </summary>
            <param name="ele">XElement</param>
            <param name="attributeName">属性名称</param>
            <param name="targetType">数据目标类型</param>
            <param name="result">结果值</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.TryGetXElementAttributeValue``1(System.Xml.Linq.XElement,System.String,``0@)">
            <summary>
            尝试获取并转换XElement指定属性值
            </summary>
            <typeparam name="T">数据目标泛型类型</typeparam>
            <param name="ele">XElement</param>
            <param name="attributeName">属性名称</param>
            <param name="result">结果值</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.SetXElementAttribute(System.Xml.Linq.XElement,System.String,System.String,System.Boolean)">
            <summary>
            设置XAttribute
            </summary>
            <param name="ele">目标元素</param>
            <param name="attributeName">特性名称</param>
            <param name="value">特性值</param>
            <param name="valueIsNullAttributeExit">当特性值为null时,是否存在该特性[true:存在;false:不存在]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.CreateXElement(System.String,System.String,System.String,System.String)">
            <summary>
            创建特性值xml元素节点
            </summary>
            <param name="eleName">节点名称</param>
            <param name="attriName">属性名称</param>
            <param name="attiValue">属性值</param>
            <param name="eleValue">节点值</param>
            <returns>特性值xml元素节点</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.XmlEx.CreateXCDataXElement(System.String,System.String)">
            <summary>
            创建CDataxml元素节点
            </summary>
            <param name="eleName">节点名称</param>
            <param name="value">值</param>
            <returns>CDataxml元素节点</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.BindingCollection`1">
            <summary>
            绑定集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.OnRaiseInvokeAction(System.Action)">
            <summary>
            触发一个Action
            </summary>
            <param name="action">Action</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingCollection`1.DataSource">
            <summary>
            获取数据源集合
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.BindingCollection`1.SyncRoot">
            <summary>
            集合改变锁
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.#ctor(UtilZ.Dotnet.Ex.Base.ICollectionOwner,System.Collections.ObjectModel.Collection{`0})">
            <summary>
            构造函数
            </summary>
            <param name="owner">集合所属ui对象</param>
            <param name="items">绑定集合[Winform:BindingListEx;WPF:ObservableCollection或是其子类]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.#ctor(UtilZ.Dotnet.Ex.Base.ICollectionOwner)">
            <summary>
            构造函数
            </summary>
            <param name="owner">集合所属ui对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.Add(`0)">
            <summary>
            将对象添加到集合的结尾处
            </summary>
            <param name="item">要添加的新项。对于引用类型，该值可以为 null</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.AddNew">
            <summary>
            隐藏重写AddNew,将新项添加集合开始
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.AddNewCore">
            <summary>
            隐藏重写AddNewCore,将新项添加到末尾
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加集合到末尾
            </summary>
            <param name="items">集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.Insert(System.Int32,`0)">
            <summary>
            将元素插入集合的指定索引处
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 item</param>
            <param name="item">要插入的对象。对于引用类型，该值可以为 null</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.Remove(`0)">
            <summary>
            从集合中移除特定对象的第一个匹配项
            </summary>
            <param name="item">要从集合中移除的对象。对于引用类型，该值可以为 null</param>
            <returns>如果成功移除 item，则为 true；否则为 false。如果在原始集合中未找到 item，此方法也会返回 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.RemoveAt(System.Int32)">
            <summary>
            移除集合的指定索引处的元素
            异常:
            System.ArgumentOutOfRangeException:index 小于零。- 或 -index 等于或大于集合.Count
            </summary>
            <param name="index">要移除的元素的从零开始的索引</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.RemoveArea(System.Int32,System.Int32)">
            <summary>
            从指定位置移除指定个数的项
            </summary>
            <param name="index">移除起始位置</param>
            <param name="count">移除项个数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.RemoveArrange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            从指定位置移除指定个数的项
            </summary>
            <param name="items">要移除的集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.Clear">
            <summary>
            从集合中移除所有元素
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingCollection`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素
            异常:System.ArgumentOutOfRangeException:index 小于零。- 或 -index 等于或大于 System.Collections.ObjectModel.Collection`1.Count。
            </summary>
            <param name="index">要获得或设置的元素从零开始的索引</param>
            <returns>指定索引处的元素</returns>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingCollection`1.Count">
            <summary>
            获取集合中实际包含的元素数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingCollection`1.IsReadOnly">
            <summary>
            获取一个值，该值指示集合是否为只读
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.Contains(`0)">
            <summary>
            确定某元素是否在集合中[集合中找到 item，则为 true；否则为 false]
            </summary>
            <param name="item">要在 System.Collections.ObjectModel.Collection`1 中定位的对象。对于引用类型，该值可以为 null</param>
            <returns>集合中找到 item，则为 true；否则为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个集合复制到兼容的一维 System.Array
            异常:
            System.ArgumentNullException:array 为 null
            System.ArgumentOutOfRangeException: index 小于零
            System.ArgumentException:源集合中的元素数目大于从 index 到目标 array 末尾之间的可用空间
            </summary>
            <param name="array">作为从 System.Collections.ObjectModel.Collection`1 复制的元素的目标位置的一维 System.Array。System.Array必须具有从零开始的索引</param>
            <param name="index">array 中从零开始的索引，将在此处开始复制</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.IndexOf(`0)">
            <summary>
            搜索指定的对象，并返回整个集合中第一个匹配项的从零开始的索引
            </summary>
            <param name="item">要在集合中定位的对象。对于引用类型，该值可以为 null</param>
            <returns>如果在整个集合中找到 item 的第一个匹配项，则为该项的从零开始的索引；否则为-1</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingCollection`1.GetEnumerator">
            <summary>
            返回循环访问集合的枚举数
            </summary>
            <returns>用于集合的IEnumerator</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.BindingListChangedArgs`1">
            <summary>
            UI绑定集合发生更改委托参数
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListChangedArgs`1.#ctor(UtilZ.Dotnet.Ex.Base.BindingListChangedType,`0,`0,System.Collections.Generic.List{`0},System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="type">改变类型</param>
            <param name="item">新项</param>
            <param name="oldItem">旧项</param>
            <param name="newItems">新项集合</param>
            <param name="oldtems">旧项集合</param>
            <param name="count">当前集合项组数</param>
            <param name="index">当前项在集合中的位置索引</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingListChangedArgs`1.Type">
            <summary>
            UI绑定集合改变类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingListChangedArgs`1.NewItem">
            <summary>
            新项
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingListChangedArgs`1.OldItem">
            <summary>
            旧项
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingListChangedArgs`1.NewItems">
            <summary>
            新项集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingListChangedArgs`1.Oldtems">
            <summary>
            旧项集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingListChangedArgs`1.Count">
            <summary>
            当前集合项组数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingListChangedArgs`1.Index">
            <summary>
            当前项在集合中的位置索引
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.BindingListChangedType">
            <summary>
            UI绑定集合改变类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.BindingListChangedType.Add">
            <summary>
            添加项
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.BindingListChangedType.AddRange">
            <summary>
            添加多项
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.BindingListChangedType.Insert">
            <summary>
            插入
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.BindingListChangedType.Update">
            <summary>
            更新项
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.BindingListChangedType.Remove">
            <summary>
            删除项
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.BindingListChangedType.RemoveRange">
            <summary>
            移除多项
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.BindingListChangedType.Clear">
            <summary>
            清空项
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.BindingListEx`1">
            <summary>
            UI绑定集合
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            重写排序
            </summary>
            <param name="prop"></param>
            <param name="direction"></param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingListEx`1.SupportsSortingCore">
            <summary>
            是否支持排序
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1">
            <summary>
            UI绑定集合
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1._isRingStruct">
            <summary>
            列表是否是环形结构[true:环形显示列表;false:非环形显示列表]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1._ringPosition">
            <summary>
            环形结构在容量满之后更新数据的位置索引,默认为0
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.ResetRingPosition">
            <summary>
            重置环形结构在容量满之后更新数据的位置索引
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.UpdateRingPosition(System.Boolean)">
            <summary>
            更新环形结构在容量满之后更新数据的位置索引
            </summary>
            <param name="flag">是否是增加项标识[true:添加项;false:减少项]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.#ctor(UtilZ.Dotnet.Ex.Base.ICollectionOwner)">
            <summary>
            构造函数
            </summary>
            <param name="owner">绑定列表所属控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="capcity">环形结构时的容量</param>
        </member>
        <member name="E:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.BindingListChanged">
            <summary>
            UI绑定集合发生更改事件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.OnBindingListChanged(UtilZ.Dotnet.Ex.Base.BindingListChangedType,`0,`0,System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            构造函数
            </summary>
            <param name="type">改变类型</param>
            <param name="item">新项</param>
            <param name="oldItem">旧项</param>
            <param name="newItems">新项集合</param>
            <param name="oldTems">旧项集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.OnRaiseInvokeAction(System.Action)">
            <summary>
            触发一个Action
            </summary>
            <param name="action">Action</param>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.SyncRoot">
            <summary>
            集合改变锁
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.Add(`0)">
            <summary>
            添加项到末尾
            </summary>
            <param name="item">要添加的新项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.AddNew">
            <summary>
            隐藏重写AddNew,将新项添加集合开始
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.AddNewCore">
            <summary>
            隐藏重写AddNewCore,将新项添加到末尾
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加集合到末尾
            </summary>
            <param name="items">集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.Insert(System.Int32,`0)">
            <summary>
            隐藏重写Insert,插入指定的项
            </summary>
            <param name="index">从开始处的索引</param>
            <param name="item">插入的项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.Remove(`0)">
            <summary>
            隐藏重写Remove,移除一个匹配的项
            </summary>
            <param name="item">移除的项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.RemoveAt(System.Int32)">
            <summary>
            隐藏重写Remove,移除指定位置的项
            </summary>
            <param name="index">从开始处的索引</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.RemoveItem(System.Int32)">
            <summary>
            隐藏重写RemoveItem,移除指定位置的项
            </summary>
            <param name="index">从开始处的索引</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.RemoveArea(System.Int32,System.Int32)">
            <summary>
            从指定位置移除指定个数的项
            </summary>
            <param name="index">移除起始位置</param>
            <param name="count">移除项个数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.RemoveArrange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            从指定位置移除指定个数的项
            </summary>
            <param name="items">要移除的集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.Clear">
            <summary>
            隐藏重写Clear
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            重写排序
            </summary>
            <param name="prop"></param>
            <param name="direction"></param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.SupportsSortingCore">
            <summary>
            是否支持排序
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.Item(System.Int32)">
            <summary>
            重写索引
            </summary>
            <param name="index">索引</param>
            <returns>索引对应的数据项</returns>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1._capcity">
            <summary>
            环形结构容量
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.BindingListEx_bk`1.Capcity">
            <summary>
            获取或设置环形结构容量
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ComparerResultType">
            <summary>
            比较结果类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ComparerResultType.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ComparerResultType.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ComparerResultType.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ICollectionOwner">
            <summary>
            集合所属接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ICollectionOwner.Invoke(System.Delegate,System.Object[])">
            <summary>
            在拥有控件的基础窗口句柄的线程上，用指定的参数列表执行指定委托
            </summary>
            <param name="method">一个方法委托，它采用的参数的数量和类型与 args 参数中所包含的相同</param>
            <param name="args">作为指定方法的参数传递的对象数组。如果此方法没有参数，该参数可以是 null</param>
            <returns>System.Object，它包含正被调用的委托返回值；如果该委托没有返回值，则为 null</returns>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ICollectionOwner.InvokeRequired">
            <summary>
            获取一个值，该值指示调用方在对控件进行方法调用时是否必须调用 Invoke 方法，因为调用方位于创建控件所在的线程以外的线程中.
            如果控件的 System.Windows.Forms.Control.Handle 是在与调用线程不同的线程上创建的（说明您必须通过 Invoke 方法对控件进行调用），则为true；否则为 false。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ICollectionOwner.IsDisposed">
            <summary>
            获取一个值，该值指示控件是否已经被释放[如果控件已经被释放，则为 true；否则为 false]
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Config.ConfigAttribute">
            <summary>
            配置Attribute基类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.Config.ConfigAttribute.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.Config.ConfigAttribute.Des">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.Config.ConfigAttribute.AllowNullValueElement">
            <summary>
            值为null时节点是否存在[true:存在;false:不存在]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.Config.ConfigAttribute.Converter">
            <summary>
            配置值转换对象
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.Config.ConfigAttribute.ConverterType">
            <summary>
            配置值转换类型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
            <param name="des">描述</param>
            <param name="allowNullValueElement">值为null时节点是否存在[true:存在;false:不存在]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigAttribute.GetName(System.Type)">
            <summary>
            获取参数名称
            </summary>
            <param name="type">项类型</param>
            <returns>参数名称</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigAttribute.GetName(System.Reflection.PropertyInfo)">
            <summary>
            获取参数名称
            </summary>
            <param name="propertyInfo">项PropertyInfo</param>
            <returns>参数名称</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Config.ConfigCollectionAttribute">
            <summary>
            标记配置项集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.Config.ConfigCollectionAttribute.ElementName">
            <summary>
            元素项名称
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigCollectionAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigCollectionAttribute.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
            <param name="eleName">元素项名称</param>
            <param name="des">描述</param>
            <param name="allowNullValueElement">值为null时节点是否存在[true:存在;false:不存在]</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Config.ConfigCommentAttribute">
            <summary>
            标记注释文本项
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigCommentAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Config.ConfigIgnoreAttribute">
            <summary>
            标记配置项为忽略
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigIgnoreAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Config.ConfigItemAttribute">
            <summary>
            标记基元配置项
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigItemAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigItemAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
            <param name="des">描述</param>
            <param name="allowNullValueElement">值为null时节点是否存在[true:存在;false:不存在]</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Config.ConfigCustomerAttribute">
            <summary>
            标记配置项自定义读写
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.Config.ConfigCustomerAttribute.CustomerConfig">
            <summary>
            自定义配置项读写
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigCustomerAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="customerConfigType">自定义配置项读写类型</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigCustomerAttribute.#ctor(System.Type,System.String,System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="customerConfigType">自定义配置项读写类型</param>
            <param name="name">名称</param>
            <param name="des">描述</param>
            <param name="allowNullValueElement">值为null时节点是否存在[true:存在;false:不存在]</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Config.ConfigObjectAttribute">
            <summary>
            标记配置项是对象类型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigObjectAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigObjectAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
            <param name="des">描述</param>
            <param name="allowNullValueElement">值为null时节点是否存在[true:存在;false:不存在]</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Config.ConfigRootAttribute">
            <summary>
            标记配置根
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigRootAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
            <param name="des">描述</param>
            <param name="allowNullValueElement">值为null时节点是否存在[true:存在;false:不存在]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigRootAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Config.ConfigDataType">
            <summary>
            配置数据类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Config.ConfigDataType.Basic">
            <summary>
            类型可与字符串相互转换
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Config.ConfigDataType.IDictionary">
            <summary>
            实现IDictionary接口的集合
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Config.ConfigDataType.IList">
            <summary>
            实现IList接口的集合
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Config.ConfigDataType.Object">
            <summary>
            对象
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Config.IConfigValueConverter">
            <summary>
            配置值转换接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.IConfigValueConverter.ConvertTo(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            将属性值转换为字符串
            </summary>
            <param name="propertyInfo">PropertyInfo</param>
            <param name="value">属性值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.IConfigValueConverter.ConvertFrom(System.Reflection.PropertyInfo,System.String)">
            <summary>
            将字符串转换为属性值
            </summary>
            <param name="propertyInfo">PropertyInfo</param>
            <param name="value">字符串</param>
            <returns>属性值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Config.IConfigCustomerRW">
            <summary>
            自定义配置项读写接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.IConfigCustomerRW.Write(System.Reflection.PropertyInfo,System.Object,System.Xml.Linq.XElement,UtilZ.Dotnet.Ex.Base.Config.ConfigCustomerAttribute)">
            <summary>
            写配置项
            </summary>
            <param name="propertyInfo">PropertyInfo</param>
            <param name="value">属性值</param>
            <param name="element">存放配置的XElement</param>
            <param name="attri">ConfigCustomerAttribute</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.IConfigCustomerRW.Read(System.Reflection.PropertyInfo,System.Xml.Linq.XElement,UtilZ.Dotnet.Ex.Base.Config.ConfigCustomerAttribute)">
            <summary>
            读配置项
            </summary>
            <param name="propertyInfo">PropertyInfo</param>
            <param name="element">存放配置的XElement</param>
            <param name="attri">ConfigCustomerAttribute</param>
            <returns>属性值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Config.ConfigCore">
            <summary>
            配置读写类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigCore.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigCore.WriteConfigToXDocument(System.Object)">
            <summary>
            写配置到XDocument
            </summary>
            <param name="config">配置对象</param>
            <returns>配置XDocument</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigCore.ReadConfigFromXDocument(System.Xml.Linq.XDocument,System.Object@)">
            <summary>
            从xml配置中读取配置到指定的配置对象中
            </summary>
            <param name="xdoc">xml配置</param>
            <param name="config">指定的配置对象</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Config.ConfigHelper">
            <summary>
            配置辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigHelper.WriteConfigToXmlFile(System.Object,System.String)">
            <summary>
            写配置对象到xml文件
            </summary>
            <param name="config">配置对象</param>
            <param name="configFilePath">配置文件存放路径</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigHelper.WriteConfigToXDocument(System.Object)">
            <summary>
            写配置到XDocument
            </summary>
            <param name="config">配置对象</param>
            <returns>配置XDocument</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigHelper.ReadConfigFromFile``1(System.String)">
            <summary>
            从文件读取配置
            </summary>
            <typeparam name="T">配置对象类型</typeparam>
            <param name="configFilePath">配置文件路径</param>
            <returns>配置对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigHelper.ReadConfigFromFile(System.String,System.Object)">
            <summary>
            从文件读取配置到指定的配置对象
            </summary>
            <param name="configFilePath">配置文件路径</param>
            <param name="config">指定的配置对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigHelper.ReadConfigFromXml``1(System.String)">
            <summary>
            从xml配置中读取配置
            </summary>
            <typeparam name="T">配置对象类型</typeparam>
            <param name="xmlStr">xml字符串</param>
            <returns>配置对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigHelper.ReadConfigFromXml(System.String,System.Object)">
            <summary>
            从xml配置中读取配置到指定的配置对象中
            </summary>
            <param name="xmlStr">xml字符串</param>
            <param name="config">指定的配置对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigHelper.ReadConfigFromXml``1(System.Xml.Linq.XDocument)">
            <summary>
            从XDocument配置中读取配置
            </summary>
            <typeparam name="T">配置对象类型</typeparam>
            <param name="xdoc">XDocument配置</param>
            <returns>配置对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Config.ConfigHelper.ReadConfigFromXml(System.Xml.Linq.XDocument,System.Object)">
            <summary>
            从xml配置中读取配置到指定的配置对象中
            </summary>
            <param name="xdoc">xml配置</param>
            <param name="config">指定的配置对象</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.DefaultExtendDescription">
            <summary>
            默认扩展描述类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.DefaultExtendDescription.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.DefaultExtendDescription.#ctor(System.Func{System.Object,UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroup,System.String},System.Func{System.Object,UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroup,System.String})">
            <summary>
            构造函数
            </summary>
            <param name="getNameFunc">获取名称回调(第一个参数为值,第二个为值描述组,第三个为返回值)</param>
            <param name="getDescriptionFunc">获取描述回调(第一个参数为值,第二个为值描述组,第三个为返回值)</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.DefaultExtendDescription.PrimitiveGetName(System.Object,UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroup)">
            <summary>
            获取扩展值对应的名称
            </summary>
            <param name="value">值</param>
            <param name="group">描述组</param>
            <returns>值对应的名称</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.DefaultExtendDescription.PrimitiveGetDescription(System.Object,UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroup)">
            <summary>
            获取扩展值对应的描述
            </summary>
            <param name="value">值</param>
            <param name="group">描述组</param>
            <returns>值对应的描述</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.IExtendDescription">
            <summary>
            扩展描述接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.IExtendDescription.GetName(System.Object,UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroup)">
            <summary>
            获取扩展值对应的名称
            </summary>
            <param name="value">值</param>
            <param name="group">描述组</param>
            <returns>值对应的名称</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.IExtendDescription.GetDescription(System.Object,UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroup)">
            <summary>
            获取扩展值对应的描述
            </summary>
            <param name="value">值</param>
            <param name="group">描述组</param>
            <returns>值对应的描述</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ExtendDescriptionAbs">
            <summary>
            扩展描述基类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ExtendDescriptionAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ExtendDescriptionAbs.GetName(System.Object,UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroup)">
            <summary>
            获取扩展值对应的名称
            </summary>
            <param name="value">值</param>
            <param name="group">描述组</param>
            <returns>值对应的名称</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ExtendDescriptionAbs.PrimitiveGetName(System.Object,UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroup)">
            <summary>
            获取扩展值对应的名称
            </summary>
            <param name="value">值</param>
            <param name="group">描述组</param>
            <returns>值对应的名称</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ExtendDescriptionAbs.GetDescription(System.Object,UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroup)">
            <summary>
            获取扩展值对应的描述
            </summary>
            <param name="value">值</param>
            <param name="group">描述组</param>
            <returns>值对应的描述</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ExtendDescriptionAbs.PrimitiveGetDescription(System.Object,UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroup)">
            <summary>
            获取扩展值对应的描述
            </summary>
            <param name="value">值</param>
            <param name="group">描述组</param>
            <returns>值对应的描述</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroup">
            <summary>
            值描述组
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroup.GroupDescriptionAttribute">
            <summary>
            获取组描述特性
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroup.#ctor(UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroupAttribute)">
            <summary>
            构造函数
            </summary>
            <param name="groupDescriptionAttribute">组描述特性</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroupAttribute">
            <summary>
            值描述组特性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroupAttribute.Extend">
            <summary>
            扩展描述类类型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroupAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroupAttribute.#ctor(System.String,System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="extendDescriptionType">扩展描述类类型,该类型需要实现IExtendDescription接口</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroupAttribute.#ctor(System.String,System.String,System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="description">描述</param>
            <param name="extendDescriptionType">扩展描述类类型,该类型需要实现IExtendDescription接口</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager">
            <summary>
            值描述管理类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.Registe``1">
            <summary>
            注册常量或枚举值描述
            </summary>
            <typeparam name="T">目标类型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.Registe(System.Object,UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionGroup)">
            <summary>
            注册描述组
            </summary>
            <param name="groupId">组标识</param>
            <param name="group">值描述组</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.GetValueDescriptionGroup``1">
            <summary>
            根据类型获取值描述组
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <returns>值名称映射字典集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.GetValueDescriptionGroupById(System.Object)">
            <summary>
            根据组标识获取值描述组
            </summary>
            <param name="groupId">组标识</param>
            <returns>值名称映射字典集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.Remove``1">
            <summary>
            根据类型移除值描述组,并返回移除的组,不为null则移除成功
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <returns>移除的值名称映射集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.RemoveById(System.Object)">
            <summary>
            根据组标识移除值描述组,并返回移除的组,不为null则移除成功
            </summary>
            <param name="groupId">组标识</param>
            <returns>移除的值名称映射集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.Clear">
            <summary>
            清空值描述组
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.Clear``1">
            <summary>
            清空指定类型值描述组
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.Clear(System.Object)">
            <summary>
            清空指定组标识值描述组
            </summary>
            <param name="groupId">组标识</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.GetNameByValue``1(System.Object)">
            <summary>
            根据值获取值名称
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="value">值</param>
            <returns>值描述</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.GetNameByValue(System.Object,System.Object)">
            <summary>
            根据组标识和值获取值名称
            </summary>
            <param name="groupId">组标识</param>
            <param name="value">值</param>
            <returns>值描述</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.GetDescriptionByValue``1(System.Object)">
            <summary>
            根据值获取值描述
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="value">值</param>
            <returns>值描述</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.GetDescriptionByValue(System.Object,System.Object)">
            <summary>
            根据组标识和值获取值描述
            </summary>
            <param name="groupId">组标识</param>
            <param name="value">值</param>
            <returns>值描述</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.GerValueByName``1(System.String)">
            <summary>
            根据名称获取值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="name">名称</param>
            <returns>值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.GerValueByName(System.Object,System.String)">
            <summary>
            根据名称获取值
            </summary>
            <param name="groupId">组标识</param>
            <param name="name">名称</param>
            <returns>值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.GetValues``1">
            <summary>
            获取指定类型值数组
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <returns>类型所有定义常量值数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.GetValues(System.Object)">
            <summary>
            获取指定类型值数组
            </summary>
            <param name="groupId">组标识</param>
            <returns>类型所有定义常量值数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.GetNames``1">
            <summary>
            获取指定类型名称数组
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <returns>类型所有定义常量值数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConstantValueDescription.ValueDescriptionManager.GetNames(System.Object)">
            <summary>
            获取指定类型名称数组
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <returns>类型所有定义常量值数组</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedArguments">
            <summary>
            提供有关已从缓存中移除的缓存项的信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedArguments.Key">
            <summary>
            获取已从缓存中移除的缓存项的Key
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedArguments.CacheItem">
            <summary>
            获取已从缓存中移除的缓存项的实例
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedArguments.RemovedReason">
            <summary>
            获取一个值，该值指示移除某个缓存项的原因
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedArguments.Source">
            <summary>
            获取对源 System.Runtime.Caching.ObjectCache 实例的引用，该实例最初包含已移除的缓存项
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedArguments.#ctor(UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache,UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedReason,UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem)">
            <summary>
            初始化 System.Runtime.Caching.CacheEntryRemovedArguments 类的新实例
            </summary>
            <param name="source">已从中移除 cacheItem 的 System.Runtime.Caching.ObjectCache 实例</param>
            <param name="reason">用于指示移除 cacheItem 的原因的枚举值之一</param>
            <param name="cacheItem">已移除的缓存项的实例</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedReason">
            <summary>
            指定已移除或将要移除某个缓存项的原因
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedReason.Removed">
            <summary>
            通过使用Remove或Set方法移除了某个缓存项
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedReason.Expired">
            <summary>
            某个缓存项由于已过期而被移除。过期可基于绝对过期时间或可调过期时间
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedReason.Replace">
            <summary>
            某个缓存项由于被新项替换而被移除。
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem">
            <summary>
            张位存实体
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem.#ctor(System.Object,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="key">CacheItem 项的唯一标识符</param>
            <param name="value">CacheItem 项的数据</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem.Key">
            <summary>
            获取CacheItem 实例的唯一标识符
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem.Value">
            <summary>
            获取或设置 System.Runtime.Caching.CacheItem 实例的数据
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem.AbsoluteExpiration">
            <summary>
            绝对过期时间，为null则条件无效
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem.SlidingExpiration">
            <summary>
            滑动过期时间，为null条件无效
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem.CustomerExpiration">
            <summary>
            提供用来自定义缓存过期，为null条件无效
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem.RemovedCallback">
            <summary>
            缓存移除回调，为null条件无效
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem.InnerRemovedCallback">
            <summary>
            指示移除回调通知是否是ObjectCache内赋值的
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem.LastGetTime">
            <summary>
            上次Get时间
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem.AddTime">
            <summary>
            缓存项添加时间
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem.Expiration">
            <summary>
            获取当前缓存项是否过期
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem.CallRemovedCallback(UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache,UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedReason)">
            <summary>
            触发缓存项移除回调
            </summary>
            <param name="objectCache"></param>
            <param name="cacheEntryRemovedReason"></param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedCallback">
            <summary>
            缓存项移除回调委托
            </summary>
            <param name="arguments">回调参数</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheKeyExistException">
            <summary>
            缓存key已存在异常
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheKeyExistException.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheKeyExistException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheKeyNullException">
            <summary>
            缓存key已存在异常
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheKeyNullException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheAddException">
            <summary>
            缓存添加失败异常
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.CacheAddException.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx">
            <summary>
            内存缓存类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx.Get(System.Object)">
            <summary>
            获取数据
            </summary>
            <param name="key">key</param>
            <returns>缓存项,获取成功返回缓存项,值过期或key不存在返回null</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx.Exist(System.Object)">
            <summary>
            是否存在key值的数据[存在返回true;不存在返回false]
            </summary>
            <param name="key">key</param>
            <returns>存在返回true;不存在返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx.Remove(System.Object)">
            <summary>
            移除一个缓存项
            </summary>
            <param name="key">key</param>
            <returns>移除的缓存项</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx.Add(System.Object,System.Object)">
            <summary>
            存储数据
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx.Add(System.Object,System.Object,System.Int32,UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedCallback)">
            <summary>
            存储数据
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
            <param name="expirationMilliseconds">缓存项有效时间,单位/毫秒</param>
            <param name="removedCallback">移除回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx.Add(System.Object,System.Object,System.TimeSpan,UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedCallback)">
            <summary>
            添加缓存项
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
            <param name="slidingExpiration">缓存项滑动有效时间</param>
            <param name="removedCallback">移除回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx.Add(System.Object,System.Object,System.Func{UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem,System.Boolean},UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedCallback)">
            <summary>
            添加缓存项
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
            <param name="customerExpiration">缓存项自定义过期验证回调</param>
            <param name="removedCallback">移除回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx.Add(UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem)">
            <summary>
            添加缓存项
            </summary>
            <param name="cacheItem">缓存项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx.Set(System.Object,System.Object)">
            <summary>
            存储数据
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx.Set(System.Object,System.Object,System.Int32,UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedCallback)">
            <summary>
            存储数据
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
            <param name="expirationMilliseconds">缓存项有效时间,单位/毫秒</param>
            <param name="removedCallback">移除回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx.Set(System.Object,System.Object,System.TimeSpan,UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedCallback)">
            <summary>
            存储数据
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
            <param name="slidingExpiration">缓存项滑动有效时间</param>
            <param name="removedCallback">移除回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx.Set(System.Object,System.Object,System.Func{UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem,System.Boolean},UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedCallback)">
            <summary>
            设置缓存项
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
            <param name="customerExpiration">缓存项自定义过期验证回调</param>
            <param name="removedCallback">移除回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx.Set(UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem)">
            <summary>
            设置缓存项
            </summary>
            <param name="cacheItem">缓存项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.MemoryCacheEx.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache">
            <summary>
            原始缓存类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache._cacheDic">
            <summary>
            缓存项存放字典[key:key;value:缓存项]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache._checkIntervalMillisecondsTimeout">
            <summary>
            过期检查间隔
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache._expirationChaeckThread">
            <summary>
            缓存项过期检查线程
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache._disposed">
            <summary>
            Disposable标识[true:已释放;false:未释放]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="checkIntervalMillisecondsTimeout">过期检查间隔,单位:毫秒,默认值为100毫秒</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.StartExpirationChaeckThread">
            <summary>
            启动缓存过期检查线程
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.StopExpirationChaeckThread">
            <summary>
            如果缓存项数为0,则停止缓存过期检查线程
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.ExpirationRemove(System.Object)">
            <summary>
            返回移除结果[true:移除成功]
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Get(System.Object)">
            <summary>
            获取数据
            </summary>
            <param name="key">key</param>
            <returns>缓存项,获取成功返回缓存项,值过期或key不存在返回null</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Exist(System.Object)">
            <summary>
            是否存在key值的数据[存在返回true;不存在返回false]
            </summary>
            <param name="key">key</param>
            <returns>存在返回true;不存在返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Remove(System.Object)">
            <summary>
            移除一个缓存项
            </summary>
            <param name="key">key</param>
            <returns>被移除的缓存项</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Add(System.Object,System.Object)">
            <summary>
            添加缓存项
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Add(System.Object,System.Object,System.Int32,UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedCallback)">
            <summary>
            添加缓存项
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
            <param name="expirationMilliseconds">缓存项绝对有效时间,单位/毫秒</param>
            <param name="removedCallback">移除回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Add(System.Object,System.Object,System.TimeSpan,UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedCallback)">
            <summary>
            添加缓存项
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
            <param name="slidingExpiration">缓存项滑动有效时间</param>
            <param name="removedCallback">移除回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Add(System.Object,System.Object,System.Func{UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem,System.Boolean},UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedCallback)">
            <summary>
            添加缓存项
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
            <param name="customerExpiration">缓存项自定义过期验证回调</param>
            <param name="removedCallback">移除回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Add(UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem)">
            <summary>
            添加缓存项
            </summary>
            <param name="cacheItem">缓存项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Set(System.Object,System.Object)">
            <summary>
            存储数据
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Set(System.Object,System.Object,System.Int32,UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedCallback)">
            <summary>
            设置缓存项
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
            <param name="expirationMilliseconds">缓存项有效时间,单位/毫秒</param>
            <param name="removedCallback">移除回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Set(System.Object,System.Object,System.TimeSpan,UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedCallback)">
            <summary>
            设置缓存项
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
            <param name="slidingExpiration">缓存项滑动有效时间</param>
            <param name="removedCallback">移除回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Set(System.Object,System.Object,System.Func{UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem,System.Boolean},UtilZ.Dotnet.Ex.Base.MemoryCache.CacheEntryRemovedCallback)">
            <summary>
            设置缓存项
            </summary>
            <param name="key">key</param>
            <param name="value">缓存项</param>
            <param name="customerExpiration">缓存项自定义过期验证回调</param>
            <param name="removedCallback">移除回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Set(UtilZ.Dotnet.Ex.Base.MemoryCache.CacheItem)">
            <summary>
            设置缓存项
            </summary>
            <param name="cacheItem">缓存项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.MemoryCache.ObjectCache.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.DateTimeFormatProvider">
            <summary>
            日期时间显示格式化器
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.DateTimeFormatProvider._instance">
            <summary>
            日期转换器实例
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.DateTimeFormatProvider.Instance">
            <summary>
            获取日期转换器实例
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DateTimeFormatProvider.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DateTimeFormatProvider.GetFormat(System.Type)">
            <summary>
            获取格式类型
            </summary>
            <param name="formatType"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DateTimeFormatProvider.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            格式转换
            </summary>
            <param name="format">转换格式字符串</param>
            <param name="arg">要转换的参数</param>
            <param name="formatProvider">转换器</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.NotifyPropertyChangedAbs">
            <summary>
            模型基类
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.Ex.Base.NotifyPropertyChangedAbs.PropertyChanged">
            <summary>
            PropertyChanged
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.NotifyPropertyChangedAbs.OnRaisePropertyChanged(System.String)">
            <summary>
            触发属性值改变事件
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.NotifyPropertyChangedAbs.OnRaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            触发属性值改变事件
            </summary>
            <param name="e">改变属性信息</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.NotifyPropertyChangedAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.BasePropertyValueVerifyModel">
            <summary>
            属性验证模型基类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BasePropertyValueVerifyModel.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.Ex.Base.BasePropertyValueVerifyModel.PropertyValueVerifyResultNotify">
            <summary>
            属性值有效性验证结果通知事件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.BasePropertyValueVerifyModel.OnRaisePropertyValueVerifyResultNotify(System.Boolean,System.String)">
            <summary>
            调用属性设置值有效性验证结果通知事件
            </summary>
            <param name="isValid">最新值的有效性[true:有效,false:无效]</param>
            <param name="errorMesage">当最新值无效时的错误提示消息</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ClrSystemType">
            <summary>
            CLR系统类型类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.BoolType">
            <summary>
            bool类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.ByteType">
            <summary>
            byte类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.CharType">
            <summary>
            char类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.DateTimeType">
            <summary>
            DateTime类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.DecimalType">
            <summary>
            decimal类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.DoubleType">
            <summary>
            double类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.Int16Type">
            <summary>
            Int16类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.Int32Type">
            <summary>
            Int32类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.Int64Type">
            <summary>
            Int64类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.SbyteType">
            <summary>
            sbyte类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.FloatType">
            <summary>
            float类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.StringType">
            <summary>
            string类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.UInt16Type">
            <summary>
            UInt16类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.UInt32Type">
            <summary>
            UInt32类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.UInt64Type">
            <summary>
            UInt64类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.ObjectType">
            <summary>
            Object类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.TimeSpanType">
            <summary>
            TimeSpan类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.DateTimeOffsetType">
            <summary>
            DateTimeOffset类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.GuidType">
            <summary>
            Guid类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ClrSystemType.BytesType">
            <summary>
            byte[]类型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ClrSystemType.GetSystemTypeBriefName(System.Type)">
            <summary>
            获取系统类型缩写名称
            </summary>
            <param name="type">类型</param>
            <returns>系统类型缩写名称</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ClrSystemType.IsIntegerType(System.Type)">
            <summary>
            判断目标类型是否是整形[包括int,uint等]
            </summary>
            <param name="targetValueType">目标类型</param>
            <returns>true:是;false:否</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ClrSystemType.IsUIntegerType(System.Type)">
            <summary>
            判断目标类型是否是无符号整形[包括int,uint等]
            </summary>
            <param name="targetValueType">目标类型</param>
            <returns>true:是;false:否</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ClrSystemType.IsHIntegerType(System.Type)">
            <summary>
            判断目标类型是否是有符号整形[包括int,uint等]
            </summary>
            <param name="targetValueType">目标类型</param>
            <returns>true:是;false:否</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ClrSystemType.IsFloatType(System.Type)">
            <summary>
            判断目标类型是否是浮点形[包括int,uint等;true:是;false:否]
            </summary>
            <param name="targetValueType">目标类型</param>
            <returns>true:是;false:否</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ClrSystemType.IsSystemNumberType(System.Type)">
            <summary>
            判断目标类型是否是系统数值类型[true:是;false:否]
            </summary>
            <param name="targetValueType">目标类型</param>
            <returns>true:是;false:否</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.DropdownBindingItem">
            <summary>
            UI显示基类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.DropdownBindingItem.DisplayName">
            <summary>
            获取或设置显示名称
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.DropdownBindingItem.Description">
            <summary>
            获取或设置描述
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.DropdownBindingItem.Value">
            <summary>
            获取或设置值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.DropdownBindingItem.Tag">
            <summary>
            数据标识
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DropdownBindingItem.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DropdownBindingItem.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="value">值</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DropdownBindingItem.#ctor(System.String,System.Object,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="value">值</param>
            <param name="description">项描述</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DropdownBindingItem.#ctor(System.String,System.Object,System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="value">值</param>
            <param name="description">项描述</param>
            <param name="tag">数据标识</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DropdownBindingItem.ToString">
            <summary>
            重写ToString
            </summary>
            <returns>下拉框显示文本</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DropdownBindingItem.GenericToDropdownBindingItems``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            转换泛型集合为DropdownBindingItem列表
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="srcItems">原始泛型集合</param>
            <param name="displayMember">显示的成员,属性名或字段名,当为null时调用成员的ToString方法的值作为显示值[默认值为null]</param>
            <returns>DropdownBindingItem列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DropdownBindingItem.GenericToDropdownBindingItems``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            转换泛型集合为DropdownBindingItem列表
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="srcItems">原始泛型集合</param>
            <param name="displayFun">显示转换委托</param>
            <returns>DropdownBindingItem列表</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.IPropertyValueVerify">
            <summary>
            属性值验证接口
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.Ex.Base.IPropertyValueVerify.PropertyValueVerifyResultNotify">
            <summary>
            属性值有效性验证结果通知事件
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.PropertyChangedExEventArgs">
            <summary>
            属性改变事件扩展参数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.PropertyChangedExEventArgs.OldValue">
            <summary>
            旧值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.PropertyChangedExEventArgs.NewValue">
            <summary>
            新值
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PropertyChangedExEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="propertyName">属性名</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.PropertyValueVerifyArgs">
            <summary>
            属性值验证结果通知事件参数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PropertyValueVerifyArgs.#ctor(System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="isValid">最新值的有效性[true:有效,false:无效]</param>
            <param name="errorMesage">当最新值无效时的错误提示消息</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.PropertyValueVerifyArgs.IsValid">
            <summary>
            获取最新值的有效性[true:有效,false:无效]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.PropertyValueVerifyArgs.ErrorMesage">
            <summary>
            获取当最新值无效时的错误提示消息
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.RegexConstant">
            <summary>
            正则表达式常量定义
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.RegexConstant.IPV4Reg">
            <summary>
            IPV4正则表达式
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.RegexConstant.Port">
            <summary>
            端口号正则表达式
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.RegexConstant.FtpUrl">
            <summary>
            FtpUrl正则表达式,可通过组取得IP,端口,以及之后的相对目录[ip,port,dir]
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.TEventArgs`1">
            <summary>
            泛型事件参数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TEventArgs`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="args">参数</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.TEventArgs`1.Args">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.TKeyTValue`2">
            <summary>
            泛型键值类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TKeyTValue`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.TKeyTValue`2.#ctor(`0,`1)">
            <summary>
            构造函数
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.TKeyTValue`2.Key">
            <summary>
            获取或设置键
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.TKeyTValue`2.Value">
            <summary>
            获取或设置值
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.UtilConstant">
            <summary>
            通用常量定义类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.UtilConstant.DateTimeFormat">
            <summary>
            日期格式字符串
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.AlarmClock">
            <summary>
            闹钟
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.AlarmClock.AlarmTime">
            <summary>
            闹钟响铃时刻
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.AlarmClock.AlarmTime.Time">
            <summary>
            获取或设置时刻
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AlarmClock.#ctor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AlarmClock.#ctor(System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            有参构造函数
            </summary>
            <param name="times">响铃的时刻集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AlarmClock.#ctor(System.Collections.Generic.IEnumerable{System.TimeSpan},System.Int32)">
            <summary>
            有参构造函数
            </summary>
            <param name="times">响铃的时刻集合</param>
            <param name="excutCount">执行次数</param>
        </member>
        <member name="E:UtilZ.Dotnet.Ex.Base.AlarmClock.Ring">
            <summary>
            响铃时执行的Action操作
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AlarmClock.OnRing(System.TimeSpan)">
            <summary>
            当响铃时调用
            </summary>
            <param name="ts">响铃的时刻</param>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AlarmClock._sdTimes">
            <summary>
            时间点集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.AlarmClock.Times">
            <summary>
            获取或设置定时的时间字符串,不带日期的,格式:12:12:12
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AlarmClock.AddTime(System.TimeSpan)">
            <summary>
            添加一个时间点
            </summary>
            <param name="ts">时间点</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AlarmClock.AddTime(System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            添加多个时间点
            </summary>
            <param name="tss">时刻点集合</param>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AlarmClock._count">
            <summary>
            执行的次数,-1为无限次
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.AlarmClock.Count">
            <summary>
            获取或设置执行的次数,-1为无限次
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AlarmClock._timingThread">
            <summary>
            闹钟执行线程
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AlarmClock.CreateAlarmLoopLinked">
            <summary>
            创建时刻点环形链表
            </summary>
            <returns>时刻点环形链表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AlarmClock.TimingThreadMethod(UtilZ.Dotnet.Ex.Base.ThreadExPara)">
            <summary>
            定时操作
            </summary>
            <param name="para">线程参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AlarmClock.CaculateWaitTime(System.TimeSpan)">
            <summary>
            计算到下次响铃的等待时间
            </summary>
            <param name="tsc">下一个要响铃的时刻</param>
            <returns>到下次响铃的等待时间</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AlarmClock.Start">
            <summary>
            启动闹钟
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AlarmClock.Stop">
            <summary>
            停止闹钟
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AlarmClock.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AlarmClock.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDispose">是否释放标识</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.RingArgs">
            <summary>
            响铃事件参数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.RingArgs.Time">
            <summary>
            响铃时的时刻
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Array64`1">
            <summary>
            长度为Int64的数组类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Array64`1.DefaultColSize">
            <summary>
            默认数据页列大小500MB
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Array64`1.DefaultRowSize">
            <summary>
            默认数据页行数小500MB
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Array64`1._pageSize">
            <summary>
            存储页大小
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Array64`1._colSize">
            <summary>
            存储页中的列大小
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Array64`1._rowSize">
            <summary>
            存储页中的行大小
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Array64`1._length">
            <summary>
            数组长度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.Array64`1.Length">
            <summary>
            获取数组长度
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Array64`1._pages">
            <summary>
            页集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.Array64`1.Item(System.Int64)">
            <summary>
            获取或设置指定索引处的值
            </summary>
            <param name="index">索引</param>
            <returns>指定索引处的值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Array64`1.GetPageByPosition(System.Int64)">
            <summary>
            获取指定位置索引所在存储页对象
            </summary>
            <param name="position">目标位置索引</param>
            <returns>指定位置索引所在存储页对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Array64`1.#ctor(System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="length">数组长度</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Array64`1.#ctor(System.Int64,System.Int32,System.Int32)">
            <summary>
            构造函数(根据需要指定存储页相关信息可提升性能)
            </summary>
            <param name="length">数组长度</param>
            <param name="colSize">存储页中的列大小</param>
            <param name="rowSize">存储页中的行大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Array64`1.#ctor(UtilZ.Dotnet.Ex.Base.Array64{`0})">
            <summary>
            构造函数
            </summary>
            <param name="array">Array64</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Array64`1.Set(System.Int64,`0[],System.Int32,System.Int32)">
            <summary>
            设置数组对象数据,返回实际设置数据长度
            </summary>
            <param name="offset">当前数组对象中偏移量</param>
            <param name="buffer">要设置的源数据数组</param>
            <param name="bufferOffset">源数据数组中中的偏移量</param>
            <param name="length">源数据数组中要写入的数据长度,如果超出当前数组范围,则以当前数组实际长度为准</param>
            <returns>实际设置数据长度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Array64`1.Get(System.Int64,System.Int32)">
            <summary>
            从指定偏移位置获取指定长度的数组,如果从偏移位置起目标长度超出数组范围,则以实际数组长度为准
            </summary>
            <param name="offset">当前对象中数据数据偏移量</param>
            <param name="length">要获取的数据长度</param>
            <returns>获取到的数据数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Array64`1.ToArray">
            <summary>
            创建一个数组
            </summary>
            <returns>新数组</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Array64Page`1">
            <summary>
            数据页
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Array64Page`1._begin">
            <summary>
            当前页存储数据起始位置
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Array64Page`1._end">
            <summary>
            当前页存储数据结束位置
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Array64Page`1._colSize">
            <summary>
            数据页列大小
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Array64Page`1._rowSize">
            <summary>
            数据页行大小
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.Array64Page`1._data">
            <summary>
            数据二维数据
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.Array64Page`1.Item(System.Int64)">
            <summary>
            获取或设置指定索引处的值
            </summary>
            <param name="index">索引</param>
            <returns>指定索引处的值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Array64Page`1.#ctor(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="begin">当前页存储数据起始位置</param>
            <param name="end">当前页存储数据结束位置</param>
            <param name="colSize">数据页列大小</param>
            <param name="rowSize">数据页行大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Array64Page`1.#ctor(UtilZ.Dotnet.Ex.Base.Array64Page{`0})">
            <summary>
            构造函数
            </summary>
            <param name="page">Array64Page</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Array64Page`1.Get(`0[],System.Int32,System.Int64,System.Int32)">
            <summary>
            从指定偏移位置获取指定长度的数组,如果从偏移位置起目标长度超出数组范围,则以实际数组长度为准
            </summary>
            <param name="destBuffer">目标数组对象</param>
            <param name="destOffset">目标数组对象中数据写入偏移量</param>
            <param name="beginIndex">当前数据页中起始位置索引</param>
            <param name="length">要写的数据长度</param>
            <returns>实际写入数据长度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Array64Page`1.Set(`0[],System.Int32,System.Int64,System.Int64)">
            <summary>
            设置数组对象数据,返回实际设置数据长度
            </summary>
            <param name="buffer">要设置的源数据数组</param>
            <param name="offset">源数据数组中中的偏移量</param>
            <param name="beginIndex">当前数组对象中的起始位置索引</param>
            <param name="length">源数据数组中要写入的数据长度,如果超出当前数组范围,则以当前数组实际长度为准</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Array64Page`1.ToPage">
            <summary>
            创建一个数组页
            </summary>
            <returns>新数据组页</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2">
            <summary>
            异步队列
            </summary>
            <typeparam name="T">输入数据类型</typeparam>
            <typeparam name="TResult">处理后输出数据类型</typeparam>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2._thread">
            <summary>
            异步队列线程
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2._threadMonitor">
            <summary>
            线程操作监视锁
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2._parallelLoopStates">
            <summary>
            当前并行运行对象停止状态通知
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2._isDisposed">
            <summary>
            对象是否已释放[true:已释放;false:未释放]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2._cts">
            <summary>
            线程取消通知对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2._blockingCollection">
            <summary>
            BlockingCollection
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2._autoResetEvent">
            <summary>
            入队列线程消息通知
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2._emptyQueueWaitTimeout">
            <summary>
            空队列等待超时时间
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2._stopAutoResetEvent">
            <summary>
            停止线程消息通知
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2._status">
            <summary>
            队列线程状态[true:线程正在运行;false:线程未运行]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.Status">
            <summary>
            获取队列线程状态[true:线程正在运行;false:线程未运行]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.Capity">
            <summary>
            获取队列容量[如果设置的容量小于当前已有队列长度,则丢弃掉队列头的项.直到队列长度与目标容量一致]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2._maxThreadCount">
            <summary>
            并行处理最大线程数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2._millisecondsTimeout">
            <summary>
            当队列中的项数少于批量处理最大项数时的等待时间,单位毫秒
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.ProcessAction">
            <summary>
            数据处理委托
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.ProcessResultAction">
            <summary>
            处理结果输出委托
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.#ctor(System.Func{`0,System.Threading.CancellationToken,`1},System.Action{System.Collections.Generic.List{`1}},System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="processAction">数据处理委托</param>
            <param name="processResultAction">处理结果输出委托</param>
            <param name="maxThreadCount">并行处理最大线程数,建议值Environment.ProcessorCount,线程运行时并不会一直占用CPU时间片</param>
            <param name="millisecondsTimeout">当队列中的项数少于批量处理最大项数时的等待时间,-1表示无限制等待,单位毫秒</param>
            <param name="isAutoStart">是否自动启动线程</param>
            <param name="capcity">队列容量</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.Start(System.Threading.ApartmentState)">
            <summary>
            启动子类无参数工作线程
            </summary>
            <param name="apartmentState">指定的单元状态 System.Threading.Thread</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.Stop(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            停止工作线程
            </summary>       
            <param name="isAbort">是否立即终止处理方法[true:立即终止;false:等待方法执行完成;默认false]</param>
            <param name="isSync">是否同步停止[true:同步停止;false:异常停止];注:注意线程死锁,典型场景:刷新UI,在UI上执行同步停止</param>
            <param name="synMillisecondsTimeout">同步超时时间,-1表示无限期等待,单位/毫秒[isSycn为true时有效]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.PrimitiveStop(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            停止工作线程
            </summary>       
            <param name="isAbort">是否立即终止处理方法[true:立即终止;false:等待方法执行完成;默认false]</param>
            <param name="isSync">是否同步停止[true:同步停止;false:异常停止];注:注意线程死锁,典型场景:刷新UI,在UI上执行同步停止</param>
            <param name="synMillisecondsTimeout">同步超时时间,-1表示无限期等待,单位/毫秒[isSycn为true时有效]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.RunThreadQueueProcessMethod">
            <summary>
            线程队列处理方法
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.Enqueue(`0,System.Int32,System.Collections.Generic.List{`0})">
            <summary>
            将对象添加到队列的结尾处[如果在指定的时间内可以将 item 添加到集合中，则为 true；否则为 false]
            </summary>
            <param name="item">待添加的对象</param>
            <param name="millisecondsTimeout">等待的毫秒数，或为 System.Threading.Timeout.Infinite (-1)，表示无限期等待</param>
            <param name="overflowItems">当队列超出策略为Dequeue时,先进入队列中移除项输出集合,如果为null则不输出</param>
            <returns>如果在指定的时间内可以将 item 添加到集合中，则为 true；否则为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.Remove(System.Int32)">
            <summary>
            移除位于开始处的指定个数对象
            </summary>
            <param name="count">要移除的项数</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.Count">
            <summary>
            获取队列中包含的元素数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.ToArray">
            <summary>
            将队列中存储的元素复制到新数组中
            </summary>
            <returns>新数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.CopyTo(`0[],System.Int32)">
            <summary>
            从指定数组索引开始将 System.Collections.Concurrent.ConcurrentQueue`1 元素复制到现有一维 System.Array中
            异常:
            T:System.ArgumentNullException:array 为 null 引用（在 Visual Basic 中为 Nothing）。
            T:System.ArgumentOutOfRangeException:index 小于零。
            T:System.ArgumentException:index 等于或大于该长度的 array -源中的元素数目 System.Collections.Concurrent.ConcurrentQueue`1大于从的可用空间 index 目标从头到尾 array。
            </summary>
            <param name="array">一维 System.Array，用作从 System.Collections.Concurrent.ConcurrentQueue`1 所复制的元素的目标数组。System.Array 必须具有从零开始的索引。</param>
            <param name="index">array 中从零开始的索引，从此处开始复制</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.Clear">
            <summary>
            清空队列,必须在停止时执行,否则后果未知
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynParallelQueue`2.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDispose">是否释放标识</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1">
            <summary>
            异步优先级队列
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1._autoResetEvent">
            <summary>
            线程等待通知对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1._priorityQueue">
            <summary>
            优先级队列
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.DataProcessAction">
            <summary>
            数据处理委托
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.OnRaiseDataProcess(`0)">
            <summary>
            数据处理
            </summary>
            <param name="item">待处理数据项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.ExcuteThreadMethod(UtilZ.Dotnet.Ex.Base.ThreadExPara)">
            <summary>
            重写执行线程方法
            </summary>
            <param name="para">线程参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.Start">
            <summary>
            启动输出
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.Stop">
            <summary>
            停止输出
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.Enqueue(`0,System.Int32)">
            <summary>
            将对象添加到结尾处
            </summary>
            <param name="item">对象</param>
            <param name="priorityLevel">优先级,值越小优先级越高,越大越低</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.RemoveRange(System.Int64)">
            <summary>
            移除队列中的前N项
            </summary>
            <param name="count">项数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.RemoveRange(System.Int32,System.Int64)">
            <summary>
            移除队列中的前N项
            </summary>
            <param name="priorityLevel">优先级</param>
            <param name="count">项数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.Clear">
            <summary>
            清空全部队列
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.Clear(System.Int32)">
            <summary>
            清空指定优先级的队列
            </summary>
            <param name="priorityLevel">优先级</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.Count">
            <summary>
            队列项数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.GetCountByPriority(System.Int32)">
            <summary>
            获取队列中指定优先级的元素数
            </summary>
            <param name="priorityLevel">优先级</param>
            <returns>元素数</returns>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.PriorityCount">
            <summary>
            获取当前存储的优先级类型数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDispose">是否释放标识</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.GetEnumerator">
            <summary>
            返回循环的遍历枚举
            </summary>
            <returns>循环的遍历枚举</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueueThread`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回循环的遍历枚举
            </summary>
            <returns>循环的遍历枚举</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.AsynQueue`1">
            <summary>
            异步队列
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1._thread">
            <summary>
            异步队列线程
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1._threadMonitor">
            <summary>
            线程操作监视锁
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1._cts">
            <summary>
            线程取消通知对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1._isBackground">
            <summary>
            是否是后台线程[true:后台线程，false:前台线程]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1._queue">
            <summary>
            Queue
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1._emptyQueueWaitEventHandle">
            <summary>
            空队列等待线程消息通知
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1._emptyQueueWaitTimeout">
            <summary>
            空队列等待超时时间
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1._stopAutoResetEvent">
            <summary>
            停止线程消息通知
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1._isDisposed">
            <summary>
            对象是否已释放[true:已释放;false:未释放]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1._threadName">
            <summary>
            异步队列线程名称
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.AsynQueue`1.ThreadName">
            <summary>
            异步队列线程名称
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1._status">
            <summary>
            队列线程状态[true:线程正在运行;false:线程未运行]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.AsynQueue`1.Status">
            <summary>
            获取队列线程状态[true:线程正在运行;false:线程未运行]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.AsynQueue`1.Capity">
            <summary>
            获取队列容量[如果设置的容量小于当前已有队列长度,则丢弃掉队列头的项.直到队列长度与目标容量一致]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1._isDequeueMuiltItem">
            <summary>
            是否每次抛出多项
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1._batchCount">
            <summary>
            批量处理最大项数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1._millisecondsTimeout">
            <summary>
            当队列中的项数少于批量处理最大项数时的等待时间,单位毫秒
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1.ProcessAction">
            <summary>
            数据处理委托
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.OnRaiseProcess(`0)">
            <summary>
            数据处理
            </summary>
            <param name="item">待处理数据项</param>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1.ProcessAction2">
            <summary>
            数据处理委托
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.OnRaiseProcessAction2(System.Collections.Generic.List{`0})">
            <summary>
            调用数据处理委托
            </summary>
            <param name="items"></param>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.AsynQueue`1.SyncRoot">
            <summary>
            同步操作对象
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.#ctor(System.Boolean,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="isDequeueMuiltItem">是否每次抛出多项</param>
            <param name="threadName">异步队列线程名称</param>
            <param name="isBackground">是否是后台线程[true:后台线程，false:前台线程]</param>
            <param name="isAutoStart">是否自动启动线程</param>
            <param name="capcity">队列容量</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.#ctor(System.Action{`0},System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="processAction">数据处理委托</param>
            <param name="threadName">异步队列线程名称</param>
            <param name="isBackground">是否是后台线程[true:后台线程，false:前台线程]</param>
            <param name="isAutoStart">是否自动启动线程</param>
            <param name="capcity">队列容量</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.#ctor(System.Action{System.Collections.Generic.List{`0}},System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="processAction">数据处理委托</param>
            <param name="batchCount">批量处理最大项数</param>
            <param name="millisecondsTimeout">当队列中的项数少于批量处理最大项数时的等待时间,单位毫秒</param>
            <param name="threadName">异步队列线程名称</param>
            <param name="isBackground">是否是后台线程[true:后台线程，false:前台线程]</param>
            <param name="isAutoStart">是否自动启动线程</param>
            <param name="capcity">队列容量</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.Start(System.Threading.ApartmentState)">
            <summary>
            启动子类无参数工作线程
            </summary>
            <param name="apartmentState">指定的单元状态 System.Threading.Thread</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.Stop(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            停止工作线程
            </summary>       
            <param name="isAbort">是否立即终止处理方法[true:立即终止;false:等待方法执行完成;默认false]</param>
            <param name="isSync">是否同步停止[true:同步停止;false:异常停止];注:注意线程死锁,典型场景:刷新UI,在UI上执行同步停止</param>
            <param name="synMillisecondsTimeout">同步超时时间,-1表示无限期等待,单位/毫秒[isSycn为true时有效]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.PrimitiveStop(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            停止工作线程
            </summary>       
            <param name="isAbort">是否立即终止处理方法[true:立即终止;false:等待方法执行完成;默认false]</param>
            <param name="isSync">是否同步停止[true:同步停止;false:异常停止];注:注意线程死锁,典型场景:刷新UI,在UI上执行同步停止</param>
            <param name="synMillisecondsTimeout">同步超时时间,-1表示无限期等待,单位/毫秒[isSycn为true时有效]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.RunThreadQueueProcessMethod(System.Object)">
            <summary>
            线程队列处理方法
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.RunThreadQueueSingleProcessMethod(System.Threading.CancellationToken)">
            <summary>
            线程队列处理方法
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.RunThreadQueueMuiltProcessMethod(System.Threading.CancellationToken)">
            <summary>
            线程队列处理方法
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.Enqueue(`0)">
            <summary>
            将对象添加到队列的结尾处
            </summary>
            <param name="item">待添加的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.Remove(System.Int32)">
            <summary>
            移除位于开始处的指定个数对象
            </summary>
            <param name="count">要移除的项数</param>
            <returns>移除项集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.Remove(System.Func{`0,System.Boolean})">
            <summary>
            移除满足条件的元素
            </summary>
            <param name="predicate">用于定义要移除的元素应满足的条件</param>
            <returns>移除项集合</returns>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.AsynQueue`1.Count">
            <summary>
            获取队列中包含的元素数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.ToArray">
            <summary>
            将队列中存储的元素复制到新数组中
            </summary>
            <returns>新数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.Clear">
            <summary>
            清空队列,必须在停止时执行,否则后果未知
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.AsynQueue`1.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDispose">是否释放标识</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ByteArray64">
            <summary>
            byte数组64类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ByteArray64._BufferSize">
            <summary>
            每次读10MB数据
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ByteArray64.#ctor(System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="length">数组长度</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ByteArray64.#ctor(System.Int64,System.Int32,System.Int32)">
            <summary>
            构造函数(根据需要指定存储页相关信息可提升性能)
            </summary>
            <param name="length">数组长度</param>
            <param name="colSize">存储页中的列大小</param>
            <param name="rowSize">存储页中的行大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ByteArray64.#ctor(System.IntPtr,System.Int64,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="ptr">数据指针</param>
            <param name="length">数组长度</param>
            <param name="colSize">存储页中的列大小</param>
            <param name="rowSize">存储页中的行大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ByteArray64.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="stream">数据流对象</param>
            <param name="position">数据流中读取数据起始位置</param>
            <param name="length">源数据数组中要写入的数据长度,如果超出当前数组范围,则以当前数组实际长度为准</param>
            <param name="colSize">存储页中的列大小</param>
            <param name="rowSize">存储页中的行大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ByteArray64.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="buffer">数据</param>
            <param name="index">数据起始位置</param>
            <param name="count">数据个数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ByteArray64.Set(System.Int64,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            设置数组对象数据,返回实际设置数据长度
            </summary>
            <param name="offset">当前数组对象中偏移量</param>
            <param name="stream">数据流对象</param>
            <param name="position">数据流中读取数据起始位置</param>
            <param name="length">源数据数组中要写入的数据长度,如果超出当前数组范围,则以当前数组实际长度为准</param>
            <returns>实际设置数据长度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ByteArray64.Set(System.Int64,System.IntPtr,System.Int64,System.Int64)">
            <summary>
            设置数组对象数据,返回实际设置数据长度
            </summary>
            <param name="offset">当前数组对象中偏移量</param>
            <param name="ptr">源数据指针</param>
            <param name="ptrOffset">源源数据指针中的偏移量</param>
            <param name="length">源数据数组中要写入的数据长度,如果超出当前数组范围,则以当前数组实际长度为准</param>
            <returns>实际设置数据长度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ByteArray64.Get(System.Int64,System.Int64,System.IntPtr)">
            <summary>
            从指定偏移位置获取指定长度的数组,如果从偏移位置起目标长度超出数组范围,则以实际数组长度为准
            </summary>
            <param name="offset">当前对象中数据数据偏移量</param>
            <param name="length">要获取的数据长度</param>
            <param name="ptr">存放数据指针</param>
            <returns>获取到的数据长度</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1">
            <summary>
            固定容量集合
            </summary>
            <typeparam name="T">集合项类型</typeparam>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1._queue">
            <summary>
            内容队列
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1._syncRoot">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1._capacity">
            <summary>
            集合容量
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.Capacity">
            <summary>
            获取或设置集合容量
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1._overflowedNotify">
            <summary>
            当队列生产大于消费时,队列超出容量之后会将最先入队列的项溢出通知
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.OnRaiseOverflowedNotify(System.Collections.Generic.List{`0})">
            <summary>
            触发队列溢出通知
            </summary>
            <param name="items">溢出项集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="capacity">集合容量</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.#ctor(System.Int32,System.Action{System.Collections.Generic.List{`0}})">
            <summary>
            构造函数
            </summary>
            <param name="capacity">集合容量</param>
            <param name="overflowedNotify">当队列生产大于消费时,队列超出容量之后会将最先入队列的项溢出通知</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Action{System.Collections.Generic.List{`0}})">
            <summary>
            构造函数
            </summary>
            <param name="capacity">集合容量</param>
            <param name="items">初始化集合</param>
            <param name="overflowedNotify">当队列生产大于消费时,队列超出容量之后会将最先入队列的项溢出通知</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 Array 索引处开始，将 ICollection 的元素复制到一个 Array 中
            </summary>
            <param name="array">作为从 ICollection 复制的元素的目标的一维 Array。 Array 必须具有从零开始的索引</param>
            <param name="index">array 中从零开始的索引，从此索引处开始进行复制</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.Count">
            <summary>
            获取队列集合中包含的元素数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 ICollection 的访问（线程安全）。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.SyncRoot">
            <summary>
            获取可用于同步对 ICollection 的访问的对象
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器
            </summary>
            <returns>一个循环访问集合的枚举器</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数
            </summary>
            <returns>一个循环访问集合的枚举数</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.Enqueue(`0)">
            <summary>
            将对象添加到队列结尾
            </summary>
            <param name="item">要添加的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.CheckCapcity">
            <summary>
            检查容量
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.EnqueueRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将对象添加到队列结尾
            </summary>
            <param name="items">要添加的对象集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.Peek">
            <summary>
            返回位于队列集合开始处的对象
            </summary>
            <returns>位于队列集合开始处的对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.Peek(System.Int32)">
            <summary>
            返回位于队列集合开始处的若干对象列表
            </summary>
            <param name="peekCount">要Peek项数</param>
            <returns>位于队列集合开始处的若干对象列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.Dequeue">
            <summary>
            移除并返回位于队列集合开始处的对象
            </summary>
            <returns>位于队列集合开始处的对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.Dequeue(System.Int32)">
            <summary>
            移除并返回位于队列集合开始处的若干对象列表
            </summary>
            <param name="dequeueCount">要Dequeue项数</param>
            <returns>位于队列集合开始处的若干对象列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.Clear">
            <summary>
            从队列中移除所有对象
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ConcurrentFixCapacityQueue`1.Items">
            <summary>
            获取当前内部集合项列表
            </summary>
            <returns>当前内部集合项列表</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.ConcurrentList`1">
            <summary>
            线程安全列表
            </summary>
            <typeparam name="T">集合数据类型</typeparam>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ConcurrentList`1._items">
            <summary>
            内部集合 
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.ConcurrentList`1.SyncRoot">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ConcurrentList`1.Count">
            <summary>
            获取集合中包含的元素数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.ConcurrentList`1.IsReadOnly">
            <summary>
            集合是否是只读的
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentList`1.Add(`0)">
            <summary>
            添加对象到集合尾
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentList`1.Clear">
            <summary>
            清空集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentList`1.Contains(`0)">
            <summary>
            确定某元素是否在集合中
            </summary>
            <param name="item">指定项</param>
            <returns>是否在集合中</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentList`1.CopyTo(`0[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始，将整个 System.Collections.Generic.List`1 复制到兼容的一维数组
            </summary>
            <param name="array">一维 System.Array，它是从 System.Collections.Generic.List`1 复制的元素的目标。System.Array 必须具有从零开始的索引。</param>
            <param name="arrayIndex">array 中从零开始的索引，从此处开始复制</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentList`1.Remove(`0)">
            <summary>
            移除指定的元素
            </summary>
            <param name="item">指定元素</param>
            <returns>移除结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentList`1.GetEnumerator">
            <summary>
            返回循环访问的枚举数(注:遍历时需使用集合的SyncRoot字段加上线程锁)
            </summary>
            <returns>循环访问的枚举数</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.ConcurrentList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.DictionaryEx`2">
            <summary>
            Dictionary扩展类
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.DictionaryEx`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.DictionaryEx`2.SyncRoot">
            <summary>
            获取可用于同步对 System.Collections.Hashtable 的访问的对象。
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.LoopLinked`1">
            <summary>
            环形链表
            </summary>
            <typeparam name="T">数据泛型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.LoopLinked`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.LoopLinked`1._items">
            <summary>
            所有数据项泛型List集合
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.LoopLinked`1._firstNode">
            <summary>
            第一个节点
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.LoopLinked`1.FirstNode">
            <summary>
            获取第一个节点
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.LoopLinked`1.Count">
            <summary>
            获取节点数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.LoopLinked`1.ToList">
            <summary>
            转换为泛型List集合
            </summary>
            <returns>泛型List集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.LoopLinked`1.AddLast(`0)">
            <summary>
            在纯属处添加新节点
            </summary>
            <param name="item">新项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.LoopLinked`1.AddBefore(UtilZ.Dotnet.Ex.Base.LoopLinkedNode{`0},`0)">
            <summary>
            在指定节点之前添加新节点
            </summary>
            <param name="node">指定的节点</param>
            <param name="item">新项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.LoopLinked`1.AddAfter(UtilZ.Dotnet.Ex.Base.LoopLinkedNode{`0},`0)">
            <summary>
            在指定节点之后添加新节点
            </summary>
            <param name="node">指定的节点</param>
            <param name="item">新项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.LoopLinked`1.Remove(`0)">
            <summary>
            移除一项
            </summary>
            <param name="item">要移除的项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.LoopLinked`1.Remove(UtilZ.Dotnet.Ex.Base.LoopLinkedNode{`0})">
            <summary>
            移除一项
            </summary>
            <param name="node">要移除的项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.LoopLinked`1.ExistNode(UtilZ.Dotnet.Ex.Base.LoopLinkedNode{`0})">
            <summary>
            判断一个结点是否属于当前的环形链表[属于返回true,不属于则返回false]
            </summary>
            <param name="node">结点</param>
            <returns>属于返回true,不属于则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.LoopLinked`1.DeleteNode(UtilZ.Dotnet.Ex.Base.LoopLinkedNode{`0})">
            <summary>
            删除一个指定的节点
            </summary>
            <param name="node">要删除的节点</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.LoopLinked`1.Find(`0)">
            <summary>
            查找数据项所在节点
            </summary>
            <param name="item">数据项</param>
            <returns>找到返回该项所在节点,没找到返回null</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.LoopLinked`1.GetEnumerator">
            <summary>
            IEnumerable接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.LoopLinked`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerable接口
            </summary>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.LoopLinkedNode`1">
            <summary>
            环形链表节点
            </summary>
            <typeparam name="T">数据泛型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.LoopLinkedNode`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="value">数据项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.LoopLinkedNode`1.#ctor(`0,UtilZ.Dotnet.Ex.Base.LoopLinkedNode{`0},UtilZ.Dotnet.Ex.Base.LoopLinkedNode{`0})">
            <summary>
            构造函数
            </summary>
            <param name="value">数据项</param>
            <param name="pre">上一个节点</param>
            <param name="next">下一个节点</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.LoopLinkedNode`1.Previous">
            <summary>
            上一个节点
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.LoopLinkedNode`1.Next">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.LoopLinkedNode`1.Value">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.PriorityQueue`1">
            <summary>
            优先级队列
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.PriorityQueue`1._priorityQuenue">
            <summary>
            等待处理的信号指令队列
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.PriorityQueue`1._monitor">
            <summary>
            多线程锁
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.Enqueue(System.Int32,`0)">
            <summary>
            将对象添加到队列结尾处
            </summary>
            <param name="priorityLevel">优先级[值越小优先级越高,越大越低]</param>
            <param name="item">对象,该值可以为null</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.Dequeue(System.Int32)">
            <summary>
            移除并返回指定优先级开始处的对象
            </summary>
            <param name="priorityLevel">优先级[值越小优先级越高,越大越低]</param>
            <returns>开始处的对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.Dequeue">
            <summary>
            移除并返回开始处的对象,根据优先级依次移除,优先级高的先移除
            </summary>
            <returns>开始处的对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.Peek(System.Int32)">
            <summary>
            返回指定优先级开始处的对象,但不移除
            </summary>
            <param name="priorityLevel">优先级</param>
            <returns>开始处的对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.Peek">
            <summary>
            返回开始处的对象,但不移除,根据优先级依次返回,优先级高的先返回
            </summary>
            <returns>开始处的对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.RemoveRange(System.Int64)">
            <summary>
            移除队列中的前N项
            </summary>
            <param name="count">项数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.RemoveRange(System.Int32,System.Int64)">
            <summary>
            移除队列中的前N项
            </summary>
            <param name="priorityLevel">优先级</param>
            <param name="count">项数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.Clear">
            <summary>
            清空全部队列
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.Clear(System.Int32)">
            <summary>
            清空指定优先级的队列
            </summary>
            <param name="priorityLevel">优先级</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.GetCount">
            <summary>
            获取队列中包含的元素数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.GetPriorityCount(System.Int32)">
            <summary>
            获取队列中指定优先级的元素数
            </summary>
            <param name="priorityLevel">优先级</param>
            <returns>元素数</returns>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.Count">
            <summary>
            获取队列中包含的元素数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.GetCountByPriority(System.Int32)">
            <summary>
            获取队列中指定优先级的元素数
            </summary>
            <param name="priorityLevel">优先级</param>
            <returns>元素数</returns>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.PriorityCount">
            <summary>
            获取当前存储的优先级类型数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.GetEnumerator">
            <summary>
            返回循环的遍历枚举
            </summary>
            <returns>循环的遍历枚举</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.PriorityQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回循环的遍历枚举
            </summary>
            <returns>循环的遍历枚举</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.SortedListEx`1">
            <summary>
            顺序列表[支持多线程,内部已做数据同步处理]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SortedListEx`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Base.SortedListEx`1._items">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SortedListEx`1.Add(`0)">
            <summary>
            添加项
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SortedListEx`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将指定的集合添加到顺序列表中
            </summary>
            <param name="items">指定的集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SortedListEx`1.Clear">
            <summary>
            清空列表
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SortedListEx`1.Contains(`0)">
            <summary>
            确定是否包含特定值
            </summary>
            <param name="item">值</param>
            <returns>包含返回true,否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SortedListEx`1.CopyTo(`0[],System.Int32)">
            <summary>
            从特定的Array索引开始，将集合中的元素复制到一个 Array 中
            </summary>
            <param name="array">特定的Array</param>
            <param name="arrayIndex">特定的Array索引</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.SortedListEx`1.Count">
            <summary>
            获取集合中包含的元素数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.SortedListEx`1.IsReadOnly">
            <summary>
            获取一个值，该值指示集合是否为只读
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SortedListEx`1.Remove(`0)">
            <summary>
            从集合中移除特定对象的第一个匹配项
            </summary>
            <param name="item">要移除的对象</param>
            <returns>移除成功返回true,否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SortedListEx`1.IndexOf(`0)">
            <summary>
            搜索指定对象在集合中的索引
            </summary>
            <param name="item">指定对象</param>
            <returns>对象所在集合中的索引</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SortedListEx`1.RemoveAt(System.Int32)">
            <summary>
            要移除0开始索引处的元素
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Base.SortedListEx`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素
            </summary>
            <param name="index">指定索引</param>
            <returns>指定索引处的元素</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SortedListEx`1.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器
            </summary>
            <returns>一个循环访问集合的枚举器</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.SortedListEx`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            显示返回一个循环访问集合的枚举器
            </summary>
            <returns>一个循环访问集合的枚举器</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.UnManagedDll">
            <summary>
            非托管程序集扩展类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.UnManagedDll.SetDllDirectory(System.String)">
            <summary>
            添加目录到DLL搜索路径
            </summary>
            <param name="dir">The directory to be added to the search path. 
            If this parameter is an empty string (""), 
            the call removes the current directory from the default DLL search order. 
            If this parameter is NULL, the function restores the default search order</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.UnManagedDll.LoadLibrary(System.String)">
            <summary>
            加载C++ dll
            </summary>
            <param name="dllPath">dll路径</param>
            <returns>库句柄</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.UnManagedDll.LoadLibraryEx(System.String,System.Int32,System.Int32)">
            <summary>
            加载C++ dll
            </summary>
            <param name="dllPath">dll路径</param>
            <param name="hFile">This parameter is reserved for future use. It must be NULL.</param>
            <param name="dwFlags">The action to be taken when loading the module. If no flags are specified, the behavior of this function is identical to that of the LoadLibrary function. This parameter can be one of the following values.</param>
            <returns>库句柄</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.UnManagedDll.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            获取方法句柄
            </summary>
            <param name="libHandle">库句柄</param>
            <param name="funcName">方法名称</param>
            <returns>方法句柄</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.UnManagedDll.FreeLibrary(System.IntPtr)">
            <summary>
            释放库
            </summary>
            <param name="libHandle">库句柄</param>
            <returns>释放结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.UnManagedDll.SetDllDir(System.String)">
            <summary>
            添加目录到DLL搜索路径[代码中第一行一般都是SetDllDirectory(""),目的是为了防DLL挟持]
            The SetDllDirectory function affects all subsequent calls to the LoadLibrary and LoadLibraryEx functions.It also effectively disables safe DLL search mode while the specified directory is in the search path.
            After calling SetDllDirectory, the standard DLL search path is:
            The directory from which the application loaded.
            The directory specified by the lpPathName parameter.
            The system directory.Use the GetSystemDirectory function to get the path of this directory.The name of this directory is System32.
            The 16-bit system directory.There is no function that obtains the path of this directory, but it is searched.The name of this directory is System.
            The Windows directory.Use the GetWindowsDirectory function to get the path of this directory.
            The directories that are listed in the PATH environment variable.
            </summary>
            <param name="dir">The directory to be added to the search path. 
            If this parameter is an empty string (""), 
            the call removes the current directory from the default DLL search order. 
            If this parameter is NULL, the function restores the default search order</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.UnManagedDll.Load(System.String)">
            <summary>
            加载C++ dll
            </summary>
            <param name="dllPath">dll路径</param>
            <returns>库句柄</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.UnManagedDll.LoadEx(System.String,System.Int32,System.Int32)">
            <summary>
            加载C++ dll
            </summary>
            <param name="dllPath">dll路径</param>
            <param name="hFile">This parameter is reserved for future use. It must be NULL.</param>
            <param name="dwFlags">The action to be taken when loading the module. If no flags are specified, the behavior of this function is identical to that of the LoadLibrary function. This parameter can be one of the following values.</param>
            <returns>库句柄</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.UnManagedDll.GetProcDelegate(System.IntPtr,System.String,System.Type)">
            <summary>
            获取方法委托
            </summary>
            <param name="libHandle">库句柄</param>
            <param name="funcName">方法名称</param>
            <param name="delegateType">与非托管dll中方法定义对应的委托类型</param>
            <returns>方法句柄</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.UnManagedDll.Free(System.IntPtr)">
            <summary>
            释放库
            </summary>
            <param name="libHandle">库句柄</param>
            <returns>释放结果</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Base.Util">
            <summary>
            通用扩展类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Util.ParaValidateNull(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            字符串参数验证
            </summary>
            <param name="para">参数</param>
            <param name="name">参数名</param>
            <param name="allowWhiteSpace">是否允许空白字符[true:允许;false:不允许]</param>
            <param name="allowEmpty">是否允许为空字符串[true:允许;false:不允许]</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Util.ParaValidateNull``1(``0,System.String)">
            <summary>
            参数验证
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="para">参数</param>
            <param name="name">参数名</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Util.Add``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,``1,System.Int32)">
            <summary>
            ConcurrentDictionary字典添加项[返回添加结果]
            </summary>
            <typeparam name="T">key类型</typeparam>
            <typeparam name="W">value类型</typeparam>
            <param name="dic">ConcurrentDictionary字典</param>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="repeatCount">添加失败重试次数</param>
            <returns>返回添加结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Base.Util.GetForeverTimeSpan">
            <summary>
            获取永久时间片
            </summary>
            <returns>永久时间片</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.ITTLVConverter">
            <summary>
            TTLV属性值编解码转换接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.ITTLVConverter.ConvertToBytes(System.Int32,System.Object,System.Type,System.Object)">
            <summary>
            目标对象转换为bytes
            </summary>
            <param name="tag">标签</param>
            <param name="obj">转换对象</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.ITTLVConverter.ConvertBackObject(System.Int32,System.Byte[],System.Object,System.Type,System.Object)">
            <summary>
            转换bytes到目标对象
            </summary>
            <param name="tag">标签</param>
            <param name="buffer">byte[]</param>
            <param name="memberValue">目标属性或字段值</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>解析结果对象</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.ITTLVNodeCodec">
            <summary>
            TTLV编解码接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.ITTLVNodeCodec.WriteNode(System.Collections.Generic.List{System.Byte},System.Int32,System.TypeCode,System.Byte[])">
            <summary>
            顺序编码节点数据
            </summary>
            <param name="buffer">存储数据列表</param>
            <param name="tag">Tag</param>
            <param name="typeCode">Type</param>
            <param name="valueBuffer">Value</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.ITTLVNodeCodec.ReadNodeInfo(System.IO.BinaryReader,UtilZ.Dotnet.Ex.TTLV.TTLVNodeInfo)">
            <summary>
            读取节点信息
            </summary>
            <param name="br">BinaryReader</param>
            <param name="nodeInfo">存储节点信息对象</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.TTLVAttribute">
            <summary>
            TTLV特性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.TTLV.TTLVAttribute.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.TTLV.TTLVAttribute.ConverterType">
            <summary>
            
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.TTLV.TTLVAttribute.PropertyType">
            <summary>
            
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVAttribute.#ctor(System.Int32,System.Boolean,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="tag">标签</param>
            <param name="propertyType">属性类型[true:单个对象;false;集合(支持类型:IList子类和数组);如果为集合,则属性类型不只能是具体类型,不能是抽象类类型]</param>
            <param name="index">索引化属性的可选索引值。对于非索引化属性，此值应为 null</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVAttribute.#ctor(System.Int32,System.Type,System.Object[],System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tag">标签</param>
            <param name="converterType">属性值转换器类型[该类型必须实现ITTLVConverter接口,且有无参构造函数]</param>
            <param name="index">索引化属性的可选索引值。对于非索引化属性，此值应为 null</param>
            <param name="converterPara">转换器参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVAttribute.#ctor(System.Int32,System.Type,UtilZ.Dotnet.Ex.TTLV.TTLVPropertyType,System.Object[],System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tag">标签</param>
            <param name="converterType">属性值转换器类型[该类型必须实现ITTLVConverter接口,且有无参构造函数]</param>
            <param name="propertyType">属性类型[如果为Collection]</param>
            <param name="index">索引化属性的可选索引值。对于非索引化属性，此值应为 null</param>
            <param name="converterPara">转换器参数</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.TTLVPropertyType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.TTLV.TTLVPropertyType.SingleObject">
            <summary>
            单对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.TTLV.TTLVPropertyType.Collection">
            <summary>
            集合(仅支持类型,IList子类和数组)
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.TTLV.TTLVPropertyType.Converter">
            <summary>
            自定义转换器
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.TTLVCommon">
            <summary>
            TTLVCommon
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVCommon.GetConvertTypeLength(System.TypeCode)">
            <summary>
            获取转换类型bytes长度
            </summary>
            <param name="typeCode"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVCommon.ConvertToBytes(System.TypeCode,System.Object)">
            <summary>
            获取基元类型数据转换为Bytes
            </summary>
            <param name="typeCode">TypeCode</param>
            <param name="objValue">object</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVCommon.ConvterBack(System.Byte[],System.TypeCode,System.Int32,System.Int32)">
            <summary>
            获取byte[]转换为基元类型数据
            </summary>
            <param name="valueBuffer"></param>
            <param name="typeCode"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVCommon.CheckHasNoParaConstructor(System.Type)">
            <summary>
            判断是否有无参构造函数,且可反射调用无参构造函数实例化对象
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVCommon.GetCollectionElementType(System.Type,System.Type@,UtilZ.Dotnet.Ex.TTLV.TTLVType@)">
            <summary>
            
            </summary>
            <param name="collectionType"></param>
            <param name="eleType"></param>
            <param name="ttlvType"></param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.TTLVConverterBase">
            <summary>
            TTLV属性或字段值序列化编解码转换接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVConverterBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVConverterBase.ConvertToBytes(System.Int32,System.Object,System.Type,System.Object)">
            <summary>
            目标对象转换为bytes
            </summary>
            <param name="tag">标签</param>
            <param name="obj">转换对象</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVConverterBase.ConvertBackObject(System.Int32,System.Byte[],System.Object,System.Type,System.Object)">
            <summary>
            转换bytes到目标对象
            </summary>
            <param name="tag">标签</param>
            <param name="buffer">byte[]</param>
            <param name="memberValue">目标属性或字段值</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>解析结果对象</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.StuTTLVConvter.ConvertToBytes(System.Int32,System.Object,System.Type,System.Object)">
            <summary>
            目标对象转换为bytes
            </summary>
            <param name="tag">标签</param>
            <param name="obj">转换对象</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.StuTTLVConvter.ConvertBackObject(System.Int32,System.Byte[],System.Object,System.Type,System.Object)">
            <summary>
            转换bytes到目标对象
            </summary>
            <param name="tag">标签</param>
            <param name="buffer">byte[]</param>
            <param name="memberValue">目标属性或字段值</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>解析结果对象</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.CommandBase">
            <summary>
            命令基类[TTLV_Tag范围(0-100)]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.TTLV.CommandBase.Cmd">
            <summary>
            命令字
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.CommandBase.GenerateCommandData">
            <summary>
            生成命令数据
            </summary>
            <returns>命令数据</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.CommandBase.Parse(System.Byte[])">
            <summary>
            解析命令数据
            </summary>
            <param name="data">传输命令</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.CommandBaseT`1">
            <summary>
            泛型命令基类
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.TTLVHelper">
            <summary>
            TTVL辅助类[编码规则:Tag:4字节;Type:1字节;Length:4字节;Value:bytes]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVHelper.SetNodeCodec(UtilZ.Dotnet.Ex.TTLV.ITTLVNodeCodec)">
            <summary>
            设置节点编解码器
            </summary>
            <param name="codec">节点编解码器</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVHelper.Test">
            <summary>
            测试
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVHelper.Decoding``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            解析数据[支持类和结构体]
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="buffer">要解析的bytes</param>
            <param name="beginIndex">解析数据起始索引(小于0表示从头开始)</param>
            <param name="length">解析数据长度(小于0表示从起始到末尾)</param>
            <returns>解析结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVHelper.Decoding``1(``0,System.Byte[],System.Int32,System.Int32)">
            <summary>
            解析数据到指定对象体中
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="obj">数据存储对象</param>
            <param name="buffer">要解析的bytes</param>
            <param name="beginIndex">解析数据起始索引(小于0表示从头开始)</param>
            <param name="length">解析数据长度(小于0表示从起始到末尾)</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVHelper.Decoding``1(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            解析数据[支持类和结构体]
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="stream">要解析的数据流</param>
            <param name="position">流解析起始位置(小于0表示从头开始)</param>
            <param name="endPosition">流解析结束位置(小于0表示从起始到末尾)</param>
            <returns>解析结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVHelper.Decoding``1(``0,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            解析数据到指定对象体中
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="obj">数据存储对象</param>
            <param name="stream">要解析的数据流</param>
            <param name="position">流解析起始位置(小于0表示从头开始)</param>
            <param name="endPosition">流解析结束位置(小于0表示从起始到末尾)</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVHelper.Decoding``1(``0,System.IO.BinaryReader,System.Int64,System.Int64)">
            <summary>
            解析数据到指定对象体中
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="obj">数据存储对象</param>
            <param name="br">BinaryReader</param>
            <param name="position">流解析起始位置(小于0表示从头开始)</param>
            <param name="endPosition">流解析结束位置(小于0表示从起始到末尾)</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVHelper.Encoding(System.Object)">
            <summary>
            转换为bytes
            </summary>
            <param name="obj">目标对象</param>
            <returns>转换结果bytes</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVNodeCodec.WriteNode(System.Collections.Generic.List{System.Byte},System.Int32,System.TypeCode,System.Byte[])">
            <summary>
            顺序编码节点数据
            </summary>
            <param name="buffer">存储数据列表</param>
            <param name="tag">Tag</param>
            <param name="typeCode">Type</param>
            <param name="valueBuffer">Value</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVNodeCodec.ReadNodeInfo(System.IO.BinaryReader,UtilZ.Dotnet.Ex.TTLV.TTLVNodeInfo)">
            <summary>
            读取节点信息
            </summary>
            <param name="br">BinaryReader</param>
            <param name="nodeInfo">存储节点信息对象</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.TTLVNodeInfo">
            <summary>
            TTLV节点信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.TTLV.TTLVNodeInfo.Tag">
            <summary>
            节点Tag
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.TTLV.TTLVNodeInfo.Type">
            <summary>
            节点值类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.TTLV.TTLVNodeInfo.Length">
            <summary>
            节点值数据长度
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVNodeInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.TTLVPrimitiveCollectionConverter">
            <summary>
            基元类型集合(包括非基元类型的字符串集合)TTLV属性值编解码转换接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVPrimitiveCollectionConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVPrimitiveCollectionConverter.ConvertToBytes(System.Int32,System.Object,System.Type,System.Object)">
            <summary>
            目标对象转换为bytes
            </summary>
            <param name="tag">标签</param>
            <param name="obj">转换对象</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVPrimitiveCollectionConverter.ConvertBackObject(System.Int32,System.Byte[],System.Object,System.Type,System.Object)">
            <summary>
            转换bytes到目标对象
            </summary>
            <param name="tag">标签</param>
            <param name="buffer">byte[]</param>
            <param name="memberValue">目标属性或字段值</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>解析结果对象</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.TTLVSerializeConverter">
            <summary>
            TTLV属性或字段值序列化编解码转换接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVSerializeConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVSerializeConverter.ConvertToBytes(System.Int32,System.Object,System.Type,System.Object)">
            <summary>
            目标对象转换为bytes
            </summary>
            <param name="tag">标签</param>
            <param name="obj">转换对象</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.TTLV.TTLVSerializeConverter.ConvertBackObject(System.Int32,System.Byte[],System.Object,System.Type,System.Object)">
            <summary>
            转换bytes到目标对象
            </summary>
            <param name="tag">标签</param>
            <param name="buffer">byte[]</param>
            <param name="memberValue">目标属性或字段值</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>解析结果对象</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.TTLVSerializeType">
            <summary>
            TTLVSerializeConverter序列化类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.TTLV.TTLVSerializeType.Json">
            <summary>
            Json
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.TTLV.TTLVSerializeType.Xml">
            <summary>
            Xml,目标类型需要标记为可序列化,且类型必须是public类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.TTLV.TTLVSerializeType.Bin">
            <summary>
            二进制,目标类型需要标记为可序列化
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.TTLVStructNode">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.TTLV.TTLVStructNode._memberType">
            <summary>
            成员类型[true:属性;false:字段]
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.TTLV.TTLVType">
            <summary>
            TTLVType
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.TTLV.TTLVType.BasicType">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.TTLV.TTLVType.Convert">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.TTLV.TTLVType.Object">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.TTLV.TTLVType.Array">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.TTLV.TTLVType.IList">
            <summary>
            
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Basepression.BaseCalate">
            <summary>
            基础计算类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Basepression.BaseCalate.BaseCal(System.String,System.String,System.String)">
            <summary>
            基本的加减乘除运算
            </summary>
            <param name="left">左操作数字符串</param>
            <param name="right">右操作数字符串</param>
            <param name="operate">运算符</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Basepression.BaseCalate.BaseCal(System.Double,System.Double,System.String)">
            <summary>
            基本的加减乘除运算
            </summary>
            <param name="leftNum">左操作数</param>
            <param name="rightNum">右操作数</param>
            <param name="operate">运算符</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Basepression.BaseCalate.BaseCal(System.String)">
            <summary>
            基本的加减乘除运算
            </summary>
            <param name="baseExpression">基本表达式[仅由两个操作数和一个运算符的计算]</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Basepression.BaseCalate.IsOperator(System.Char)">
            <summary>
            是否+-*/运算符
            </summary>
            <param name="ch">字符</param>
            <returns>如果是四则运算符中的一种则返回true,否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Basepression.BaseCalate.IsMathOperator(System.Char)">
            <summary>
            是否是数学运算符+-*/().
            </summary>
            <param name="ch">字符</param>
            <returns>如果是数学运算符+-*/.中的一种则返回true,否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Basepression.BaseCalate.ContainsOperator(System.String)">
            <summary>
            表达式是否包含某种运算符
            </summary>
            <param name="expression">简单的表达式[3+2或3*2]</param>
            <returns>表达式计算结果</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Basepression.ExpressionCalculator">
            <summary>
            字符串表达式计算类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Basepression.ExpressionCalculator.ExpressonCalculate(System.String)">
            <summary>
            字符串表达式计算
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Basepression.ExpressionCalculator.ExpressionValidate(System.String)">
            <summary>
            表达式验证
            </summary>
            <param name="expression">需要验证的表达式</param>
            <returns>验证通过返回true,非法表达式返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Basepression.ExpressionCalculator.BaseExpressionParse(System.String)">
            <summary>
            仅加法和减法或仅乘法和除法(不能有加减和乘除混合)表达式解析生成树
            </summary>
            <param name="expression">要计算的表达式字符串</param>
            <returns>表达式节点树</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Basepression.ExpressionCalculator.BlendExpressionParse(System.String)">
            <summary>
            无括号的加减乘除混合表达式运算
            </summary>
            <param name="expression">要计算的表达式字符串</param>
            <returns>表达式节点树</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Basepression.ExpressionCalculator.ExpressionParse(System.String)">
            <summary>
            解析通用表达式
            </summary>
            <param name="expression">表达式字符串</param>
            <returns>表达式结点树</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Basepression.ExpressionCalculator.Calculator(UtilZ.Dotnet.Ex.Basepression.ExpressionNode)">
            <summary>
            树值计算
            </summary>
            <param name="root">要计算的节点</param>
            <returns>节点计算结果值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Basepression.ExpressionNode">
            <summary>
            表达式模型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Basepression.ExpressionNode.Parent">
            <summary>
            父级节点
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Basepression.ExpressionNode.Left">
            <summary>
            左节点
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Basepression.ExpressionNode.Right">
            <summary>
            右节点
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Basepression.ExpressionNode.IsLeaf">
            <summary>
            是否是叶子节点
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Basepression.ExpressionNode.Value">
            <summary>
            当前节点的值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Basepression.ExpressionNode.Operator">
            <summary>
            非叶子节点时当前表达式的运算符
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Basepression.Operators">
            <summary>
            运算符符号定义类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Basepression.Operators.Add">
            <summary>
            +
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Basepression.Operators.Subtraction">
            <summary>
            减号[-]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Basepression.Operators.Multiply">
            <summary>
            乘号[*]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Basepression.Operators.Division">
            <summary>
            除号[/]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Basepression.Operators.LeftBrackets">
            <summary>
            左括号[(]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Basepression.Operators.RightBrackets">
            <summary>
            右括号[)]
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Basepression.OperNumException">
            <summary>
            操作数异常
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Basepression.OperNumException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.FileTransfer.DirectoryInfoItem">
            <summary>
            目录信息
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.DirectoryInfoItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.FileTransfer.FileInfoItem">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.FileTransfer.FileInfoItem.Length">
            <summary>
            文件长度
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FileInfoItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.FileTransfer.FileSystemItemInfo">
            <summary>
            文件信息基类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.FileTransfer.FileSystemItemInfo.CreationTime">
            <summary>
            获取或设置当前文件或目录的创建时间
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.FileTransfer.FileSystemItemInfo.FullName">
            <summary>
            获取目录或文件的完整目录
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.FileTransfer.FileSystemItemInfo.Name">
            <summary>
            对于文件，获取该文件的名称。对于目录，如果存在层次结构，则获取层次结构中最后一个目录的名称。否则，Name 属性获取该目录的名称
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FileSystemItemInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FileSystemItemInfo.ToString">
            <summary>
            重写ToString
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer">
            <summary>
            ftp文件传输类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer._ftpUrl">
            <summary>
            init ftp url
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer._ftpRootUrl">
            <summary>
            ftp根地址
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer._rootDirs">
            <summary>
            根目录层级数组
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer._userName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer._password">
            <summary>
            密码
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer._proxy">
            <summary>
            代理
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer._splitDirChs">
            <summary>
            路径拆分字符数组
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer._ftpDirRegStr">
            <summary>
            FTP目录信息匹配正则表达式
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer._ftpFileRegStr">
            <summary>
            FTP文件信息匹配正则表达式
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer._splitFileInfoChs">
            <summary>
            拆分文件或目录列表字符数组
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer._yearPre">
            <summary>
            年前缀
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.#ctor(System.String,System.String,System.String,System.Net.IWebProxy)">
            <summary>
            构造函数
            </summary>
            <param name="ftpUrl">ftpUrl</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <param name="proxy">代理</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.CreateRequest(System.String,System.String)">
            <summary>
            创建FtpWebRequest
            </summary>
            <param name="ftpUrl">ftp url</param>
            <param name="method">请求方法</param>
            <returns>FtpWebRequest</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.GetFullDirFolderNames(System.String)">
            <summary>
            获取全目录层级名称列表
            </summary>
            <param name="relativeDir">相对目录</param>
            <returns>全目录层级名称列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.GetFullPath(System.String)">
            <summary>
            获取全路径
            </summary>
            <param name="relativePath">相对路径</param>
            <returns>全路径</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.Upload(System.String,System.IO.Stream,System.Int64,System.Int64,UtilZ.Dotnet.Ex.FileTransfer.UpdateMode,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            上传数据
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <param name="stream">读取数据的流</param>
            <param name="position">数组中读取数据的起始位置</param>
            <param name="length">要上传的数据长度</param>
            <param name="mode">上传文件的创建模式</param>
            <param name="transferedLength">已传输数据长度</param>
            <param name="scheduleNotify">进度回调,第一个参数为传输总大小,第二参数为已传输数据大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.Upload(System.String,System.String,System.Int64,System.Int64,UtilZ.Dotnet.Ex.FileTransfer.UpdateMode,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            上传数据
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <param name="localFilePath">本地文件路径</param>
            <param name="position">数组中读取数据的起始位置</param>
            <param name="length">要上传的数据长度</param>
            <param name="mode">上传文件的创建模式</param>
            <param name="transferedLength">已传输数据长度</param>
            <param name="scheduleNotify">进度回调,第一个参数为传输总大小,第二参数为已传输数据大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.Upload(System.String,System.Byte[],System.Int32,System.Int32,UtilZ.Dotnet.Ex.FileTransfer.UpdateMode,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            上传数据
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <param name="buffer">要上传的数据</param>
            <param name="position">数组中读取数据的起始位置</param>
            <param name="length">要上传的数据长度</param>
            <param name="mode">上传文件的创建模式</param>
            <param name="transferedLength">已传输数据长度</param>
            <param name="scheduleNotify">进度回调,第一个参数为传输总大小,第二参数为已传输数据大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.UploadDirectory(System.String,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            上传目录
            </summary>
            <param name="remoteDir">远程目录</param>
            <param name="localDir">本地目录</param>
            <param name="scheduleNotify">进度回调,第一个参数为传输总大小,第二参数为已传输数据大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.Download(System.String,System.IO.Stream,System.Int64,System.Int64,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            下载文件
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <param name="stream">本地存储数据的流</param>
            <param name="position">起始位置</param>
            <param name="length">数据长度</param>
            <param name="transferedLength">已传输数据长度</param>
            <param name="scheduleNotify">进度回调,第一个参数为传输总大小,第二参数为已传输数据大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.Download(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            下载文件
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <param name="localFilePath">本地文件路径</param>
            <param name="position">起始位置</param>
            <param name="length">数据长度</param>
            <param name="transferedLength">已传输数据长度</param>
            <param name="scheduleNotify">进度回调,第一个参数为传输总大小,第二参数为已传输数据大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.Download(System.String,System.Byte[],System.Int64,System.Int64,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            下载文件
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <param name="buffer">存放数据的数组</param>
            <param name="position">起始位置</param>
            <param name="length">数据长度</param>
            <param name="transferedLength">已传输数据长度</param>
            <param name="scheduleNotify">进度回调,第一个参数为传输总大小,第二参数为已传输数据大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.DownloadDirectory(System.String,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            下载服务器上指定目录及其子目录内的所有文件,并按原结构存放本地
            </summary>
            <param name="localDir">本地目录</param>
            <param name="remoteDir">远程目录</param>
            <param name="scheduleNotify">进度回调,第一个参数为下载总文件数,第二参数为当前所下载的文件数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.ExistFile(System.String)">
            <summary>
            检查文件是否存;在存在返回true;不存在返回false
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <returns>在存在返回true;不存在返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.ExistDirectory(System.String)">
            <summary>
            检查目录是否存在[存在返回true;不存在返回false]
            </summary>
            <param name="remoteDir">远程目录</param>
            <returns>存在返回true;不存在返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            删除目录
            </summary>
            <param name="remoteDir">远程目录</param>
            <param name="recursive">是否递归删除,true:先删除文件夹内的所有内容再删除文件夹;false:如果文件夹内有内容则会失败</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.CreateDirectory(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="remoteDir">远程目录</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.ConvertFTPCreateTime(System.String,System.String)">
            <summary>
            转换FTP创建时间
            </summary>
            <param name="year">年月日</param>
            <param name="time">时间</param>
            <returns>FTP创建时间</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.GetFiles(System.String,System.IO.SearchOption)">
            <summary>
            获取文件集合
            </summary>
            <param name="remoteDir">远程目录</param>
            <param name="option">获取选项</param>
            <returns>文件集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>
            获取文件夹集合
            </summary>
            <param name="remoteDir">远程目录</param>
            <param name="option">获取选项</param>
            <returns>文件夹集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.GetFileLength(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.Rename(System.String,System.String)">
            <summary>
            重命名文件
            </summary>
            <param name="oldRemoteFilePath">旧文件路径</param>
            <param name="newFileName">新文件名</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.Copy(System.String,System.String)">
            <summary>
            复制指定文件到指定路径
            </summary>
            <param name="sourceRemoteFilePath">原始文件路径</param>
            <param name="destRemoteFilePath">目的地文件路径</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.FtpFileTransfer.Move(System.String,System.String)">
            <summary>
            移除文件到指定路径
            </summary>
            <param name="sourceRemoteFilePath">原始文件路径</param>
            <param name="destRemoteFilePath">目的地文件路径</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer">
            <summary>
            文件传输接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.Upload(System.String,System.IO.Stream,System.Int64,System.Int64,UtilZ.Dotnet.Ex.FileTransfer.UpdateMode,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            上传数据
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <param name="stream">读取数据的流</param>
            <param name="position">数组中读取数据的起始位置</param>
            <param name="length">要上传的数据长度</param>
            <param name="mode">上传文件的创建模式</param>
            <param name="transferedLength">已传输数据长度</param>
            <param name="scheduleNotify">进度回调,第一个参数为传输总大小,第二参数为已传输数据大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.Upload(System.String,System.String,System.Int64,System.Int64,UtilZ.Dotnet.Ex.FileTransfer.UpdateMode,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            上传数据
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <param name="localFilePath">本地文件路径</param>
            <param name="position">数组中读取数据的起始位置</param>
            <param name="length">要上传的数据长度</param>
            <param name="mode">上传文件的创建模式</param>
            <param name="transferedLength">已传输数据长度</param>
            <param name="scheduleNotify">进度回调,第一个参数为传输总大小,第二参数为已传输数据大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.Upload(System.String,System.Byte[],System.Int32,System.Int32,UtilZ.Dotnet.Ex.FileTransfer.UpdateMode,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            上传数据
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <param name="buffer">要上传的数据</param>
            <param name="position">数组中读取数据的起始位置</param>
            <param name="length">要上传的数据长度</param>
            <param name="mode">上传文件的创建模式</param>
            <param name="transferedLength">已传输数据长度</param>
            <param name="scheduleNotify">进度回调,第一个参数为传输总大小,第二参数为已传输数据大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.UploadDirectory(System.String,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            上传目录
            </summary>
            <param name="remoteDir">远程目录</param>
            <param name="localDir">本地目录</param>
            <param name="scheduleNotify">进度回调,第一个参数为下载总文件数,第二参数为当前所下载的文件数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.Download(System.String,System.IO.Stream,System.Int64,System.Int64,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            下载文件
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <param name="stream">本地存储数据的流</param>
            <param name="position">起始位置</param>
            <param name="length">数据长度</param>
            <param name="transferedLength">已传输数据长度</param>
            <param name="scheduleNotify">进度回调,第一个参数为传输总大小,第二参数为已传输数据大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.Download(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            下载文件
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <param name="localFilePath">本地文件路径</param>
            <param name="position">起始位置</param>
            <param name="length">数据长度</param>
            <param name="transferedLength">已传输数据长度</param>
            <param name="scheduleNotify">进度回调,第一个参数为传输总大小,第二参数为已传输数据大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.Download(System.String,System.Byte[],System.Int64,System.Int64,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            下载文件
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <param name="buffer">存放数据的数组</param>
            <param name="position">起始位置</param>
            <param name="length">数据长度</param>
            <param name="transferedLength">已传输数据长度</param>
            <param name="scheduleNotify">进度回调,第一个参数为传输总大小,第二参数为已传输数据大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.DownloadDirectory(System.String,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            下载服务器上指定目录及其子目录内的所有文件,并按原结构存放本地
            </summary>
            <param name="localDir">本地目录</param>
            <param name="remoteDir">远程目录</param>
            <param name="scheduleNotify">进度回调,第一个参数为下载总文件数,第二参数为当前所下载的文件数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.ExistFile(System.String)">
            <summary>
            检查文件是否存;在存在返回true;不存在返回false
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <returns>在存在返回true;不存在返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.ExistDirectory(System.String)">
            <summary>
            检查目录是否存在[存在返回true;不存在返回false]
            </summary>
            <param name="remoteDir">远程目录</param>
            <returns>存在返回true;不存在返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            删除目录
            </summary>
            <param name="remoteDir">远程目录</param>
            <param name="recursive">是否递归删除,true:先删除文件夹内的所有内容再删除文件夹;false:如果文件夹内有内容则会失败</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.CreateDirectory(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="remoteDir">远程目录</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.GetFiles(System.String,System.IO.SearchOption)">
            <summary>
            获取文件集合
            </summary>
            <param name="remoteDir">远程目录</param>
            <param name="option">获取选项</param>
            <returns>文件集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>
            获取文件夹集合
            </summary>
            <param name="remoteDir">远程目录</param>
            <param name="option">获取选项</param>
            <returns>文件夹集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.GetFileLength(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="remoteFilePath">远程文件路径</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.Rename(System.String,System.String)">
            <summary>
            重命名文件
            </summary>
            <param name="oldRemoteFilePath">旧文件路径</param>
            <param name="newFileName">新文件名</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.Copy(System.String,System.String)">
            <summary>
            复制指定文件到指定路径
            </summary>
            <param name="sourceRemoteFilePath">原始文件路径</param>
            <param name="destRemoteFilePath">目的地文件路径</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.IFileTransfer.Move(System.String,System.String)">
            <summary>
            移除文件到指定路径
            </summary>
            <param name="sourceRemoteFilePath">原始文件路径</param>
            <param name="destRemoteFilePath">目的地文件路径</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.FileTransfer.TransferFileException">
            <summary>
            传输文件异常
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.FileTransfer.TransferFileException.TransferLength">
            <summary>
            已传输文件大小
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.FileTransfer.TransferFileException.#ctor(System.Int64,System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="transferLength">已传输文件大小</param>
            <param name="message">信息</param>
            <param name="ex">内部异常</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.FileTransfer.UpdateMode">
            <summary>
            更新模式
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.FileTransfer.UpdateMode.Create">
            <summary>
            指定操作系统应创建新文件。如果文件已存在，它将被覆盖这需要 System.Security.Permissions.FileIOPermissionAccess.Write
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.FileTransfer.UpdateMode.Append">
            <summary>
            若存在文件，则打开该文件并查找到文件尾，或者创建一个新文件。这需要 System.Security.Permissions.FileIOPermissionAccess.Append权限
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.LMQ.LMQBase">
            <summary>
            本地消息队列数据模型基类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.LMQ.LMQBase.Topic">
            <summary>
            主题
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.LMQBase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="topic">主题</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.LMQ.LMQCenter">
            <summary>
            本地消息队列中心
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.LMQ.LMQCenter._htSubscibeItems">
            <summary>
            订阅项集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.LMQCenter.Subscibe(UtilZ.Dotnet.Ex.LMQ.SubscibeItem)">
            <summary>
            订阅
            </summary>
            <param name="item">订阅项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.LMQCenter.UnSubscibe(UtilZ.Dotnet.Ex.LMQ.SubscibeItem)">
            <summary>
            取消订阅
            </summary>
            <param name="item">订阅项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.LMQCenter.Clear(System.String)">
            <summary>
            清空订阅
            </summary>
            <param name="topic">订阅ID下要清空订阅主题,为null清空所有订阅组</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.LMQCenter.Publish(System.String,System.Object)">
            <summary>
            发布数据消息
            </summary>
            <param name="topic">主题名称</param>
            <param name="obj">数据对象</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.LMQ.LMQConfigManager">
            <summary>
            本地消息队列中心配置管理类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.LMQ.LMQConfigManager._htLMQConfig">
            <summary>
            本地消息队列中心配置集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.LMQConfigManager.AddLMQConfig(UtilZ.Dotnet.Ex.LMQ.LMQConfig)">
            <summary>
            添加本地消息队列中心配置
            </summary>
            <param name="config">本地消息队列中心配置</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.LMQConfigManager.RemoveLMQConfig(System.String)">
            <summary>
            移除本地消息队列中心配置
            </summary>
            <param name="topic">主题</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.LMQConfigManager.GetLMQConfig(System.String)">
            <summary>
            获取本地消息队列中心配置[无该主题的配置项返回null]
            </summary>
            <param name="topic">主题</param>
            <returns>本地消息队列中心配置</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.LMQ.LMQConfig">
            <summary>
            本地消息队列中心配置类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.LMQ.LMQConfig.Topic">
            <summary>
            主题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.LMQ.LMQConfig.IsSyncPublish">
            <summary>
            发布数据时是否同步发布[true:单线程同同步发布;false:多线程并行发布]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.LMQConfig.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="topic">主题</param>
            <param name="isSyncPublish">发布数据时是否同步发布[true:单线程同同步发布;false:多线程并行发布]</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.LMQ.SubscibeGroup">
            <summary>
            订阅组
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.LMQ.SubscibeGroup._items">
            <summary>
            订阅项集合
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.LMQ.SubscibeGroup._itemsMonitor">
            <summary>
            订阅项集合线程锁
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.LMQ.SubscibeGroup._asynPublishParaQueueThread">
            <summary>
            异步发布消息队列线程
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.SubscibeGroup.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="topic">主题</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.SubscibeGroup.PublishThreadMethod(System.Object)">
            <summary>
            发布消息线程方法
            </summary>
            <param name="dataMessage">数据消息</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.SubscibeGroup.Publish(System.Object)">
            <summary>
            发布消息
            </summary>
            <param name="dataMessage">数据消息</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.LMQ.SubscibeGroup.Count">
            <summary>
            已订阅项数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.SubscibeGroup.Add(UtilZ.Dotnet.Ex.LMQ.SubscibeItem)">
            <summary>
            添加订阅项
            </summary>
            <param name="item">订阅项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.SubscibeGroup.Clear">
            <summary>
            清空订阅项
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.SubscibeGroup.Contains(UtilZ.Dotnet.Ex.LMQ.SubscibeItem)">
            <summary>
            是否包含订阅项
            </summary>
            <param name="item">订阅项</param>
            <returns>包含返回true,否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.SubscibeGroup.Remove(UtilZ.Dotnet.Ex.LMQ.SubscibeItem)">
            <summary>
            移除订阅项
            </summary>
            <param name="item">订阅项</param>
            <returns>移除结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.SubscibeGroup.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.SubscibeGroup.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDispose">是否释放标识</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.LMQ.SubscibeItem">
            <summary>
            订阅项
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.LMQ.SubscibeItem.MessageNotify">
            <summary>
            消息通知委托
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.LMQ.SubscibeItem.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.SubscibeItem.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="topic">主题</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.SubscibeItem.#ctor(System.String,System.Action{UtilZ.Dotnet.Ex.LMQ.SubscibeItem,System.Object})">
            <summary>
            构造函数
            </summary>
            <param name="topic">主题</param>
            <param name="messageNotify">消息通知委托</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LMQ.SubscibeItem.Publish(System.Object)">
            <summary>
            发布消息
            </summary>
            <param name="message">数据消息</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.AppenderBase">
            <summary>
            日志追加器基类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.AppenderBase.Name">
            <summary>
            日志追加器名称
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.AppenderBase._config">
            <summary>
            配置对象
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.AppenderBase.Config">
            <summary>
            获取配置对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.AppenderBase._logWriteQueue">
            <summary>
            日志写线程队列
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.AppenderBase.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.AppenderBase.#ctor(UtilZ.Dotnet.Ex.Log.BaseConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.AppenderBase.PrimitiveWriteLog(UtilZ.Dotnet.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.AppenderBase.CreateConfig(System.Xml.Linq.XElement)">
            <summary>
            创建配置对象实例
            </summary>
            <param name="ele">配置元素</param>
            <returns>配置对象实例</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.AppenderBase.WriteLog(UtilZ.Dotnet.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.AppenderBase.Validate(UtilZ.Dotnet.Ex.Log.BaseConfig,UtilZ.Dotnet.Ex.Log.LogItem)">
            <summary>
            验证日志是否允许输出[返回值true:允许输出;false:丢弃]
            </summary>
            <param name="config">配置</param>
            <param name="item">要验证输出的日志项</param>
            <returns>true:允许输出;false:丢弃</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.AppenderBase.LayoutLog(UtilZ.Dotnet.Ex.Log.LogItem)">
            <summary>
            布局一条日志文本记录
            </summary>
            <param name="item">日志信息对象</param>
            <returns>日志文本记录</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.AppenderBase.ToString">
            <summary>
            重写ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.AppenderBase.Finalize">
            <summary>
            构造函数释放非托管资源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.AppenderBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.AppenderBase.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">释放资源标识</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.ConsoleAppender">
            <summary>
            控制台日志输出追加器
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ConsoleAppender.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ConsoleAppender.#ctor(UtilZ.Dotnet.Ex.Log.BaseConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ConsoleAppender.CreateConfig(System.Xml.Linq.XElement)">
            <summary>
            创建配置对象实例
            </summary>
            <param name="ele">配置元素</param>
            <returns>配置对象实例</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ConsoleAppender.PrimitiveWriteLog(UtilZ.Dotnet.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.DatabaseAppender">
            <summary>
            数据库日志输出追加器
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.DatabaseAppender.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.DatabaseAppender.#ctor(UtilZ.Dotnet.Ex.Log.BaseConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.DatabaseAppender.CreateConfig(System.Xml.Linq.XElement)">
            <summary>
            创建配置对象实例
            </summary>
            <param name="ele">配置元素</param>
            <returns>配置对象实例</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.DatabaseAppender.PrimitiveWriteLog(UtilZ.Dotnet.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ExclusiveFileLogWriter.WriteLog(UtilZ.Dotnet.Ex.Log.FileAppenderConfig,UtilZ.Dotnet.Ex.Log.FileAppenderPathManager,System.DateTime,UtilZ.Dotnet.Ex.Log.LogMessageItem)">
            <summary>
            写日志
            </summary>
            <param name="fileAppenderConfig">配置</param>
            <param name="pathManager">路由管理器</param>
            <param name="createFilePathTime">创建时间</param>
            <param name="logMessage">日志信息项</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.FileAppender">
            <summary>
            文件日志追加器
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileAppender.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileAppender.#ctor(UtilZ.Dotnet.Ex.Log.BaseConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileAppender.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileAppender.CreateConfig(System.Xml.Linq.XElement)">
            <summary>
            创建配置对象实例
            </summary>
            <param name="ele">配置元素</param>
            <returns>配置对象实例</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileAppender.PrimitiveWriteLog(UtilZ.Dotnet.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileAppenderFixFileNameBuilder.CheckPath(System.String,System.DateTime@)">
            <summary>
            检查日志文件路径是否是有效路径[有效返回true;无效返回false]
            </summary>
            <param name="filePath"></param>
            <param name="createTime"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileAppenderPathBuilderBase.CheckPath(System.String,System.DateTime@)">
            <summary>
            检查日志文件路径是否是有效路径[有效返回true;无效返回false]
            </summary>
            <param name="filePath"></param>
            <param name="createTime"></param>
            <returns></returns>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.FileAppenderPathItem._isRealCreatePath">
            <summary>
            当前路径项是否是需要实时创建的路径[true:需要实时创建;false:固定路径]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileAppenderPathItem.CheckPath(System.String,System.DateTime@)">
            <summary>
            检查日志文件路径是否是有效路径[有效返回true;无效返回false]
            </summary>
            <param name="path"></param>
            <param name="createTime"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileAppenderVariateFileNameBuilder.ClearExpireLogFile(System.String)">
            <summary>
            清理过期的日志文件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileAppenderVariateFileNameBuilder.ValidatePath(System.String)">
            <summary>
            检查日志文件路径是否是有效路径[有效返回true;无效返回false]
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileAppenderVariateFileNameBuilder.CheckPath(System.String,System.DateTime@)">
            <summary>
            检查日志文件路径是否是有效路径[有效返回true;无效返回false]
            </summary>
            <param name="filePath"></param>
            <param name="createTime"></param>
            <returns></returns>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.FileLogWriterBase._securityPolicy">
            <summary>
            日志安全策略
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileLogWriterBase.WriteLog(UtilZ.Dotnet.Ex.Log.LogMessageItem)">
            <summary>
            写日志
            </summary>
            <param name="logMessage">日志信息项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileLogWriterBase.WriteLog(UtilZ.Dotnet.Ex.Log.FileAppenderConfig,UtilZ.Dotnet.Ex.Log.FileAppenderPathManager,System.DateTime,UtilZ.Dotnet.Ex.Log.LogMessageItem)">
            <summary>
            写日志
            </summary>
            <param name="fileAppenderConfig">配置</param>
            <param name="pathManager">路由管理器</param>
            <param name="createFilePathTime">创建时间</param>
            <param name="logMessage">日志信息项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileLogWriterBase.WriteLogToFile(UtilZ.Dotnet.Ex.Log.LogMessageItem,System.IO.StreamWriter)">
            <summary>
            写日志到文件
            </summary>
            <param name="logMessage">日志信息项</param>
            <param name="sw">StreamWriter</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileLogWriterBase.GetLogFilePath">
            <summary>
            获得日志文件路径
            </summary>
            <returns>日志文件路径</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.InterProcessFileLogWriter.WriteLog(UtilZ.Dotnet.Ex.Log.FileAppenderConfig,UtilZ.Dotnet.Ex.Log.FileAppenderPathManager,System.DateTime,UtilZ.Dotnet.Ex.Log.LogMessageItem)">
            <summary>
            写日志
            </summary>
            <param name="fileAppenderConfig">配置</param>
            <param name="pathManager">路由管理器</param>
            <param name="createFilePathTime">创建时间</param>
            <param name="logMessage">日志信息项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.InterProcessFileLogWriter.GetMutex(System.String)">
            <summary>
            获取进程锁
            </summary>
            <returns>进程锁</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.InterProcessFileLogWriter.ReleaseMutex(System.Threading.Mutex)">
            <summary>
            释放进程锁
            </summary>
            <param name="mutex">进程锁</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.MinimalFileLogWriter.WriteLog(UtilZ.Dotnet.Ex.Log.FileAppenderConfig,UtilZ.Dotnet.Ex.Log.FileAppenderPathManager,System.DateTime,UtilZ.Dotnet.Ex.Log.LogMessageItem)">
            <summary>
            写日志
            </summary>
            <param name="fileAppenderConfig">配置</param>
            <param name="pathManager">路由管理器</param>
            <param name="createFilePathTime">创建时间</param>
            <param name="logMessage">日志信息项</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.MailAppender">
            <summary>
            邮件日志输出追加器
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.MailAppender.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.MailAppender.#ctor(UtilZ.Dotnet.Ex.Log.BaseConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.MailAppender.CreateConfig(System.Xml.Linq.XElement)">
            <summary>
            创建配置对象实例
            </summary>
            <param name="ele">配置元素</param>
            <returns>配置对象实例</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.MailAppender.PrimitiveWriteLog(UtilZ.Dotnet.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.RedirectAppender">
            <summary>
            重定向日志输出追加器
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectAppender.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectAppender.#ctor(UtilZ.Dotnet.Ex.Log.BaseConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectAppender.CreateConfig(System.Xml.Linq.XElement)">
            <summary>
            创建配置对象实例
            </summary>
            <param name="ele">配置元素</param>
            <returns>配置对象实例</returns>
        </member>
        <member name="E:UtilZ.Dotnet.Ex.Log.RedirectAppender.RedirectOuput">
            <summary>
            重定向输出事件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectAppender.PrimitiveWriteLog(UtilZ.Dotnet.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.RedirectOuputArgs">
            <summary>
            重定向输出项
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectOuputArgs.#ctor(UtilZ.Dotnet.Ex.Log.LogItem)">
            <summary>
            构造函数
            </summary>
            <param name="item">日志信息项</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.RedirectOuputArgs.Item">
            <summary>
            日志信息项
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.SystemLogAppender">
            <summary>
            操作系统日志输出追加器
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.SystemLogAppender.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.SystemLogAppender.#ctor(UtilZ.Dotnet.Ex.Log.BaseConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.SystemLogAppender.CreateConfig(System.Xml.Linq.XElement)">
            <summary>
            创建配置对象实例
            </summary>
            <param name="ele">配置元素</param>
            <returns>配置对象实例</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.SystemLogAppender.PrimitiveWriteLog(UtilZ.Dotnet.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.LogAsynQueue`1">
            <summary>
            日志志属异步队列
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogAsynQueue`1._thread">
            <summary>
            异步队列线程
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogAsynQueue`1._cts">
            <summary>
            线程取消通知对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogAsynQueue`1._queue">
            <summary>
            Queue
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogAsynQueue`1._enqueueEventHandler">
            <summary>
            入队消息通知
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogAsynQueue`1._processAction">
            <summary>
            数据处理委托
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogAsynQueue`1._isDispose">
            <summary>
            是否已释放过资源[true:已释放过;false:未释放过]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogAsynQueue`1.#ctor(System.Action{`0},System.String)">
            <summary>
            构造函数
            </summary>
            <param name="processAction">数据处理委托</param>
            <param name="threadName">异步队列线程名称</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogAsynQueue`1.LogThreadMethod">
            <summary>
            线程方法
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogAsynQueue`1.Enqueue(`0)">
            <summary>
            将对象添加到队列的结尾处
            </summary>
            <param name="item">待添加的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogAsynQueue`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.LogSysInnerLog">
            <summary>
            日志系统内部日志输出类
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.Ex.Log.LogSysInnerLog.Log">
            <summary>
            内部日志事件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogSysInnerLog.OnRaiseLog(System.Object,System.Exception)">
            <summary>
            触发内部日志事件
            </summary>
            <param name="sender">事件产生者</param>
            <param name="ex">异常</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.LogUtil">
            <summary>
            日志操作公共类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogUtil._currentAssemblyDirectory">
            <summary>
            当前程序集所在目录
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogUtil.GetAttributeValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            获取节点指定特性值
            </summary>
            <param name="ele"></param>
            <param name="attriName"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogUtil.GetChildXElementValue(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            获取节点下指定名称子节点特性值
            </summary>
            <param name="ele"></param>
            <param name="childName"></param>
            <param name="attriName"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogUtil.GetType(System.String)">
            <summary>
            根据字符串信息获取程序集中的类型
            </summary>
            <param name="typeFullName">类型名称[格式:类型名,程序集命名.例如:Oracle.ManagedDataAccess.Client.OracleConnection,Oracle.ManagedDataAccess, Version=4.121.1.0, Culture=neutral, PublicKeyToken=89b483f429c47342]</param>
            <returns>实例</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogUtil.GetStackTrace(System.Int32)">
            <summary>
            获取指定层级调用堆栈(格式:[类全名.方法名].[类全名.方法名].xxx)
            </summary>
            <param name="stackCount">要获取的堆栈数</param>
            <returns>指定层级调用堆栈</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.BaseConfig">
            <summary>
            基础配置
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.BaseConfig.AppenderName">
            <summary>
            日志追加器名称
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.BaseConfig.Layout">
            <summary>
            日志布局[%d %l %e %c 堆栈:%s]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.BaseConfig.DateFormat">
            <summary>
            时间格式[yyyy-MM-dd HH:mm:ss]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.BaseConfig.LevelMap">
            <summary>
            日志级别名称映射[Info:信息;Warn:warning;...]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.BaseConfig.SeparatorCount">
            <summary>
            分隔线长度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.BaseConfig.EnableOutputCache">
            <summary>
            是否启用日志输出缓存[true:启用;false:禁用]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.BaseConfig.Enable">
            <summary>
            是否启用日志追加器
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.BaseConfig.Levels">
            <summary>
            过滤日志级别
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.BaseConfig.EventIdMin">
            <summary>
            事件ID最小值(包含该值,默认值为不限)
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.BaseConfig.EventIdMax">
            <summary>
            事件ID最大值(包含该值,默认值为不限)
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.BaseConfig.MatchString">
            <summary>
            消息匹配指定的字符串才被记录,为空或null不匹配(默认为null)
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.BaseConfig.MatchExceptionType">
            <summary>
            要记录的异常的类型为指定类型或其子类才被记录,为null不匹配(默认为null)
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.BaseConfig._levelMapDic">
            <summary>
            日志级别名称映射字典集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.BaseConfig.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.ConsoleAppenderConfig">
            <summary>
            日志追加器配置
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ConsoleAppenderConfig.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.FileAppenderConfig">
            <summary>
            日志追加器配置
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.FileAppenderConfig.Days">
            <summary>
            日志保留天数小于1表示永不清除
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.FileAppenderConfig.MaxFileCount">
            <summary>
            最多产生的日志文件数，超过则只保留最新的n个,小于1为不限文件数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.FileAppenderConfig.MaxFileSize">
            <summary>
            日志文件上限大小,当文件超过此值则分隔成多个日志文件,小于1不限制,单位/KB
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.FileAppenderConfig.MaxFileLength">
            <summary>
            获取日志单个文件最大大小,小于等于0不限制,单位/字节
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.FileAppenderConfig.FilePath">
            <summary>
            日志存放路径
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.FileAppenderConfig.IsAppend">
            <summary>
            是否追加日志
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.FileAppenderConfig.SecurityPolicy">
            <summary>
            日志安全策略,该类型为实现接口ILogSecurityPolicy的子类,必须实现Encryption方法
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.FileAppenderConfig.LockingModel">
            <summary>
            锁类模型[Exclusive,InterProcess,Minimal]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.FileAppenderConfig.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.LockingModel">
            <summary>
            锁类模型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LockingModel.Exclusive">
            <summary>
            独占
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LockingModel.InterProcess">
            <summary>
            相互写
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LockingModel.Minimal">
            <summary>
            最小,用完就关
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.RedirectAppendConfig">
            <summary>
            重定向输出日志追加器配置
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectAppendConfig.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.EmptyLoger">
            <summary>
            空日志记录器,不作任何输出
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.EmptyLoger.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.EmptyLoger.ObjectAddLog(UtilZ.Dotnet.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            静态方法添加日志的方法
            </summary>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.EmptyLoger.PrimitiveAddLog(System.Int32,UtilZ.Dotnet.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            实例添加日志
            </summary>
            <param name="skipFrames"></param>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.ILoger">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.ILoger.Name">
            <summary>
            日志记录器名称
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.ILoger.Level">
            <summary>
            获取日志级别
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.ILoger.Enable">
            <summary>
            是否启用日志追加器
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.AddAppender(UtilZ.Dotnet.Ex.Log.AppenderBase)">
            <summary>
            添加日志追加器
            </summary>
            <param name="appender">日志追加器</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.GetAppenderByName(System.String)">
            <summary>
            根据日志追加器名称获取日志追加器
            </summary>
            <param name="appenderName">日志追加器名称</param>
            <returns>日志追加器</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.GetAppenders">
            <summary>
            获取日志追加器
            </summary>
            <returns>日志追加器数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Trace(System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Trace(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Trace(System.Exception,System.Int32,System.Object)">
            <summary>
            追踪
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Trace(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Debug(System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Debug(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Debug(System.Exception,System.Int32,System.Object)">
            <summary>
            调试
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Debug(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Info(System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Info(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Info(System.Exception,System.Int32,System.Object)">
            <summary>
            信息
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Info(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Warn(System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Warn(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Warn(System.Exception,System.Int32,System.Object)">
            <summary>
            警告
            </summary>
            <param name="ex">异常警告</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="ex">异常警告</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Warn(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常警告</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Error(System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Error(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Error(System.Exception,System.Int32,System.Object)">
            <summary>
            错误
            </summary>
            <param name="ex">异常错误</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="ex">异常错误</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Error(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常错误</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Fatal(System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Fatal(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Fatal(System.Exception,System.Int32,System.Object)">
            <summary>
            致命
            </summary>
            <param name="ex">异常致命</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="ex">异常致命</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILoger.Fatal(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常致命</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.Loger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.Loger._logerDic">
            <summary>
            [key:LogerName;Value:Loger]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.#cctor">
            <summary>
            静态构造函数(初始化默认日志追加器)
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Clear">
            <summary>
            清空所有配置,包括默认
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.LoadConfig(System.String)">
            <summary>
            加载配置,加载前清空旧的配置
            </summary>
            <param name="configFilePath">配置文件路径</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.PrimitiveLoadConfig(System.Xml.Linq.XDocument)">
            <summary>
            加载配置,加载前清空旧的配置
            </summary>
            <param name="xdoc">配置文件XDocument</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.GetAppenderByName(System.String,System.String)">
            <summary>
            根据日志追加器名称获取指定日志记录器中的日志追加器
            </summary>
            <param name="logerName">日志记录器名称</param>
            <param name="appenderName">日志追加器名称</param>
            <returns>日志追加器</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.GetAppenders(System.String)">
            <summary>
            获取指定日志记录器中的日志追加器
            </summary>
            <param name="logerName">日志记录器名称</param>
            <returns>日志追加器数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.GetLoger(System.String)">
            <summary>
            获取日志记录器,如果日志记录器名称为空或null则返回默认日志记录器,否则当名称对应的日志记录器存在时返回配置的日志记录器,不存在则抛出异常
            </summary>
            <param name="logerName">日志记录器名称</param>
            <returns>日志记录器</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.AddLoger(UtilZ.Dotnet.Ex.Log.ILoger)">
            <summary>
            添加日志记录器
            </summary>
            <param name="loger">日志记录器</param>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.Loger._logDispatcherQueue">
            <summary>
            日志分发线程队列
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.ObjectAddLog(UtilZ.Dotnet.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            静态方法添加日志的方法
            </summary>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.PrimitiveAddLog(System.Int32,UtilZ.Dotnet.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            实例添加日志
            </summary>
            <param name="skipFrames"></param>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDisposing">是否释放标识</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Trace(System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Trace(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Trace(System.Exception,System.Int32,System.Object)">
            <summary>
            追踪
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Trace(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Debug(System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Debug(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Debug(System.Exception,System.Int32,System.Object)">
            <summary>
            调试
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Debug(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Info(System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Info(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Info(System.Exception,System.Int32,System.Object)">
            <summary>
            信息
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Info(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Warn(System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Warn(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Warn(System.Exception,System.Int32,System.Object)">
            <summary>
            警告
            </summary>
            <param name="ex">异常警告</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="ex">异常警告</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Warn(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常警告</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Error(System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Error(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Error(System.Exception,System.Int32,System.Object)">
            <summary>
            错误
            </summary>
            <param name="ex">异常错误</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="ex">异常错误</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Error(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常错误</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Fatal(System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Fatal(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Fatal(System.Exception,System.Int32,System.Object)">
            <summary>
            致命
            </summary>
            <param name="ex">异常致命</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="ex">异常致命</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Fatal(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常致命</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.Loger.Release">
            <summary>
            释放日志资源
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.LogerBase">
            <summary>
            日志记录器基类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogerBase._appenders">
            <summary>
            日志追加器集合
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogerBase._appendersLock">
            <summary>
            日志追加器集合线程锁
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogerBase.Name">
            <summary>
            获取日志记录器名称
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogerBase.Level">
            <summary>
            获取获取日志级别
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogerBase.Enable">
            <summary>
            是否启用日志追加器
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#AddAppender(UtilZ.Dotnet.Ex.Log.AppenderBase)">
            <summary>
            添加日志追加器
            </summary>
            <param name="appender">日志追加器</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#GetAppenderByName(System.String)">
            <summary>
            根据日志追加器名称获取日志追加器
            </summary>
            <param name="appenderName">日志追加器名称</param>
            <returns>日志追加器</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#GetAppenders">
            <summary>
            获取日志追加器
            </summary>
            <returns>日志追加器数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.InsAddLog(UtilZ.Dotnet.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            实例添加日志
            </summary>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.ObjectAddLog(UtilZ.Dotnet.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            静态方法添加日志的方法
            </summary>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.PrimitiveAddLog(System.Int32,UtilZ.Dotnet.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            实例添加日志
            </summary>
            <param name="skipFrames"></param>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常</param>
            <param name="msg">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Trace(System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Trace(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Trace(System.Exception,System.Int32,System.Object)">
            <summary>
            追踪
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Trace(System.Exception,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Trace(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Debug(System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Debug(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Debug(System.Exception,System.Int32,System.Object)">
            <summary>
            调试
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Debug(System.Exception,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Debug(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Info(System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Info(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Info(System.Exception,System.Int32,System.Object)">
            <summary>
            信息
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Info(System.Exception,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Info(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Warn(System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Warn(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Warn(System.Exception,System.Int32,System.Object)">
            <summary>
            警告
            </summary>
            <param name="ex">异常警告</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Warn(System.Exception,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="ex">异常警告</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Warn(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常警告</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Error(System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Error(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Error(System.Exception,System.Int32,System.Object)">
            <summary>
            错误
            </summary>
            <param name="ex">异常错误</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Error(System.Exception,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="ex">异常错误</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Error(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常错误</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Fatal(System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Fatal(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Fatal(System.Exception,System.Int32,System.Object)">
            <summary>
            致命
            </summary>
            <param name="ex">异常致命</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="ex">异常致命</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.UtilZ#Dotnet#Ex#Log#ILoger#Fatal(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常致命</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogerBase.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDisposing">是否释放标识</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.InnerLogOutputArgs">
            <summary>
            内部日志输出事件参数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.InnerLogOutputArgs.#ctor(System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="ex">异常</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.InnerLogOutputArgs.Ex">
            <summary>
            异常
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.LogConstant">
            <summary>
            日志常量
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogConstant.CurrentAssemblyDirectory">
            <summary>
            获取当前应用程序所在根目录
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.DEFAULT_EVENT_ID">
            <summary>
            默认事件ID
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.TRACESTR">
            <summary>
            追踪
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.DEBUGSTR">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.INFOSTR">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.WARNSTR">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.ERRORSTR">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.FATALSTR">
            <summary>
            致命
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.LOGEXTENSION">
            <summary>
            日志文件扩展名
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.LOGDATAFORMAT">
            <summary>
            日志日期格式
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.DateTimeFormat">
            <summary>
            日期格式字符串
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.WAITREPEATTIME">
            <summary>
            等待重试时间,毫秒
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogConstant.GetLogLevelName(UtilZ.Dotnet.Ex.Log.LogLevel)">
            <summary>
            获取日志等级名称
            </summary>
            <param name="level">日志级别</param>
            <returns>日志标题</returns>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.DEFAULT_CONFIG_FILE_NAME">
            <summary>
            默认配置文件名称
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.LOGCONFIG_ROOT_ELEMENT_NAME">
            <summary>
            日志配置根节点名称
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.LOGCONFIG_LOGER_ELEMENT_NAME">
            <summary>
            日志记录器配置节点名称
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.PATTERN_FALG_CHAR">
            <summary>
            通配符
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.FILE_APPENDER_PATTERN_BREIF">
            <summary>
            File
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.REDIRECT_APPENDER_PATTERN_BREIF">
            <summary>
            Redirect
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.CONSOLE_APPENDER_PATTERN_BREIF">
            <summary>
            Console
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.DATABASE_APPENDER_PATTERN_BREIF">
            <summary>
            Database
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.MAIL_APPENDER_PATTERN_BREIF">
            <summary>
            Mail
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.SYSTEM_APPENDER_PATTERN_BREIF">
            <summary>
            System
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.TIME">
            <summary>
            时间
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.LEVEL">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.EVENT">
            <summary>
            事件ID
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.TAG">
            <summary>
            与对象关联的用户定义数据
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.THREAD">
            <summary>
            线程ID
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.CONTENT">
            <summary>
            内容
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogConstant.STACKTRACE">
            <summary>
            堆栈
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.LogItem">
            <summary>
            日志信息类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogItem.#ctor(System.DateTime,System.Threading.Thread,System.Int32,System.Boolean,System.String,UtilZ.Dotnet.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="time">时间</param>
            <param name="thread">线程</param>
            <param name="skipFrames">调用堆栈跳过帧数</param>
            <param name="getStackTraceMethodParameterNameType">获取堆栈方法参数名称类型</param>
            <param name="logerName">日志记录器名称</param>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogItem._getStackTraceMethodParameterNameType">
            <summary>
            获取堆栈方法参数名称类型[true:代码方式false:系统堆栈方式(eg:List`string),默认为true]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogItem._isAnalyzed">
            <summary>
            日志项是否已分析过
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.ID">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.ThreadID">
            <summary>
            线程ID
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.ThreadName">
            <summary>
            线程名称
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.LogerName">
            <summary>
            日志记录器名称
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.EventID">
            <summary>
            事件ID
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.Tag">
            <summary>
            与对象关联的用户定义数据
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.StackTrace">
            <summary>
            调用堆栈跟踪信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.Format">
            <summary>
            复合格式字符串,参数为空或null表示无格式化
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.Args">
            <summary>
            一个对象数组，其中包含零个或多个要设置格式的对象
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.Message">
            <summary>
            完整的日志信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.Logger">
            <summary>
            日志产生类名称
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.StackTraceInfo">
            <summary>
            堆栈信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogItem.Content">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogItem.MethodParameterTypeParameterNameSpacing">
            <summary>
            方法参数类型与参数名之间的间隔
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogItem.MethodParameterSpacing">
            <summary>
            方法参数之间的间隔
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogItem.LogProcess">
            <summary>
            日志处理
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogItem.GetStackTraceInfo">
            <summary>
            获取堆栈信息字符串
            </summary>
            <returns>堆栈信息字符串</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogItem.GetMethodParamtersString(System.Reflection.ParameterInfo[])">
            <summary>
            获得方法参数字符串
            </summary>
            <param name="parameters">参数数组</param>
            <returns>方法参数字符串</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogItem.AppendGenericArgumentType(System.Text.StringBuilder,System.Type)">
            <summary>
            追加泛型类型参数类型名称
            </summary>
            <param name="sbParameter">参数StringBuilder</param>
            <param name="parameterType">参数类型</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogItem.GetTypeNameStr(System.Type)">
            <summary>
            获取类型名称字符串
            </summary>
            <param name="type">类型</param>
            <returns>类型名称字符串</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogItem.ToString">
            <summary>
            重写ToString
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogLevel.Trace">
            <summary>
            追踪[1]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogLevel.Debug">
            <summary>
            调试[2]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogLevel.Info">
            <summary>
            提示[4]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogLevel.Warn">
            <summary>
            警告[8]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogLevel.Error">
            <summary>
            错误[16]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogLevel.Fatal">
            <summary>
            致命[32]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.LogLevel.Off">
            <summary>
            关闭[100]
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.LogMessageItem">
            <summary>
            日志消息项
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogMessageItem.LogerName">
            <summary>
            日志记录器名称
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.LogMessageItem.LogMsg">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.LogMessageItem.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="logerName">日志记录器名称</param>
            <param name="logMsg">日志信息</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.RedirectOuputCenter">
            <summary>
            重定向输出中心
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.RedirectOuputCenter._logOutputThread">
            <summary>
            日志输出线程
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.RedirectOuputCenter._cts">
            <summary>
            线程取消通知对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.RedirectOuputCenter._logOutputAutoResetEvent">
            <summary>
            日志输出线程同步对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.RedirectOuputCenter._logOutputQueue">
            <summary>
            日志输出队列
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectOuputCenter.LogOutputThreadMethod(System.Object)">
            <summary>
            日志输出线程方法
            </summary>
            <param name="obj">参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectOuputCenter.LogOutput(UtilZ.Dotnet.Ex.Log.RedirectOuputItem)">
            <summary>
            日志输出
            </summary>
            <param name="logItem"></param>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.RedirectOuputCenter._logOutputSubscribeItemList">
            <summary>
            日志输出订阅项集合
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.RedirectOuputCenter._logOutputSubscribeItemListMonitor">
            <summary>
            日志输出订阅项集合线程锁
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.RedirectOuputCenter.RedirectOutputChannelArray">
            <summary>
            获取日志输出订阅项数组集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectOuputCenter.Add(UtilZ.Dotnet.Ex.Log.RedirectOutputChannel)">
            <summary>
            添加日志输出订阅项
            </summary>
            <param name="item">日志输出订阅项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectOuputCenter.Remove(UtilZ.Dotnet.Ex.Log.RedirectOutputChannel)">
            <summary>
            移除日志输出订阅项
            </summary>
            <param name="item">日志输出订阅项</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectOuputCenter.Clear">
            <summary>
            清空日志输出订阅项
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectOuputCenter.Output(System.String,UtilZ.Dotnet.Ex.Log.LogItem)">
            <summary>
            输出日志
            </summary>
            <param name="appenderName">日志追加器名称</param>
            <param name="logItem">日志项</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.RedirectOuputItem">
            <summary>
            重定向输出项
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectOuputItem.#ctor(System.String,UtilZ.Dotnet.Ex.Log.LogItem)">
            <summary>
            构造函数
            </summary>
            <param name="appenderName">日志追加器名称</param>
            <param name="item">日志信息项</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.RedirectOuputItem.AppenderName">
            <summary>
            日志追加器名称
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Log.RedirectOuputItem.Item">
            <summary>
            日志信息项
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.RedirectOutputChannel">
            <summary>
            输出日志订阅项
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.RedirectOutputChannel._logOutput">
            <summary>
            日志输出回调
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.RedirectOutputChannel._appenderName">
            <summary>
            过滤日志追加器名称,忽略大小写[空或null不作验证,其它值需要有匹配的日志追加器验证]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.RedirectOutputChannel._loggerName">
            <summary>
            日志记录器名称
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectOutputChannel.#ctor(System.Action{UtilZ.Dotnet.Ex.Log.RedirectOuputItem},System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="logOutput">日志输出回调</param>
            <param name="appenderName">过滤日志追加器名称,忽略大小写[空或null不作验证,其它值需要有匹配的日志追加器验证]</param>
            <param name="loggerName">日志记录器名称</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.RedirectOutputChannel.OnRaiseLogOutput(UtilZ.Dotnet.Ex.Log.RedirectOuputItem)">
            <summary>
            日志输出
            </summary>
            <param name="logItem">要输出的日志项</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.ILogSecurityPolicy">
            <summary>
            日志安全策略接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILogSecurityPolicy.Encryption(System.String)">
            <summary>
            加密日志消息
            </summary>
            <param name="logMsg">日志消息</param>
            <returns>加密后的日志消息</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILogSecurityPolicy.Decryption(System.String)">
            <summary>
            解密日志消息
            </summary>
            <param name="logMsg">日志消息</param>
            <returns>解密后的日志消息</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.ILogSecurityPolicy.Decryption(System.String,System.String)">
            <summary>
            解密日志
            </summary>
            <param name="srcLogFilePath">加密的日志文件路径</param>
            <param name="targetLogFilePath">解密后的日志文件路径</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Log.XSecurityPolicy">
            <summary>
            X日志安全策略类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.XSecurityPolicy._encrKey">
            <summary>
            加密key
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Log.XSecurityPolicy._rgbIV">
            <summary>
            对称加密初始化向量
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.XSecurityPolicy.Encryption(System.String)">
            <summary>
            加密日志消息
            </summary>
            <param name="logMsg">日志消息</param>
            <returns>加密后的日志消息</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.XSecurityPolicy.Decryption(System.String)">
            <summary>
            解密日志消息
            </summary>
            <param name="logMsg">日志消息</param>
            <returns>解密后的日志消息</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Log.XSecurityPolicy.Decryption(System.String,System.String)">
            <summary>
            解密日志
            </summary>
            <param name="srcLogFilePath">加密的日志文件路径</param>
            <param name="targetLogFilePath">解密后的日志文件路径</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.LRPC.LRPCChannel">
            <summary>
            远程调用通道
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.LRPC.LRPCChannel.ChannelName">
            <summary>
            本地远程调用通道名称
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.LRPC.LRPCChannel._proF">
            <summary>
            本地远程调用回调
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCChannel.OnRaiseProF(System.Object)">
            <summary>
            调用本地远程调用回调
            </summary>
            <param name="obj">调用参数</param>
            <returns>调用结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCChannel.OnRaiseProA(System.Object)">
            <summary>
            调用本地远程调用回调
            </summary>
            <param name="obj">调用参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCChannel.#ctor(System.String,System.Func{System.Object,System.Object})">
            <summary>
            构造函数
            </summary>
            <param name="channelName">本地远程调用通道名称</param>
            <param name="pro">本地远程调用回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCChannel.#ctor(System.String,System.Action{System.Object})">
            <summary>
            构造函数
            </summary>
            <param name="channelName">本地远程调用通道名称</param>
            <param name="pro">本地远程调用回调</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.LRPC.LRPCCore">
            <summary>
            本地远程调用核心
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.LRPC.LRPCCore._channelDic">
            <summary>
            远程调用Hashtable集合[key:通道名称(string);value:通道(LRPCChannel)]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCCore.TryCreateChannelF(System.String,System.Func{System.Object,System.Object})">
            <summary>
            创建本地远程调用通道[返回值:true:创建成功;false:创建失败,该通道已存在]
            </summary>
            <param name="channelName">通道名称</param>
            <param name="pro">通道回调</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCCore.TryCreateChannelA(System.String,System.Action{System.Object})">
            <summary>
            创建本地远程调用通道[返回值:true:创建成功;false:创建失败,该通道已存在]
            </summary>
            <param name="channelName">通道名称</param>
            <param name="pro">通道回调</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCCore.CreateChannelF(System.String,System.Func{System.Object,System.Object})">
            <summary>
            创建本地远程调用通道
            </summary>
            <param name="channelName">通道名称</param>
            <param name="pro">通道回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCCore.CreateChannelA(System.String,System.Action{System.Object})">
            <summary>
            创建本地远程调用通道
            </summary>
            <param name="channelName">通道名称</param>
            <param name="pro">通道回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCCore.ExistChannel(System.String)">
            <summary>
            是否存在本地远程调用通道[存在返回true;不存在返回false]
            </summary>
            <param name="channelName">通道名称</param>
            <returns>存在返回true;不存在返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCCore.GetChannelNames">
            <summary>
            获取已创建的本地远程调用通道名称列表
            </summary>
            <returns>已创建的本地远程调用通道名称列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCCore.DeleteChannel(System.String)">
            <summary>
            删除本地远程调用通道
            </summary>
            <param name="channelName">通道名称</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCCore.ClearChannel">
            <summary>
            清空所有通道
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCCore.RemoteCallF(System.String,System.Object)">
            <summary>
            本地远程调用[如果通道未创建则会抛出]NotFoundLRPCChannelException
            </summary>
            <param name="channelName">远程通道名称</param>
            <param name="obj">远程调用参数</param>
            <returns>远程调用输出结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCCore.RemoteCallA(System.String,System.Object)">
            <summary>
            本地远程调用[如果通道未创建则会抛出]NotFoundLRPCChannelException
            </summary>
            <param name="channelName">远程通道名称</param>
            <param name="obj">远程调用参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCCore.TryRemoteCallF(System.String,System.Object,System.Object@)">
            <summary>
            尝试本地远程调用[返回值:true:调用成功;false:调用失败]
            </summary>
            <param name="channelName">远程通道名称</param>
            <param name="obj">远程调用参数</param>
            <param name="result">远程调用输出结果</param>
            <returns>远程调用结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.LRPCCore.TryRemoteCallA(System.String,System.Object)">
            <summary>
            尝试本地远程调用[返回值:true:调用成功;false:调用失败]
            </summary>
            <param name="channelName">远程通道名称</param>
            <param name="obj">远程调用参数</param>
            <returns>远程调用结果</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.LRPC.NotFoundLRPCChannelException">
            <summary>
            通道不能找到异常
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.NotFoundLRPCChannelException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.LRPC.NotFoundLRPCChannelException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.ResoucesInfo.Rid">
            <summary>
            资源标识
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.ResourceTypeConstant.Message">
            <summary>
            消息数据
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.ResourceTypeConstant.ResourceData">
            <summary>
            资源数据
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.ResourceTypeConstant.ResourceStream">
            <summary>
            数据流
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.ResourceTypeConstant.ResourceFile">
            <summary>
            资源文件
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy">
            <summary>
            传输策略
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy.RemoteEP">
            <summary>
            接收数据EndPoint
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy.Priority">
            <summary>
            发送数据优先级[值越小,优先级越高]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy.MillisecondsTimeout">
            <summary>
            单次发送超时时长,单位毫秒
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy.RepeatCount">
            <summary>
            重试次数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy.#ctor(System.Net.IPEndPoint,System.Int16,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="remoteEP">接收数据EndPoint</param> 
            <param name="priority">发送数据优先级[值越小,优先级越高]</param>
            <param name="millisecondsTimeout">发送超时时长,单位毫秒[此值不应过大,否则当发方消息发送到一半时宕机,则可能出现超时时长的网络风暴]</param>
            <param name="repeatCount">重试次数,小于1不重试</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem">
            <summary>
            接收到的数据项
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem.SrcEndPoint">
            <summary>
            地址信息
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem._flag">
            <summary>
            数据标识[true:byte[]数据;false:文件]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem.Flag">
            <summary>
            获取数据标识[true:byte[]数据;false:文件]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem._data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem.Data">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem._filePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem.FilePath">
            <summary>
            获取文件路径
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem._isResourceMod">
            <summary>
            数据类型[true:资源模式;false:消息模式]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.SendDataNotifyMessage)">
            <summary>
            构造函数-消息模式
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.SendDataNotifyMessage,System.String,System.Int32)">
            <summary>
            构造函数-资源模式[数据资源-文件-流]
            </summary>
            <param name="message"></param>
            <param name="tmpDir"></param>
            <param name="threadCount"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem.InitMemoryStream(System.Int32)">
            <summary>
            初始化内存流
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem.InitFileStream(System.String,System.String)">
            <summary>
            初始化文件流
            </summary>
            <param name="dir"></param>
            <param name="fileName"></param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Transfer.Net.TransferChannel">
            <summary>
            传输通道类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferChannel._senderDic">
            <summary>
            key:RID;value:TransferSender
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferChannel.Config">
            <summary>
            获取传输配置
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferChannel.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig,System.Action{UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem})">
            <summary>
            构造函数
            </summary>
            <param name="config">网络传输配置</param>
            <param name="rev">接收函数回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferChannel.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferChannel.ProReceiveData(UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDatagramInfo)">
            <summary>
            解析收到的数据队列线程方法
            </summary>
            <param name="receiveDatagramInfo">要解析的数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferChannel.SendData(System.Byte[],UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy)">
            <summary>
            发送数据
            </summary>
            <param name="data">要发送的数据</param>
            <param name="policy">发送策略</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferChannel.SendData(System.Byte[],System.Int32,System.Int32,UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy)">
            <summary>
            发送数据
            </summary>
            <param name="data">要发送的数据</param>
            <param name="postion">发送数据在流中的起始位置</param>
            <param name="length">要发送数据长度</param>
            <param name="policy">发送策略</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferChannel.SendFile(System.String,UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy)">
            <summary>
            发送数据
            </summary>
            <param name="filePath">要发送的文件路径</param>
            <param name="policy">发送数据在流中的起始位置</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferChannel.SendFile(System.String,System.Int64,System.Int64,UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy)">
            <summary>
            发送数据
            </summary>
            <param name="filePath">要发送的文件路径</param>
            <param name="postion">发送数据在流中的起始位置</param>
            <param name="length">要发送数据长度</param>
            <param name="policy">发送策略</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferChannel.SendData(System.IO.Stream,System.Int64,System.Int64,UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy)">
            <summary>
            发送数据流
            </summary>
            <param name="stream">要发送的流</param>
            <param name="postion">发送数据在流中的起始位置</param>
            <param name="length">要发送数据长度</param>
            <param name="policy">发送策略</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferChannel.Dispose">
            <summary>
            IDisposable
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferParaAnalyze.AdjustDownMtu">
            <summary>
            下调mtu,并返回调整后的mtu
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferParaAnalyze.AdjustUpRto">
            <summary>
            上调rto,并返回调整后的rto值
            </summary>
            <returns></returns>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferParaManager._htNetParas">
            <summary>
            [key:ip;value:NetParaAnalyze]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferReqDataSchduleInfoManager.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.SendDataNotifyMessage,UtilZ.Dotnet.Ex.Base.ThreadEx[],System.Int32)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="reqDataThreads"></param>
            <param name="millisecondsTimeout">超时时长,单位毫秒</param>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferResourceManager._reqDataSchduleInfoManagerDic">
            <summary>
            [key: rid;value:UdpTransferReqDataSchduleInfoManager]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.CommonHeader.Rid">
            <summary>
            资源标识
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.CommonHeader.#ctor(System.Int16,System.Int64,System.Int32,System.Int16)">
            <summary>
            创建
            </summary>
            <param name="cmd"></param>
            <param name="timestamp"></param>
            <param name="rid"></param>
            <param name="ver"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.CommonHeader.#ctor(System.IO.BinaryReader)">
            <summary>
            解析
            </summary>
            <param name="br"></param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.MessageBase.SrcEndPoint">
            <summary>
            地址信息
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.MessageBase.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.CommonHeader)">
            <summary>
            创建
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.MessageBase.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.CommonHeader,System.Net.IPEndPoint)">
            <summary>
            解析
            </summary>
            <param name="header"></param>
            <param name="srcEndPoint"></param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.ResourceRequestMessage.ContextId">
            <summary>
            请求上下文标识
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.ResourceRequestMessage.Position">
            <summary>
            请求资源起始位置
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.ResourceRequestMessage.Size">
            <summary>
            本次请求资源部分大小
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.ResourceRequestMessage.#ctor(System.Int32,System.Int64,System.Int32)">
            <summary>
            创建
            </summary>
            <param name="rid"></param>
            <param name="position"></param>
            <param name="size"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.ResourceRequestMessage.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.CommonHeader,System.IO.BinaryReader,System.Net.IPEndPoint)">
            <summary>
            解析
            </summary>
            <param name="header"></param>
            <param name="br"></param>
            <param name="srcEndPoint"></param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.ResourceResponseMessage.ContextId">
            <summary>
            请求上下文标识
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.ResourceResponseMessage.Position">
            <summary>
            请求资源起始位置
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.ResourceResponseMessage.Size">
            <summary>
            本次请求到资源部分大小
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.ResourceResponseMessage._data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.ResourceResponseMessage.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.ResourceRequestMessage,System.Byte[])">
            <summary>
            创建
            </summary>
            <param name="req"></param>
            <param name="data"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.ResourceResponseMessage.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.CommonHeader,System.IO.BinaryReader,System.Net.IPEndPoint)">
            <summary>
            解析
            </summary>
            <param name="header"></param>
            <param name="br"></param>
            <param name="srcEndPoint"></param>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.SendDataNotifyMessage.Priority">
            <summary>
            优先级[值越小, 优先级越高]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.SendDataNotifyMessage.ResourceType">
            <summary>
            资源类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.SendDataNotifyMessage.Timeout">
            <summary>
            发送超时时长,单位毫秒
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.SendDataNotifyMessage.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.SendDataNotifyMessage.Size">
            <summary>
            资源大小
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.SendDataNotifyMessage.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.SendDataNotifyMessage.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.ResoucesInfo)">
            <summary>
            创建
            </summary>
            <param name="resoucesInfo"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.SendDataNotifyMessage.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.CommonHeader,System.IO.BinaryReader,System.Net.IPEndPoint)">
            <summary>
            解析
            </summary>
            <param name="header"></param>
            <param name="br"></param>
            <param name="srcEndPoint"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferCompletedAckMessage.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.TransferCompletedMessage)">
            <summary>
            创建
            </summary>
            <param name="transferCompletedMessage"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferCompletedAckMessage.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.CommonHeader,System.IO.BinaryReader,System.Net.IPEndPoint)">
            <summary>
            解析
            </summary>
            <param name="header"></param>
            <param name="br"></param>
            <param name="srcEndPoint"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferCompletedMessage.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.SendDataNotifyMessage)">
            <summary>
            创建
            </summary>
            <param name="sendDataNotifyMessage"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferCompletedMessage.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.CommonHeader,System.IO.BinaryReader,System.Net.IPEndPoint)">
            <summary>
            解析
            </summary>
            <param name="header"></param>
            <param name="br"></param>
            <param name="srcEndPoint"></param>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferCommands.SendNotify">
            <summary>
            数据发送通知
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferCommands.ResourceRequest">
            <summary>
            资源请求
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferCommands.ResourceResponse">
            <summary>
            资源响应
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferCommands.TransferCompleted">
            <summary>
            传输完成通知
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferCommands.TransferCompletedAck">
            <summary>
            传输完成确认
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig">
            <summary>
            传输配置
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.LocalFileDirectory">
            <summary>
            收到的文件临时存放目录
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.TransferThreadCount">
            <summary>
            传输数据线程数,最大值32,为了社会和谐建议不要大于4
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.ParseDataMaxThreadCount">
            <summary>
            解析数据最大线程数,建议值为[传输数据线程数+2]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.ProReceiveDataAddThreadTimeout">
            <summary>
            解析数据超时时长,当超过此值时,会多开一个线程用于解析
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.DetectStepLength">
            <summary>
            探测步长,默认值1024
            值建议不要太小也不要太大,因udp发包最大值为64k,如果太大则要花费更多的时间去微调到接近完美值;
            如果值太小,则探测过程要花费更长的时间
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.StepDetectCount">
            <summary>
            每一步探测次数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.MtuFineTuning">
            <summary>
            mtu微调值,不可大于探测步长值
            1).值越小多次调整后越接近完美值,但所需时间更长;
            2).值越大调整速度越快,但离完美值会有一定的偏差;
            3).建议为探测步长的三分之一
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.RtoFineTuning">
            <summary>
            rto微调值,默认值100
            1).值越小多次调整后越接近完美值,但所需时间更长;
            2).值越大调整速度越快,但离完美值会有一定的偏差;
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.RtoAmplitude">
            <summary>
            rto振幅倍数,建议1.5
            作用于rto分析的结果再乘以振幅倍数得到真正的rto分析值,如果没有此值则容易超时
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.RtoMax">
            <summary>
            rto最大值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.MtuRepeatMaxCount">
            <summary>
            同一个mtu值超时重试最大次,默认为3
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.TimeoutHeartMul">
            <summary>
            超时心跳倍数[接收检测超时时长=发送超时/(传输线程数*超时心跳倍数)],值越大,心跳检测频率越高,高优先级传输整数速度越慢
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.NetConfig">
            <summary>
            网络配置
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.Validate">
            <summary>
            验证参数有效性,验证不通过抛出异常
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig.Clone">
            <summary>
            深拷贝一份当前对象
            </summary>
            <returns>当前对象副本</returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant">
            <summary>
            传输常量定义类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.MTU_MAX">
            <summary>
            MTU最大值
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.MTU_MIN">
            <summary>
            MTU最小值
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.RTO_MIN">
            <summary>
            RTO最小值
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.DEFAULT_RTO">
            <summary>
            RTO默认值
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.PROTOCOL_VER">
            <summary>
            协议版本号
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.SYNC">
            <summary>
            同步字
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.VALID_CODE_FILL">
            <summary>
            校验码填充值
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.COMMON_HEADER_SIZE">
            <summary>
            公共头大小
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.PARALLEL_THREAD_MAX_COUN">
            <summary>
            并行传输数据最大线程数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.MESSAGE_MAX_SIZE">
            <summary>
            消息数据最大值
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.TRACE_EVENT_ID">
            <summary>
            追踪事件ID
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.DEBUG_EVENT_ID">
            <summary>
            调试事件ID
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.INFO_EVENT_ID">
            <summary>
            信息事件ID
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.WARN_EVENT_ID">
            <summary>
            警告事件ID
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.ERROR_EVENT_ID">
            <summary>
            错误事件ID
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferConstant.FATAL_EVENT_ID">
            <summary>
            致命错误事件ID
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Transfer.Net.ITransferNet">
            <summary>
            收发接口网络数据
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.ITransferNet.Status">
            <summary>
            状态[true:正常false:停止]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.ITransferNet.Init(UtilZ.Dotnet.Ex.Transfer.Net.NetConfig,System.Action{UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDatagramInfo})">
            <summary>
            初始化
            </summary>
            <param name="config">传输配置</param>
            <param name="rev">接收数据回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.ITransferNet.Start">
            <summary>
            启动接收
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.ITransferNet.Stop">
            <summary>
            停止接收
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.ITransferNet.Send(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            发送数据
            </summary>
            <param name="data">要发送的数据</param>
            <param name="remoteEP">接收数据EndPoint</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Transfer.Net.NetConfig">
            <summary>
            网络配置
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.NetConfig.TempBufferSize">
            <summary>
            接收数据临时存放空间大小,默认10MB
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.NetConfig.ReceiveBufferSize">
            <summary>
            收缓存大小,默认10MB
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.NetConfig.SendBufferSize">
            <summary>
            发送缓存大小,默认10MB
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.NetConfig.ListenEP">
            <summary>
            接收数据监听地址
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.NetConfig.Protocal">
            <summary>
            传输协议
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.NetConfig.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.NetConfig.Validate">
            <summary>
            验证配置
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDatagramInfo">
            <summary>
            接收到的数据报信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDatagramInfo.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDatagramInfo.SrcEndPoint">
            <summary>
            地址信息
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDatagramInfo.#ctor(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            构造函数
            </summary>
            <param name="data">数据</param>
            <param name="remoteEP">发送方信息</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Transfer.Net.SendDataException">
            <summary>
            发送数据异常
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.SendDataException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message">消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Transfer.Net.TransferProtocal">
            <summary>
            传输协议
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferProtocal.Udp">
            <summary>
            udp
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.TransferProtocal.Tcp">
            <summary>
            tcp
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TcpTransferChannel.#ctor(System.Net.Sockets.Socket,System.Action{UtilZ.Dotnet.Ex.Transfer.Net.TcpTransferChannel},System.Action{UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDatagramInfo},System.Action{UtilZ.Dotnet.Ex.Transfer.Net.TcpTransferChannel})">
            <summary>
            监听连接构造函数
            </summary>
            <param name="client"></param>
            <param name="clientDisconnectNotify"></param>
            <param name="rev"></param>
            <param name="idAck"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TcpTransferChannel.#ctor(System.Net.Sockets.Socket,System.Net.IPEndPoint,System.Action{UtilZ.Dotnet.Ex.Transfer.Net.TcpTransferChannel},System.Action{UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDatagramInfo})">
            <summary>
            主动建立连接构造函数
            </summary>
            <param name="client"></param>
            <param name="remoteEP"></param>
            <param name="clientDisconnectNotify"></param>
            <param name="rev"></param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TcpTransferChannel.FindTlvFirstTagPostion(System.Byte[],System.Int32,System.Int32)">
            <summary>
            找到返回亲自tag位置,失败返回-1
            </summary>
            <param name="parsePackgeBuffer"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Transfer.Net.TcpTransferNet">
            <summary>
            Tcp传输类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TcpTransferNet.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.TcpTransferNet.Status">
            <summary>
            状态[true:正常false:停止]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TcpTransferNet.Init(UtilZ.Dotnet.Ex.Transfer.Net.NetConfig,System.Action{UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDatagramInfo})">
            <summary>
            初始化
            </summary>
            <param name="config">传输配置</param>
            <param name="rev">接收数据回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TcpTransferNet.Send(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            发送数据
            </summary>
            <param name="data">要发送的数据</param>
            <param name="remoteEP">接收数据EndPoint</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TcpTransferNet.Start">
            <summary>
            启动接收
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TcpTransferNet.Stop">
            <summary>
            停止接收
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TcpTransferNet.Dispose">
            <summary>
            IDisposable
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Transfer.Net.RevDataInfo">
            <summary>
            接收到的数据信息
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.RevDataInfo.Offset">
            <summary>
            接收缓存中的偏移位置
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.RevDataInfo.Length">
            <summary>
            本次数据长度
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.Ex.Transfer.Net.RevDataInfo.RemoteEP">
            <summary>
            来源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.RevDataInfo.#ctor(System.Int32,System.Int32,System.Net.IPEndPoint)">
            <summary>
            构造函数 
            </summary>
            <param name="offset">接收缓存中的偏移位置</param>
            <param name="length">本次数据长度</param>
            <param name="remoteEP">来源</param>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Transfer.Net.UdpTransferNet">
            <summary>
            UDP传输类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.Ex.Transfer.Net.UdpTransferNet.Status">
            <summary>
            状态[true:正常false:停止]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.UdpTransferNet.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.UdpTransferNet.Init(UtilZ.Dotnet.Ex.Transfer.Net.NetConfig,System.Action{UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDatagramInfo})">
            <summary>
            初始化
            </summary>
            <param name="config">传输配置</param>
            <param name="rev">接收数据回调</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.UdpTransferNet.Start">
            <summary>
            启动接收
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.UdpTransferNet.Stop">
            <summary>
            停止接收
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.UdpTransferNet.Send(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            发送数据
            </summary>
            <param name="data">要发送的数据</param>
            <param name="remoteEP">接收数据EndPoint</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.UdpTransferNet.Dispose">
            <summary>
            IDisposable
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.Ex.Transfer.Net.TransferNet">
            <summary>
            网络传输类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferNet.#ctor(UtilZ.Dotnet.Ex.Transfer.Net.TransferConfig,System.Collections.Generic.IEnumerable{System.UInt16},System.Action{UtilZ.Dotnet.Ex.Transfer.Net.ReceiveDataItem})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferNet.SendData(System.Byte[],UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy)">
            <summary>
            发送数据
            </summary>
            <param name="data">要发送的数据</param>
            <param name="policy">发送策略</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferNet.SendData(System.Byte[],System.Int32,System.Int32,UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy)">
            <summary>
            发送数据
            </summary>
            <param name="data">要发送的数据</param>
            <param name="postion">发送数据在流中的起始位置</param>
            <param name="length">要发送数据长度</param>
            <param name="policy">发送策略</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferNet.SendFile(System.String,UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy)">
            <summary>
            发送数据
            </summary>
            <param name="filePath">要发送的文件路径</param>
            <param name="policy">发送数据在流中的起始位置</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferNet.SendFile(System.String,System.Int64,System.Int64,UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy)">
            <summary>
            发送数据
            </summary>
            <param name="filePath">要发送的文件路径</param>
            <param name="postion">发送数据在流中的起始位置</param>
            <param name="length">要发送数据长度</param>
            <param name="policy">发送策略</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferNet.SendData(System.IO.Stream,System.Int64,System.Int64,UtilZ.Dotnet.Ex.Transfer.Net.TransferPolicy)">
            <summary>
            发送数据流
            </summary>
            <param name="stream">要发送的流</param>
            <param name="postion">发送数据在流中的起始位置</param>
            <param name="length">要发送数据长度</param>
            <param name="policy">发送策略</param>
        </member>
        <member name="M:UtilZ.Dotnet.Ex.Transfer.Net.TransferNet.Dispose">
            <summary>
            IDisposable
            </summary>
        </member>
    </members>
</doc>

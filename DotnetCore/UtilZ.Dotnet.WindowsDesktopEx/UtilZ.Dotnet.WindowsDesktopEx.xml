<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UtilZ.Dotnet.WindowsDesktopEx</name>
    </assembly>
    <members>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.FontEx">
            <summary>
            字体类扩展方法类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.FontEx.GetSystemInstallFonts">
            <summary>
            如何获得系统安装字体列表
            </summary>
            <returns>系统安装字体列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.FontEx.GetSystemFontStyles">
            <summary>
            如何获得系统字体样式列表
            </summary>
            <returns>系统字体样式列表</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.ILogControl">
            <summary>
            日志控件接口
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.ILogControl.MaxItemCount">
            <summary>
            获取或设置最多显示项数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.ILogControl.IsLock">
            <summary>
            是否锁定滚动
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ILogControl.SetLogRefreshInfo(System.Int32,System.Int32)">
            <summary>
            设置日志刷新信息
            </summary>
            <param name="refreshCount">单次最大刷新日志条数</param>
            <param name="cacheCapcity">日志缓存容量,建议等于日志最大项数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ILogControl.SetStyle(UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle)">
            <summary>
            设置样式,不存在添加,存在则用新样式替换旧样式
            </summary>
            <param name="style">样式</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ILogControl.RemoveStyle(UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle)">
            <summary>
            移除样式
            </summary>
            <param name="style">样式标识</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ILogControl.ClearStyle">
            <summary>
            清空样式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ILogControl.GetStyles">
            <summary>
            获取当前所有样式数组
            </summary>
            <returns>当前所有样式数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ILogControl.GetStyleById(System.Int32)">
            <summary>
            根据样式标识ID获取样式
            </summary>
            <param name="id">样式标识ID</param>
            <returns>获取样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ILogControl.AddLog(System.String,UtilZ.Dotnet.Ex.Log.LogLevel)">
            <summary>
            添加显示日志
            </summary>
            <param name="logText">显示内容</param>
            <param name="level">日志级别</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ILogControl.AddLog(System.String,System.Int32)">
            <summary>
            添加显示日志
            </summary>
            <param name="logText">显示内容</param>
            <param name="styleId">样式标识ID</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ILogControl.Clear">
            <summary>
            清空日志
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle">
            <summary>
            日志控件显示样式类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle.ID">
            <summary>
            样式标识ID
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle.ForegroundBrush">
            <summary>
            文本前景色Brush
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle.FontSize">
            <summary>
            文本大小
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle.FontFamily">
            <summary>
            字体
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle.Name">
            <summary>
            样式名称
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle.defaultFontSize">
            <summary>
            默认字体大小
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle.#ctor(System.Int32,System.Windows.Media.Brush,System.Windows.Media.FontFamily,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="id">样式标识ID</param>
            <param name="foregroundBrush">文本前景色Brush</param>
            <param name="fontFamily">文本字体[null使用默认字体]</param>
            <param name="fontSize">文本大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle.#ctor(System.Int32,System.Windows.Media.Color,System.String,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="id">样式标识ID</param>
            <param name="foreground">文本前景色</param>
            <param name="fontName">文本字体名称[null使用默认字体]</param>
            <param name="fontSize">文本大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle.#ctor(UtilZ.Dotnet.Ex.Log.LogLevel,System.Windows.Media.Color,System.String,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="level">日志级别</param>
            <param name="foreground">文本前景色</param>
            <param name="fontName">文本字体名称[null使用默认字体]</param>
            <param name="fontSize">文本大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle.#ctor(System.Int32,System.Drawing.Color,System.String,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="id">样式标识ID</param>
            <param name="foreground">文本前景色</param>
            <param name="fontName">文本字体名称[null使用默认字体]</param>
            <param name="fontSize">文本大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle.#ctor(UtilZ.Dotnet.Ex.Log.LogLevel,System.Drawing.Color,System.String,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="level">日志级别</param>
            <param name="foreground">文本前景色</param>
            <param name="fontName">文本字体名称[null使用默认字体]</param>
            <param name="fontSize">文本大小</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle.GetFontFamily(System.String)">
            <summary>
            获取字体
            </summary>
            <param name="fontName">文本字体名称</param>
            <returns>字体</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.ImageEx">
            <summary>
            图片扩展类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ImageEx.ChangeImageOpacity(System.String,System.String,System.Byte)">
            <summary>
            改变图片的透明度
            </summary>
            <param name="srcImgFilePath">原图片路径</param>
            <param name="targetImgFilePath">处理后的图片存放路径</param>
            <param name="opacity">透明度，默认值为125</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ImageEx.ChangeImageOpacity(System.Drawing.Image,System.Byte)">
            <summary>
            改变图片的透明度
            </summary>
            <param name="image">目标图片</param>
            <param name="opacity">透明度，默认值为125</param>
            <returns>修改透明度之后的图片</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ImageEx.ChangeImageOpacity_bk2(System.Drawing.Image,System.Byte)">
            <summary>
            改变图片的透明度
            </summary>
            <param name="image">目标图片</param>
            <param name="opacity">透明度，默认值为125</param>
            <returns>修改透明度之后的图片</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ImageEx.ChangeImageOpacity_bk(System.Drawing.Image,System.Byte)">
            <summary>
            改变图片的透明度
            </summary>
            <param name="image">目标图片</param>
            <param name="opacity">透明度，默认值为125</param>
            <returns>修改透明度之后的图片</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3">
            <summary>
            执行异步等待基类
            </summary>
            <typeparam name="T">异步执行参数类型</typeparam>
            <typeparam name="TContainer">容器控件类型</typeparam>
            <typeparam name="TResult">异步执行返回值类型</typeparam>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3._asynExcuteThread">
            <summary>
            异步执行线程
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3._asynExcuteThreadCts">
            <summary>
            异步执行线程取消对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3._asynWaitPara">
            <summary>
            异步等待执行参数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3._excuteCompleted">
            <summary>
            是否已执行完成
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3.Tag">
            <summary>
            获取包含有关控件的数据的对象
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3.Excute(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{`0,`2},`1)">
            <summary>
            执行异步委托
            </summary>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3.AssertIAsynWait(System.Type,System.Type)">
            <summary>
            断言对象类型是IAsynWait和UserControl的子类对象类型
            </summary>
            <param name="value">要断言的对象类型</param>
            <param name="asynControlType">异步等待控件基类型</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3.CreateAsynWaitShadeControl(System.Type,UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs)">
            <summary>
            根据异步等待遮罩层类型创建遮罩层
            </summary>
            <param name="shadeType">异步等待遮罩层类</param>
            <param name="para">异步等待UI参数</param>
            <returns>异步等待遮罩层类型创建遮罩层</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3.StartAsynExcuteThread">
            <summary>
            启动执行线程
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3.AsynExcuteThreadMethod">
            <summary>
            UI异步执行线程方法
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3.CancellExcute(System.Object,System.EventArgs)">
            <summary>
            取消执行
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3.Cancell">
            <summary>
            取消执行
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3.PrimitiveCancell(System.Boolean)">
            <summary>
            取消执行
            </summary>
            <param name="abortThread"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3.ReleaseResource">
            <summary>
            释放异步委托资源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3.PrimitiveReleseResource">
            <summary>
            释放异步委托资源
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3._isDisposed">
            <summary>
            是否释放标识
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3.Dispose">
            <summary>
            资源释放 
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteAbs`3.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDispose">是否释放标识</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteBase`3">
            <summary>
            执行异步等待基类
            </summary>
            <typeparam name="T">异步执行参数类型</typeparam>
            <typeparam name="TContainer">容器控件类型</typeparam>
            <typeparam name="TResult">异步执行返回值类型</typeparam>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteBase`3._asynExcuteThread">
            <summary>
            异步执行线程
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteBase`3._asynExcuteThreadCts">
            <summary>
            异步执行线程取消对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteBase`3._asynWaitPara">
            <summary>
            异步等待执行参数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteBase`3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteBase`3.Excute(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{`0,`2},`1)">
            <summary>
            执行异步委托
            </summary>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteBase`3.AssertIAsynWait(System.Type,System.Type)">
            <summary>
            断言对象类型是IAsynWait和UserControl的子类对象类型
            </summary>
            <param name="value">要断言的对象类型</param>
            <param name="asynControlType">异步等待控件基类型</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteBase`3.CreateAsynWaitShadeControl(System.Type,UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara)">
            <summary>
            根据异步等待遮罩层类型创建遮罩层
            </summary>
            <param name="shadeType">异步等待遮罩层类</param>
            <param name="para">异步等待UI参数</param>
            <returns>异步等待遮罩层类型创建遮罩层</returns>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteBase`3._isDisposed">
            <summary>
            是否释放标识
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteBase`3.Dispose">
            <summary>
            资源释放 
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteBase`3.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDispose">是否释放标识</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteFactoryBase">
            <summary>
            异步执行对象创建工厂基类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteFactoryBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Excute.PartAsynExcuteFactoryBase.CreateExcute``3">
            <summary>
            创建异步执行对象
            </summary>
            <typeparam name="T">异步执行参数类型</typeparam>
            <typeparam name="TContainer">容器控件类型</typeparam>
            <typeparam name="TResult">异步执行返回值类型</typeparam>
            <returns>异步执行对象</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Interface.IAsynExcuteCancell">
            <summary>
            异常执行取消接口
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Interface.IAsynExcuteCancell.Tag">
            <summary>
            获取包含有关控件的数据的对象
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Interface.IAsynExcuteCancell.Cancell">
            <summary>
            取消执行
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Interface.IAsynExcute`3">
            <summary>
            执行异步等待接口
            </summary>
            <typeparam name="T">异步执行参数类型</typeparam>
            <typeparam name="TContainer">容器控件类型</typeparam>
            <typeparam name="TResult">异步执行返回值类型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Interface.IAsynExcute`3.Excute(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{`0,`2},`1)">
            <summary>
            执行异步委托
            </summary>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynExcuteResult`2">
            <summary>
            异步等待执行结果
            </summary>
            <typeparam name="T">异步执行参数类型</typeparam>
            <typeparam name="TResult">异步执行返回值类型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynExcuteResult`2.#ctor(`0,UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynExcuteStatus,`1,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="para">异步执行参数</param>
            <param name="status">结果状态</param>
            <param name="result">异步执行返回值</param>
            <param name="exception">当执行异步委托出现异常时的异常信息</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynExcuteResult`2.Para">
            <summary>
            异步执行参数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynExcuteResult`2.Status">
            <summary>
            结果状态
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynExcuteResult`2.Result">
            <summary>
            异步执行返回值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynExcuteResult`2.Exception">
            <summary>
            当执行异步委托出现异常时的异常信息
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynExcuteStatus">
            <summary>
            异步等待执行结果状态
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynExcuteStatus.Completed">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynExcuteStatus.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynExcuteStatus.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara">
            <summary>
            异步等待UI参数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara._monitor">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara._isLock">
            <summary>
            当前对象是否锁住
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara.Islock">
            <summary>
            获取当前对象是否锁住
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara.Lock">
            <summary>
            锁住参数对象[true:锁成功;false:锁失败]
            </summary>
            <returns>锁结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara.UnLock">
            <summary>
            解锁参数对象[true:解锁成功;false:解锁失败]
            </summary>
            <returns>解锁结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara.AssetLock">
            <summary>
            断言当前对象被锁住
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara.SyncRoot">
            <summary>
            线程同步对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara._asynWait">
            <summary>
            一个异步等待
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara.AsynWait">
            <summary>
            获取或设置一个异步等待
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara._caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara.Caption">
            <summary>
            获取或设置标题
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara._hint">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara.Hint">
            <summary>
            获取或设置提示信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara.IsShowCancel">
            <summary>
            获取或设置是否显示取消按钮
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIPara.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIParaProxy">
            <summary>
            PartAsynUIPara类代理
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIParaProxy.SetAsynWait(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs,UtilZ.Dotnet.Ex.Base.IPartAsynWait)">
            <summary>
            设置一个异步等待
            </summary>
            <param name="partAsynUIPara">异步等待UI参数</param>
            <param name="asynWait">异步等待</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIParaProxy.Lock(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs)">
            <summary>
            锁住参数对象[true:锁成功;false:锁失败]
            </summary>
            <param name="partAsynUIPara">异步等待UI参数</param>
            <returns>锁结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynUIParaProxy.UnLock(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs)">
            <summary>
            解锁参数对象[true:解锁成功;false:解锁失败]
            </summary>
            <param name="partAsynUIPara">异步等待UI参数</param>
            <returns>解锁结果</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara`2">
            <summary>
            异步等待执行参数
            </summary>
            <typeparam name="T">异步执行参数类型</typeparam>
            <typeparam name="TResult">异步执行返回值类型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara`2._asynWaitBackground">
            <summary>
            异步等待框背景色
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara`2.AsynWaitBackground">
            <summary>
            获取或设置异步等待框背景色
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara`2._para">
            <summary>
            异步委托执行参数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara`2.Para">
            <summary>
            获取或设置异步委托执行参数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara`2._function">
            <summary>
            要执行的操作
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara`2.Function">
            <summary>
            获取或设置要执行的操作
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara`2._completed">
            <summary>
            执行完成后通知
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara`2.Completed">
            <summary>
            获取或设置执行完成后通知
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs">
            <summary>
            异步等待UI参数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs._monitor">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs._isLock">
            <summary>
            当前对象是否锁住
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs.Islock">
            <summary>
            获取当前对象是否锁住
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs.Lock">
            <summary>
            锁住参数对象[true:锁成功;false:锁失败]
            </summary>
            <returns>锁结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs.UnLock">
            <summary>
            解锁参数对象[true:解锁成功;false:解锁失败]
            </summary>
            <returns>解锁结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs.AssetLock">
            <summary>
            断言当前对象被锁住
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs.SyncRoot">
            <summary>
            线程同步对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs._asynWait">
            <summary>
            一个异步等待
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs.AsynWait">
            <summary>
            获取或设置一个异步等待
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs._caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs.Caption">
            <summary>
            获取或设置标题
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs._hint">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs.Hint">
            <summary>
            获取或设置提示信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs.IsShowCancel">
            <summary>
            获取或设置是否显示取消按钮
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs.CancelAbort">
            <summary>
            取消执行是否强制终止线程[true:终止线程;false:回调函数内部根据取消通知标识自行处理取消]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs.Tag">
            <summary>
            获取或设置包含有关控件的数据的对象
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitParaAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.PartAsynWaitHelperBase">
            <summary>
            异步等待器基类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.PartAsynWaitHelperBase.ParaValidate``2(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{``0,``1},System.Object)">
            <summary>
            参数验证
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="asynWaitPara"></param>
            <param name="containerControl"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.PartAsynWaitHelperBase.Wait``3(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{``0,``2},``1,UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Interface.IAsynExcute{``0,``1,``2})">
             <summary>
             异步等待
             </summary>
             <typeparam name="T">异步执行参数类型</typeparam>
             <typeparam name="TContainer">容器控件类型</typeparam>
             <typeparam name="TResult">异步执行返回值类型</typeparam>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
            <param name="asynExcute">异步等待UI</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.PartAsynWaitHelperBase.Wait``3(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{``0,``2},``1,UtilZ.Dotnet.Ex.Base.IPartAsynWait,UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Interface.IAsynExcute{``0,``1,``2})">
             <summary>
             异步等待
             </summary>
             <typeparam name="T">异步执行参数类型</typeparam>
             <typeparam name="TContainer">容器控件类型</typeparam>
             <typeparam name="TResult">异步执行返回值类型</typeparam>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
            <param name="asynWait">异步等待UI</param>
            <param name="asynExcute">异步执行</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.PartAsynWaitHelperBase.Cancel``2(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{``0,``1})">
            <summary>
            取消一个异常等待
            </summary>
            <param name="asynWaitPara">异步等待参数</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.ProcessExHelper">
            <summary>
            进程扩展方法
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.RegistryKeyEx">
            <summary>
            注册表操作类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.RegistryKeyEx.OpeBaseKey(Microsoft.Win32.RegistryHive)">
            <summary>
            打开注册表
            </summary>
            <param name="registryHive">注册表巢类型</param>
            <returns>打开的注册表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.RegistryKeyEx.SetAutoRun(System.String,System.Boolean)">
            <summary>
            设置开机自启动
            </summary>
            <param name="filePath">程序路径</param>
            <param name="isAutoRun">true开机启动/false删除开机启动</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.RegistryKeyEx.SetAutoLogin(System.String,System.String)">
            <summary>
            设置开机自动登录
            </summary>
            <param name="userName">系统登录用户名</param>
            <param name="password">系统登录密码</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.RegistryKeyEx.SetNotEventTrace(System.Int32)">
            <summary>
            异常关机（断电重启）以后是否出现关闭事件跟踪程序
            </summary>
            <param name="value">0:不出现关闭事件跟踪程序,1:出现关闭事件跟踪程序</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.RegistryKeyEx.CloseRegistryKey(Microsoft.Win32.RegistryKey)">
            <summary>
            关闭注册表
            </summary>
            <param name="key">要关闭的注册表键</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenHelper">
            <summary>
            屏幕辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenHelper.GetTaskbarArea">
            <summary>
            获取任务栏区域
            </summary>
            <returns>任务栏区域</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenHelper.GetWorkingArea(System.Int32)">
            <summary>
            获取工作区域
            </summary>
            <param name="offset">宽度和调度偏移量,因为按照系统API值计算出的结果比实际屏幕显示区域要大,原因不明,以后有空研究通了再去年此参数,现在使用默认值即可,不合理可调整</param>
            <returns>工作区域</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenArea">
            <summary>
            区域区域信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenArea.Width">
            <summary>
            区域宽度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenArea.Height">
            <summary>
            区域高度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenArea.Orientation">
            <summary>
            区域所在屏幕方向
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenArea.X">
            <summary>
            在屏幕中的X坐标
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenArea.Y">
            <summary>
            在屏幕中的Y坐标
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenArea.#ctor(System.Int32,System.Int32,UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenAreaOrientation,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="width">区域宽度</param>
            <param name="height">区域高度</param>
            <param name="orientation">区域所在屏幕方向</param>
            <param name="x">在屏幕中的X坐标</param>
            <param name="y">在屏幕中的Y坐标</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenAreaOrientation">
            <summary>
            任务栏所在方向
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenAreaOrientation.Top">
            <summary>
            顶端
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenAreaOrientation.Bottom">
            <summary>
            底部
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenAreaOrientation.Left">
            <summary>
            左部
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Base.ScreenAreaOrientation.Right">
            <summary>
            右部
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.Shortcut">
            <summary>
            创建快捷方式及关联程序和分享关联程序
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.Shortcut.AssociateWithFile(System.String,System.String,System.String)">
            <summary>
            使本程序与文件类型关联
            </summary>
            <param name="fileTypeName">文件类型名</param>
            <param name="fileExtension">文件扩展名</param>
            <param name="associateAppPath">安装程序路径</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.Shortcut.DisassocateWithFile(System.String,System.String)">
            <summary>
            分离本程序与文件类型的关联
            </summary>
            <param name="fileTypeName">文件类型名</param>
            <param name="fileExtension">文件扩展名</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.UITextHelper">
            <summary>
            UI文本辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.UITextHelper.MeasureTextSize(System.Windows.Controls.TextBlock,System.Windows.FlowDirection)">
            <summary>
            测量字符串长度
            </summary>
            <param name="textBlock">TextBlock</param>
            <param name="flowDirection">测量方向</param>
            <returns>符串长度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.UITextHelper.MeasureTextSize(System.Windows.Controls.TextBox,System.Windows.FlowDirection)">
            <summary>
            测量字符串长度
            </summary>
            <param name="textBox">TextBox</param>
            <param name="flowDirection">测量方向</param>
            <returns>符串长度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.UITextHelper.MeasureTextSize(System.Windows.Controls.Label,System.Windows.FlowDirection)">
            <summary>
            测量字符串长度
            </summary>
            <param name="label">label</param>
            <param name="flowDirection">测量方向</param>
            <returns>符串长度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.UITextHelper.MeasureTextSize(System.String,System.Windows.Media.Typeface,System.Double,System.Windows.Media.Brush)">
            <summary>
            测量字符串长度
            </summary>
            <param name="text">要测量的文本</param>
            <param name="typeface">字符样式组合</param>
            <param name="fontSize">字体大小</param>
            <param name="foreground">字体Brush</param>
            <returns>符串长度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.UITextHelper.MeasureTextSize(System.String,System.Globalization.CultureInfo,System.Windows.Media.Typeface,System.Windows.FlowDirection,System.Double,System.Windows.Media.Brush,System.Windows.Media.NumberSubstitution,System.Windows.Media.TextFormattingMode)">
            <summary>
            测量字符串长度
            </summary>
            <param name="text">要测量的文本</param>
            <param name="cultureInfo">区域信息</param>
            <param name="typeface">字符样式组合</param>
            <param name="flowDirection">测量方向</param>
            <param name="fontSize">字体大小</param>
            <param name="foreground">字体Brush</param>
            <param name="numberSubstitution">要应用于文本的数字替换行为</param>
            <param name="textFormattingMode">要应用于文本的 System.Windows.Media.TextFormattingMode</param>
            <returns>符串长度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.UITextHelper.MeasureTextSize(System.Windows.Media.GlyphTypeface,System.Double,System.String)">
            <summary>
            Fast text size calculation
            </summary>
            <param name="glyphTypeface">The glyph typeface.</param>
            <param name="sizeInEm">The size.</param>
            <param name="text">The text.</param>
            <returns>The text size.</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper">
            <summary>
            窗口帮助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.FindWindow(System.String,System.String)">
            <summary>
            Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.
            To search child windows, beginning with a specified child window, use the FindWindowEx function.
            If the lpWindowName parameter is not NULL, FindWindow calls the GetWindowText function to retrieve the window name for comparison. For a description of a potential problem that can arise, see the Remarks for GetWindowText.
            </summary>
            <param name="lpClassName">The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero.
            If lpClassName points to a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names.
            If lpClassName is NULL, it finds any window whose title matches the lpWindowName parameter.</param>
            <param name="lpWindowName">The window name (the window's title). If this parameter is NULL, all window names match</param>
            <returns>Type:
            Type: HWND
            If the function succeeds, the return value is a handle to the window that has the specified class name and window name.
            If the function fails, the return value is NULL.To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
            Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.
            If the lpszWindow parameter is not NULL, FindWindowEx calls the GetWindowText function to retrieve the window name for comparison. For a description of a potential problem that can arise, see the Remarks section of GetWindowText.
            An application can call this function in the following way.
            FindWindowEx(NULL, NULL, MAKEINTATOM(0x8000), NULL );
            Note that 0x8000 is the atom for a menu class. When an application calls this function, the function checks whether a context menu is being displayed that the application created.
            </summary>
            <param name="hwndParent">A handle to the parent window whose child windows are to be searched.
            If hwndParent is NULL, the function uses the desktop window as the parent window.The function searches among windows that are child windows of the desktop.
            If hwndParent is HWND_MESSAGE, the function searches all message-only windows.</param>
            <param name="hwndChildAfter">A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of hwndParent, not just a descendant window.
            If hwndChildAfter is NULL, the search begins with the first child window of hwndParent.
            Note that if both hwndParent and hwndChildAfter are NULL, the function searches all top-level and message-only windows</param>
            <param name="lpszClass">The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be placed in the low-order word of lpszClass; the high-order word must be zero.
            If lpszClass is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names, or it can be MAKEINTATOM(0x8000). In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic</param>
            <param name="lpszWindow">The window name (the window's title). If this parameter is NULL, all window names match.</param>
            <returns>ype:
            Type: HWND
             If the function succeeds, the return value is a handle to the window that has the specified class and window names.
             If the function fails, the return value is NULL.To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.SHChangeNotify(System.Int32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            刷新系统缓存图标
            Notifies the system of an event that an application has performed. An application should use this function if it performs an action that may affect the Shell. 
            </summary>
            <param name="wEventId">Describes the event that has occurred. Typically, only one event is specified at a time. If more than one event is specified, the values contained in the dwItem1 and dwItem2 parameters must be the same, respectively, for all specified events. This parameter can be one or more of the following values. </param>
            <param name="uFlags">Flags that indicate the meaning of the dwItem1 and dwItem2 parameters. The uFlags parameter must be one of the following values.</param>
            <param name="dwItem1">First event-dependent value. </param>
            <param name="dwItem2">Second event-dependent value.</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
            <summary>
            根据句柄查询该句柄对应的进程ID
            </summary>
            <param name="hwnd">应用程序句柄</param>
            <param name="processId">进程ID</param>
            <returns>创建窗口的线程ID</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.FlashWindow(System.IntPtr,System.Boolean)">
            <summary>
            最小化窗口在任务栏闪烁一次
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="bInvert">true:表示窗口从一个状态闪烁到另一个状态;false:表示窗口恢复到初始状态（可能是激活的也可能是非激活的）</param>
            <returns>表示调用FlashWindow函数之前窗口的活动状态，若指定窗口在调用函数之前是激活的，那么返回非零值，否则返回零值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.Create_FLASHWINFO(System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            创建窗口闪烁对象信息
            </summary>
            <param name="handle">窗口够本</param>
            <param name="flags">The Flash Status.</param>
            <param name="count">次数</param>
            <param name="timeout">The rate at which the Window is to be flashed, in milliseconds. If Zero, the function uses the default cursor blink rate.</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.Flash(System.IntPtr)">
            <summary>
            任务栏窗口闪烁直到该窗口接收到焦点为止
            </summary>
            <param name="hwnd">窗口句柄</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.Flash(System.IntPtr,System.UInt32)">
            <summary>
            Flash the specified Window (form) for the specified number of times
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="count">闪烁次数</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.Start(System.IntPtr)">
            <summary>
            Start Flashing the specified Window (form)
            </summary>
            <param name="hwnd">窗口句柄</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.Stop(System.IntPtr)">
            <summary>
            Stop Flashing the specified Window (form)
            </summary>
            <param name="hwnd">窗口句柄</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.WindowFadeInOut(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            窗口淡入淡出
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="dwTime">动画持续时间</param>
            <param name="dwFlags">动画类型(WindowAnimateType中的值按位枚举运算)</param>
            <returns>结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.WindowFadeIn(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            窗口淡入
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="dwTime">动画持续时间</param>
            <param name="dwFlags">动画类型(WindowAnimateType中的值按位枚举运算)</param>
            <returns>结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.WindowFadeOut(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            窗口淡出
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="dwTime">动画持续时间</param>
            <param name="dwFlags">动画类型(WindowAnimateType中的值按位枚举运算)</param>
            <returns>结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
            设置应用程序的父窗口
            </summary>
            <param name="hWndChild">子窗口句柄</param>
            <param name="hWndNewParent">父窗口句柄</param>
            <returns>long</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.SetWindowLong(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            移除应用启动的程序窗口边框
            </summary>
            <param name="hwnd">要移除边框的应用程序句柄</param>
            <param name="nIndex">索引</param>
            <param name="dwNewLong">边框值</param>
            <returns>long</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            移动应用程序窗口位置
            </summary>
            <param name="hwnd">程序窗口句柄</param>
            <param name="x">x坐标</param>
            <param name="y">y坐标</param>
            <param name="cx">宽度</param>
            <param name="cy">高度</param>
            <param name="repaint">是否修正</param>
            <returns>bool</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.SetThreadAffinityMask(System.IntPtr,System.UIntPtr)">
            <summary>
            指定hThread运行在核心dwThreadAffinityMask
            </summary>
            <param name="hThread">线程句柄</param>
            <param name="dwThreadAffinityMask">CPU核心编号</param>
            <returns>设置结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Base.WindowHelper.GetCurrentThread">
            <summary>
            得到当前线程的句柄
            </summary>
            <returns>当前线程的句柄</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.AsynWait.AsynExcuteCancellHelper">
            <summary>
            正在执行的IPartAsynWait辅助类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.AsynWait.AsynExcuteCancellHelper.Enable">
            <summary>
            获取或设置启用异步执行取消
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.AsynWait.AsynExcuteCancellHelper.CancellAll">
            <summary>
            取消全部执行
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.AsynWait.AsynExcuteCancellHelper.CancellAll(System.Func{System.Object,System.Boolean})">
            <summary>
            取消执行符合条件的部分
            </summary>
            <param name="condition">匹配条件回调,返回true时取消,false忽略</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.AsynWait.AsynExcuteCancellHelper.PrimitiveCancellAll(System.Func{System.Object,System.Boolean})">
            <summary>
            取消执行符合条件的部分
            </summary>
            <param name="condition">匹配条件回调,返回true时取消,false忽略</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_ECHO_REPLY">
            <summary>
            ICMP_ECHO_REPLY
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_ECHO_REPLY.Address">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_ECHO_REPLY.Status">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_ECHO_REPLY.RoundTripTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_ECHO_REPLY.DataSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_ECHO_REPLY.Reserved">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_ECHO_REPLY.DataPtr">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_ECHO_REPLY.Options">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_ECHO_REPLY.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_OPTIONS">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_OPTIONS.Ttl">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_OPTIONS.Tos">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_OPTIONS.Flags">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_OPTIONS.OptionsSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.ICMP_OPTIONS.OptionsData">
            <summary>
            
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods">
            <summary>
            系统win32方法
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.FindWindow(System.String,System.String)">
            <summary>
            Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.
            To search child windows, beginning with a specified child window, use the FindWindowEx function.
            If the lpWindowName parameter is not NULL, FindWindow calls the GetWindowText function to retrieve the window name for comparison. For a description of a potential problem that can arise, see the Remarks for GetWindowText.
            </summary>
            <param name="lpClassName">The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero.
            If lpClassName points to a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names.
            If lpClassName is NULL, it finds any window whose title matches the lpWindowName parameter.</param>
            <param name="lpWindowName">The window name (the window's title). If this parameter is NULL, all window names match</param>
            <returns>Type:
            Type: HWND
            If the function succeeds, the return value is a handle to the window that has the specified class name and window name.
            If the function fails, the return value is NULL.To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
            Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.
            If the lpszWindow parameter is not NULL, FindWindowEx calls the GetWindowText function to retrieve the window name for comparison. For a description of a potential problem that can arise, see the Remarks section of GetWindowText.
            An application can call this function in the following way.
            FindWindowEx(NULL, NULL, MAKEINTATOM(0x8000), NULL );
            Note that 0x8000 is the atom for a menu class. When an application calls this function, the function checks whether a context menu is being displayed that the application created.
            </summary>
            <param name="hwndParent">A handle to the parent window whose child windows are to be searched.
            If hwndParent is NULL, the function uses the desktop window as the parent window.The function searches among windows that are child windows of the desktop.
            If hwndParent is HWND_MESSAGE, the function searches all message-only windows.</param>
            <param name="hwndChildAfter">A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of hwndParent, not just a descendant window.
            If hwndChildAfter is NULL, the search begins with the first child window of hwndParent.
            Note that if both hwndParent and hwndChildAfter are NULL, the function searches all top-level and message-only windows</param>
            <param name="lpszClass">The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be placed in the low-order word of lpszClass; the high-order word must be zero.
            If lpszClass is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names, or it can be MAKEINTATOM(0x8000). In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic</param>
            <param name="lpszWindow">The window name (the window's title). If this parameter is NULL, all window names match.</param>
            <returns>ype:
            Type: HWND
             If the function succeeds, the return value is a handle to the window that has the specified class and window names.
             If the function fails, the return value is NULL.To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.SHChangeNotify(System.Int32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            刷新系统缓存图标
            Notifies the system of an event that an application has performed. An application should use this function if it performs an action that may affect the Shell. 
            </summary>
            <param name="wEventId">Describes the event that has occurred. Typically, only one event is specified at a time. If more than one event is specified, the values contained in the dwItem1 and dwItem2 parameters must be the same, respectively, for all specified events. This parameter can be one or more of the following values. </param>
            <param name="uFlags">Flags that indicate the meaning of the dwItem1 and dwItem2 parameters. The uFlags parameter must be one of the following values.</param>
            <param name="dwItem1">First event-dependent value. </param>
            <param name="dwItem2">Second event-dependent value.</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
            <summary>
            根据句柄查询该句柄对应的进程ID
            </summary>
            <param name="hwnd">应用程序句柄</param>
            <param name="processId">进程ID</param>
            <returns>创建窗口的线程ID</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.FlashWindow(System.IntPtr,System.Boolean)">
            <summary>
            最小化窗口在任务栏闪烁一次
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="bInvert">true:表示窗口从一个状态闪烁到另一个状态;false:表示窗口恢复到初始状态（可能是激活的也可能是非激活的）</param>
            <returns>表示调用FlashWindow函数之前窗口的活动状态，若指定窗口在调用函数之前是激活的，那么返回非零值，否则返回零值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.FlashWindowEx(UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.FLASHWINFO@)">
            <summary>
            进程无焦点时，任务栏最小化窗口闪烁
            </summary>
            <param name="pwfi">窗口闪烁信息</param>
            <returns>返回调用 FlashWindowEx 函数之前指定窗口状态。如果调用之前窗口标题是活动的，返回值为非零值</returns>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.FLASHW_STOP">
            <summary>
            Stop flashing. The system restores the window to its original stae.
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.FLASHW_CAPTION">
            <summary>
            Flash the window caption.
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.FLASHW_TRAY">
            <summary>
            Flash the taskbar button.
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.FLASHW_ALL">
            <summary>
            Flash both the window caption and taskbar button.
            This is equivalent to setting the FLASHW_CAPTION | FLASHW_TRAY flags.
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.FLASHW_TIMER">
            <summary>
            Flash continuously, until the FLASHW_STOP flag is set.
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.FLASHW_TIMERNOFG">
            <summary>
            Flash continuously until the window comes to the foreground.
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.Win2000OrLater">
            <summary>
            A boolean value indicating whether the application is running on Windows 2000 or later.
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.Create_FLASHWINFO(System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            创建窗口闪烁对象信息
            </summary>
            <param name="handle">窗口够本</param>
            <param name="flags">The Flash Status.</param>
            <param name="count">次数</param>
            <param name="timeout">The rate at which the Window is to be flashed, in milliseconds. If Zero, the function uses the default cursor blink rate.</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.Flash(System.IntPtr)">
            <summary>
            任务栏窗口闪烁直到该窗口接收到焦点为止
            </summary>
            <param name="hwnd">窗口句柄</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.Flash(System.IntPtr,System.UInt32)">
            <summary>
            Flash the specified Window (form) for the specified number of times
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="count">闪烁次数</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.Start(System.IntPtr)">
            <summary>
            Start Flashing the specified Window (form)
            </summary>
            <param name="hwnd">窗口句柄</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.Stop(System.IntPtr)">
            <summary>
            Stop Flashing the specified Window (form)
            </summary>
            <param name="hwnd">窗口句柄</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.WindowFadeInOut(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            窗口淡入淡出
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="dwTime">动画持续时间</param>
            <param name="dwFlags">动画类型(WindowAnimateType中的值按位枚举运算)</param>
            <returns>结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.WindowFadeIn(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            窗口淡入
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="dwTime">动画持续时间</param>
            <param name="dwFlags">动画类型(WindowAnimateType中的值按位枚举运算)</param>
            <returns>结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.WindowFadeOut(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            窗口淡出
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="dwTime">动画持续时间</param>
            <param name="dwFlags">动画类型(WindowAnimateType中的值按位枚举运算)</param>
            <returns>结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
            设置应用程序的父窗口
            </summary>
            <param name="hWndChild">子窗口句柄</param>
            <param name="hWndNewParent">父窗口句柄</param>
            <returns>long</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.SetWindowLong(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            移除应用启动的程序窗口边框
            </summary>
            <param name="hwnd">要移除边框的应用程序句柄</param>
            <param name="nIndex">索引</param>
            <param name="dwNewLong">边框值</param>
            <returns>long</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            移动应用程序窗口位置
            </summary>
            <param name="hwnd">程序窗口句柄</param>
            <param name="x">x坐标</param>
            <param name="y">y坐标</param>
            <param name="cx">宽度</param>
            <param name="cy">高度</param>
            <param name="repaint">是否修正</param>
            <returns>bool</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.SetThreadAffinityMask(System.IntPtr,System.UIntPtr)">
            <summary>
            指定hThread运行在核心dwThreadAffinityMask
            </summary>
            <param name="hThread">线程句柄</param>
            <param name="dwThreadAffinityMask">CPU核心编号</param>
            <returns>设置结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.GetCurrentThread">
            <summary>
            得到当前线程的句柄
            </summary>
            <returns>当前线程的句柄</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.NativeMethods.AnimateWindow(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            窗口淡入淡出
            </summary>
            <param name="hwnd">handle to window</param>
            <param name="dwTime">duration of animation</param>
            <param name="dwFlags">animation type</param>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.FLASHWINFO">
            <summary>
            窗口闪烁结构信息
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.FLASHWINFO.cbSize">
            <summary>
            The size of the structure in bytes.
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.FLASHWINFO.hwnd">
            <summary>
            A Handle to the Window to be Flashed. The window can be either opened or minimized.
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.FLASHWINFO.dwFlags">
            <summary>
            The Flash Status.
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.FLASHWINFO.uCount">
            <summary>
            The number of times to Flash the window.
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.FLASHWINFO.dwTimeout">
            <summary>
            The rate at which the Window is to be flashed, in milliseconds. If Zero, the function uses the default cursor blink rate.
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.WindowAnimateType">
            <summary>
            动画类型定义类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.WindowAnimateType.AW_HOR_POSITIVE">
            <summary>
            从左到右打开窗口
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.WindowAnimateType.AW_HOR_NEGATIVE">
            <summary>
            从右到左打开窗口
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.WindowAnimateType.AW_VER_POSITIVE">
            <summary>
            从上到下打开窗口
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.WindowAnimateType.AW_VER_NEGATIVE">
            <summary>
            从下到上打开窗口
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.WindowAnimateType.AW_CENTER">
            <summary>
            若使用了AW_HIDE标志，则使窗口向内重叠；若未使用AW_HIDE标志，则使窗口向外扩展
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.WindowAnimateType.AW_HIDE">
            <summary>
            隐藏窗口，缺省则显示窗口
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.WindowAnimateType.AW_ACTIVATE">
            <summary>
            激活窗口。在使用了AW_HIDE标志后不要使用这个标志
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.WindowAnimateType.AW_SLIDE">
            <summary>
            使用滑动类型。缺省则为滚动动画类型。当使用AW_CENTER标志时，这个标志就被忽略
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.NativeMethod.WindowAnimateType.AW_BLEND">
            <summary>
            使用淡出效果。只有当hWnd为顶层窗口的时候才可以使用此标志
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper">
            <summary>
            下拉框控件数据绑定及获取辅助类
            </summary>
            <summary>
            下拉框控件数据绑定及获取辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.BindingEnumToComboBox``1(System.Windows.Forms.ComboBox,``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            绑定枚举值到ComboBox
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="combox">ComboBox</param>
            <param name="defaultSelectedValue">默认选中项值</param>
            <param name="ignoreList">忽略项列表</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.SetEnumToComboBox``1(System.Windows.Forms.ComboBox,``0)">
            <summary>
            设置ComboBox枚举选中项
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="combox">ComboBox</param>
            <param name="enumValue">选中项值</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.GetEnumFromComboBox``1(System.Windows.Forms.ComboBox)">
            <summary>
            获取ComboBox枚举选中项
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="combox">ComboBox</param>
            <returns>选中项枚举值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.BindingIEnumerableGenericToComboBox``1(System.Windows.Forms.ComboBox,System.Collections.Generic.List{UtilZ.Dotnet.Ex.Base.DropdownBindingItem},``0)">
            <summary>
            绑定泛型集合到ComboBox
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="combox">ComboBox</param>
            <param name="bindItems">要绑定的集合</param>
            <param name="selectedItem">默认选中项,不设置默认选中时该值为null[默认值为null]</param>        
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.BindingIEnumerableGenericToComboBox``1(System.Windows.Forms.ComboBox,System.Collections.Generic.IEnumerable{``0},System.String,``0)">
            <summary>
            绑定泛型集合到ComboBox
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="combox">ComboBox</param>
            <param name="items">要绑定的集合</param>
            <param name="displayMember">显示的成员,属性名或字段名,当为null时调用成员的ToString方法的值作为显示值[默认值为null]</param>
            <param name="selectedItem">默认选中项,不设置默认选中时该值为null[默认值为null]</param>        
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.BindingIEnumerableGenericToComboBox``1(System.Windows.Forms.ComboBox,System.Func{``0,System.String},System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            绑定泛型集合到ComboBox
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="combox">ComboBox</param>
            <param name="displayFun">显示的委托,当为null时调用成员的ToString方法的值作为显示值[默认值为null]</param>
            <param name="items">要绑定的集合</param>
            <param name="selectedItem">默认选中项,不设置默认选中时该值为null[默认值为null]</param>        
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.SetGenericToComboBox(System.Windows.Forms.ComboBox,System.Object)">
            <summary>
            设置ComboBox泛型选中项
            </summary>
            <param name="combox">ComboBox</param>
            <param name="selectedItem">选中项值</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.GetGenericFromComboBox``1(System.Windows.Forms.ComboBox)">
            <summary>
            获取ComboBox泛型选中项值
            </summary>
            <typeparam name="T">绑定时的集合类型</typeparam>
            <param name="combox">ComboBox</param>
            <returns>选中项值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.BindingIEnumerableStringToComboBox(System.Windows.Forms.ComboBox,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            绑定字符串集合到ComboBox
            </summary>
            <param name="combox">ComboBox</param>
            <param name="items">集合项</param>
            <param name="selectedItem">默认选中项,不设置默认选中时该值为null[默认值为null]</param>
            <param name="ignoreCase">是否区分大小写[true:区分大小写,false:不区分,默认值为false]</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.SetStringToComboBox(System.Windows.Forms.ComboBox,System.String,System.Boolean)">
            <summary>
            设置ComboBox字符串选中项
            </summary>
            <param name="combox">ComboBox</param>
            <param name="selectedItem">选中项值</param>
            <param name="ignoreCase">是否区分大小写[true:区分大小写,false:不区分,默认值为false]</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.GetStringFromComboBox(System.Windows.Forms.ComboBox)">
            <summary>
            获取ComboBox字符串选中项值
            </summary>
            <param name="combox">ComboBox</param>
            <returns>选中项值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.BindingEnumToToolStripComboBox``1(System.Windows.Forms.ToolStripComboBox,``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            绑定枚举值到ToolStripComboBox
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="toolStripComboBox">ToolStripComboBox</param>
            <param name="defaultSelectedValue">默认选中项值</param>
            <param name="ignoreList">忽略项列表</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.SetEnumToToolStripComboBox``1(System.Windows.Forms.ToolStripComboBox,``0)">
            <summary>
            设置ToolStripComboBox枚举选中项
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="toolStripComboBox">ToolStripComboBox</param>
            <param name="enumValue">选中项值</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.GetEnumFromToolStripComboBox``1(System.Windows.Forms.ToolStripComboBox)">
            <summary>
            获取ToolStripComboBox枚举选中项
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="toolStripComboBox">ToolStripComboBox</param>
            <returns>选中项枚举值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.BindingIEnumerableGenericToToolStripComboBox``1(System.Windows.Forms.ToolStripComboBox,System.Collections.Generic.List{UtilZ.Dotnet.Ex.Base.DropdownBindingItem},``0)">
            <summary>
            绑定集合到ToolStripComboBox
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="toolStripComboBox">ToolStripComboBox</param>
            <param name="bindItemss">要绑定的集合</param>
            <param name="selectedItem">默认选中项,不设置默认选中时该值为null[默认值为null]</param>  
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.BindingIEnumerableGenericToToolStripComboBox``1(System.Windows.Forms.ToolStripComboBox,System.Collections.Generic.IEnumerable{``0},System.String,``0)">
            <summary>
            绑定集合到ToolStripComboBox
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="toolStripComboBox">ToolStripComboBox</param>
            <param name="items">要绑定的集合</param>
            <param name="displayMember">显示的成员,属性名或字段名,当为null时调用成员的ToString方法的值作为显示值[默认值为null]</param>
            <param name="selectedItem">默认选中项,不设置默认选中时该值为null[默认值为null]</param>  
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.BindingIEnumerableGenericToToolStripComboBox``1(System.Windows.Forms.ToolStripComboBox,System.Func{``0,System.String},System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            绑定泛型集合到ComboBox
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="toolStripComboBox">ToolStripComboBox</param>
            <param name="displayFun">显示的委托,当为null时调用成员的ToString方法的值作为显示值[默认值为null]</param>
            <param name="items">要绑定的集合</param>
            <param name="selectedItem">默认选中项,不设置默认选中时该值为null[默认值为null]</param>        
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.SetGenericToToolStripComboBox``1(System.Windows.Forms.ToolStripComboBox,``0)">
            <summary>
            设置ToolStripComboBox泛型选中项
            </summary>
            <param name="toolStripComboBox">ToolStripComboBox</param>
            <param name="selectedItem">选中项值</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.GetGenericFromToolStripComboBox``1(System.Windows.Forms.ToolStripComboBox)">
            <summary>
            获取ToolStripComboBox泛型选中项值
            </summary>
            <typeparam name="T">绑定时的集合类型</typeparam>
            <param name="toolStripComboBox">ToolStripComboBox</param>
            <returns>选中项值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.BindingIEnumerableStringToolStripComboBox(System.Windows.Forms.ToolStripComboBox,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            绑定字符串集合到ToolStripComboBox
            </summary>
            <param name="toolStripComboBox">ToolStripComboBox</param>
            <param name="items">集合项</param>
            <param name="selectedItem">默认选中项,不设置默认选中时该值为null[默认值为null]</param>
            <param name="ignoreCase">是否区分大小写[true:区分大小写,false:不区分,默认值为false]</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.SetStringToToolStripComboBox(System.Windows.Forms.ToolStripComboBox,System.String,System.Boolean)">
            <summary>
            设置ToolStripComboBox字符串选中项
            </summary>
            <param name="toolStripComboBox">ToolStripComboBox</param>
            <param name="selectedItem">选中项值</param>
            <param name="ignoreCase">是否区分大小写[true:区分大小写,false:不区分,默认值为false]</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DropdownBoxHelper.GetStringFromToolStripComboBox(System.Windows.Forms.ToolStripComboBox)">
            <summary>
            获取ToolStripComboBox字符串选中项值
            </summary>
            <param name="toolStripComboBox">ToolStripComboBox</param>
            <returns>选中项值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.ScrollableControlEx">
            <summary>
            窗口控件类扩展方法类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.ScrollableControlEx.AddForm(System.Windows.Forms.Control,System.Windows.Forms.Form,System.Windows.Forms.DockStyle)">
            <summary>
            添加窗体到窗口控件中显示
            </summary>
            <param name="containerControl">容器控件</param>
            <param name="form">窗口</param>
            <param name="dock">停靠方式[默认为Fill]</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.WindowNestProcess">
            <summary>
            Process扩展方法类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.WindowNestProcess.Start(System.Diagnostics.Process,System.Windows.Forms.Control)">
            <summary>
            在窗口控件中启动应用程序
            </summary>
            <param name="process">进程实例</param>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.NestProcess">
            <summary>
            应用程序嵌套启动类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.NestProcess.#ctor(System.Diagnostics.Process)">
            <summary>
            私有构造函数不允许实例化
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.NestProcess.GWL_STYLE">
            <summary>
            移除窗口边框消息索引
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.NestProcess.WS_VISIBLE">
            <summary>
            移除窗口边框消息编号
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.NestProcess._process">
            <summary>
            窗口控件中的应用程序进程
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.NestProcess.Process">
            <summary>
            获取窗口控件中的应用程序进程
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.NestProcess.StartNormalApp(System.Windows.Forms.Control)">
            <summary>
            在窗口控件中启动应用程序
            </summary>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.NestProcess.form_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            窗口控件所在窗口关闭事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.NestProcess.containerControl_Resize(System.Object,System.EventArgs)">
            <summary>
            窗口控件大小改变事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.WinformControlEx">
            <summary>
            Winfrom扩展类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.WinformControlEx.CreateControlImg(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            生成控件图片
            </summary>
            <param name="control">要生成图片的控件</param>
            <param name="isContainBorder">是否包含控件边框[true:包含边框;false:不包含边框;默认为false]</param>
            <returns>图片</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.WinformControlEx.CreateControlImgBorder(System.Windows.Forms.Control)">
            <summary>
            生成控件图片，带边框
            </summary>
            <param name="control">要生成图片的控件</param>
            <returns>图片</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.WinformControlEx.CreateControlImg(System.Windows.Forms.Control)">
            <summary>
            生成控件图片
            </summary>
            <param name="control">要生成图片的控件</param>
            <returns>图片</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.WinformControlEx.CreateFormImg(System.Windows.Forms.Form,System.Boolean,System.Boolean)">
            <summary>
            生成窗体图片
            </summary>
            <param name="form">要生成图片的窗体</param>
            <param name="isContainBorder">是否包含控件边框[true:包含边框;false:不包含边框;默认为false]</param>
            <param name="isContainTitle">是否包含标题栏</param>
            <returns>图片</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.WinformControlEx.CreateFormImgBorderTitle(System.Windows.Forms.Form)">
            <summary>
            生成窗体图片，带边框,带标题
            </summary>
            <param name="form">要生成图片的窗体</param>
            <returns>图片</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.WinformControlEx.CreateFormImgTitle(System.Windows.Forms.Form)">
            <summary>
            生成窗体图片,带标题
            </summary>
            <param name="form">要生成图片的窗体</param>
            <returns>图片</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.WinformControlEx.CreateFormImgBorder(System.Windows.Forms.Form)">
            <summary>
            生成窗体图片，带边框
            </summary>
            <param name="form">要生成图片的窗体</param>
            <returns>图片</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.WinformControlEx.CreateFormImg(System.Windows.Forms.Form)">
            <summary>
            生成窗体图片
            </summary>
            <param name="form">要生成图片的窗体</param>
            <returns>图片</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DataGridViewEx">
            <summary>
            DataGridView扩展类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DataGridViewEx.DataBinding(System.Windows.Forms.DataGridView,System.Object,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            DataGridView绑定数据
            </summary>
            <param name="dgv">DataGridView</param>
            <param name="dataSource">数据源</param>
            <param name="hidenColumns">隐藏列集合</param>
            <param name="colHeadInfos">列标题映射字典[key:列名;value:列标题;默认为null]</param>
            <param name="allowEditColumns">允许编辑的列集合[当为null或空时,全部列都可编辑;默认为null]</param>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DataGridViewEx._mouseRightButtonChangeSelectedRow">
            <summary>
            鼠标右键是否选中行
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DataGridViewEx.MouseRightButtonChangeSelectedRow">
            <summary>
            鼠标右键是否选中行[true:选中;false:不选中]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DataGridViewEx.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DataGridViewEx.OnCellMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            重写OnCellMouseDown
            </summary>
            <param name="e">e</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.DataGridViewEx.UpdateSelectedRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            更新选中行
            </summary>
            <param name="e">e</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ">
            <summary>
            扩展TreeView类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ.ExpandDepth(System.Windows.Forms.TreeNodeCollection,System.Int32,System.Int32)">
            <summary>
            递归展开结点
            </summary>
            <param name="treeNodes">TreeView.TreeNodeCollection</param>        
            <param name="currentDepth">当前已展开的深度</param>
            <param name="depth">要展开的深度</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ.ExpandDepth(System.Windows.Forms.TreeView,System.Int32)">
            <summary>
            展开树深度
            </summary>
            <param name="tree">当前的树</param>
            <param name="depth">要展开的深度</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ.SetSelectedTreeNodeBackcolor(System.Windows.Forms.TreeView,System.Windows.Forms.TreeNode@,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            设置选中的结点的背景颜色
            </summary>
            <param name="treeView">当前的树</param>
            <param name="lastSelectedNode">上一次选中的结点</param>
            <param name="backColor">选中节点背景色</param>
            <param name="foreColor">选中节点前景色</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ.SetSelectedNodeByFullPath(System.Windows.Forms.TreeView,System.String)">
            <summary>
            根据TreeView选中结点的全路径设置选中结点
            </summary>
            <param name="tree">当前的树</param>
            <param name="fullPath">全路径[@"Earth/Assi/Yindu/jiazi2"]</param>
            <returns>设置成功返回true,失败返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ.FindSelectedNode(System.String[],System.Int32,System.Windows.Forms.TreeNode)">
            <summary>
            递归查找选中项结点
            </summary>
            <param name="paths">路径集合</param>
            <param name="index">当前路径索引</param>
            <param name="parentNode">父级节点</param>
            <returns>找到的选中节点</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ.EnabledDoubleClick">
            <summary>
            是否响应鼠标双击事件[true:响应;false:不响应;默认false]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ.AutoExpandedCollapse">
            <summary>
            是否双击自动展开或折叠树节点[true:自动展开或折叠;false:不自动展开或折叠;默认true]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ.AutoChecked">
            <summary>
            显示复选框时,当一外复选框勾选状态改变后,是否自动勾选其低级及子节点[true:自动勾选;false:不自动勾选;默认true]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ.WndProc(System.Windows.Forms.Message@)">
            <summary>
            重写WndProc
            </summary>
            <param name="m">消息</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ.OnNodeMouseDoubleClick(System.Windows.Forms.TreeNodeMouseClickEventArgs)">
            <summary>
            重写OnNodeMouseDoubleClick
            </summary>
            <param name="e">参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            重写OnAfterCheck
            </summary>
            <param name="e">参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ.SetParentNodes(System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            设置父节点选中
            </summary>
            <param name="curNode">当前节点</param>
            <param name="isChecked">选中状态</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Base.TreeViewZ.SetChildNodes(System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            设置子节点选中状态
            </summary>
            <param name="curNode">当前节点</param>
            <param name="isChecked">选中状态</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.BarChartControl">
            <summary>
            条形图控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.BarChartControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.BarChartControl.CustomerPaint">
            <summary>
            重写
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.FlowLayoutPanelZ">
            <summary>
            FlowLayoutPanel子类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.FlowLayoutPanelZ.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.FlowLayoutPanelZ.OnSizeChanged">
            <summary>
            触发OnSizeChanged事件
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl">
            <summary>
            使用率控件,类似任务管理器
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.OnSizeChanged(System.EventArgs)">
            <summary>
            OnSizeChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl._gridLinePen">
            <summary>
            表格线条绘制画笔
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.GridLineWidth">
            <summary>
            表格线条宽度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.GridLineColor">
            <summary>
            表格线条颜色
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.IsMoveGrid">
            <summary>
            是否移动背景表格
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl._drawDirection">
            <summary>
            绘制方向[true:自左向右;false:自右向左]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.DrawDirection">
            <summary>
            绘制方向[true:自左向右;false:自右向左]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl._showGrid">
            <summary>
            是否显示背景表格[true:绘制;false:不绘制]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.ShowGrid">
            <summary>
            是否绘制背景表格[true:绘制;false:不绘制]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl._showTitle">
            <summary>
            是否显示标题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.ShowTitle">
            <summary>
            是否显示标题[true:显示;false:不显示]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl._htLine">
            <summary>
            要绘制的线Hashtable[key:线标识;value:UsageChannel]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.LineCount">
            <summary>
            获取要绘制的线数量
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.AddLine(System.Collections.Generic.IEnumerable{UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.CharLine})">
            <summary>
            添加要绘制的线
            </summary>
            <param name="lines">要绘制的线集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.AddLine(UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.CharLine)">
            <summary>
            添加要绘制的线
            </summary>
            <param name="line">要绘制的线</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.ExistLine(System.Object)">
            <summary>
            是否存在指定标识的线[存在返回true;不存在返回false]
            </summary>
            <param name="lineId">线标识</param>
            <returns>存在返回true;不存在返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.RemoveLine(UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.CharLine)">
            <summary>
            移除指定绘制的线
            </summary>
            <param name="line">线</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.RemoveLineById(System.Object)">
            <summary>
            移除指定绘制的线
            </summary>
            <param name="lineId">线标识</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.GetLineById(System.Object)">
            <summary>
            根据线标识获取指定绘制的线
            </summary>
            <returns>绘制的线</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.GetAllLine">
            <summary>
            获取所有绘制的线
            </summary>
            <returns>绘制的线数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.ClearLine">
            <summary>
            清空所有的线
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.ClearData">
            <summary>
            清空所有数据并刷新UI
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.ClearDataNoRefresh">
            <summary>
            清空所有数据,但不刷新UI
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.PrimitiveClearData">
            <summary>
            有数据清空返回true;没有清空项返回false
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.AddValueBegin(System.Object,System.Single)">
            <summary>
            开始添加值,谨慎使用
            </summary>
            <param name="lineId">线标识</param>
            <param name="value">值</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.AddValueBegin(System.Object,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            开始添加值
            </summary>
            <param name="lineId">线标识</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.AddValueEnd(System.Int32)">
            <summary>
            添加值完成,谨慎使用
            </summary>
            <param name="addCount">添加数项</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.AddValue(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Single}})">
            <summary>
            添加值
            </summary>
            <param name="values">值集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.AddValue(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Single[]}})">
            <summary>
            添加值
            </summary>
            <param name="values">值集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.AddValue(System.Single[])">
            <summary>
            添加值,值数组中的项与添加线时的顺序必须保持一致,谨慎使用
            </summary>
            <param name="values">值集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.AddValue(System.Single[][])">
            <summary>
            添加值数组,值中一维数组中的项与添加线时的顺序必须保持一致,谨慎使用
            </summary>
            <param name="values">值数组</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.CustomerPaint">
            <summary>
            自定义绘制
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LineChartControl.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.CharLine">
            <summary>
            要绘制线
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.CharLine.Id">
            <summary>
            线标识
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.CharLine.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.CharLine._linePen">
            <summary>
            线绘制画笔
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.CharLine.ValueList">
            <summary>
            值列表
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.CharLine.#ctor(System.Object,System.String)">
            <summary>
            构造函数,使用默认参数
            </summary>
            <param name="Id">线标识,使用hash值</param>
            <param name="name">名称</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.CharLine.#ctor(System.Object,System.String,System.Drawing.Color,System.Single)">
            <summary>
            构造函数,使用指定参数
            </summary>
            <param name="Id">线标识,使用hash值</param>
            <param name="name">名称</param>
            <param name="lineColor">线颜色</param>
            <param name="lineWidth">线宽度</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.CharLine.Dispose">
            <summary>
            IDisposable
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF">
            <summary>
            Winform日志控件,对WPF版本进行封装得到
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.MaxItemCount">
            <summary>
            获取或设置最多显示项数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.IsLock">
            <summary>
            是否锁定滚动
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.SetLogRefreshInfo(System.Int32,System.Int32)">
            <summary>
            设置日志刷新信息
            </summary>
            <param name="refreshCount">单次最大刷新日志条数</param>
            <param name="cacheCapcity">日志缓存容量,建议等于日志最大项数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.SetStyle(UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle)">
            <summary>
            设置样式,不存在添加,存在则用新样式替换旧样式
            </summary>
            <param name="style">样式</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.RemoveStyle(UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle)">
            <summary>
            移除样式
            </summary>
            <param name="style">样式标识</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.ClearStyle">
            <summary>
            清空样式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.GetStyles">
            <summary>
            获取当前所有样式数组
            </summary>
            <returns>当前所有样式数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.GetStyleById(System.Int32)">
            <summary>
            根据样式标识ID获取样式
            </summary>
            <param name="id">样式标识ID</param>
            <returns>获取样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.AddLog(System.String,UtilZ.Dotnet.Ex.Log.LogLevel)">
            <summary>
            添加显示日志
            </summary>
            <param name="logText">显示内容</param>
            <param name="level">日志级别</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.AddLog(System.String,System.Int32)">
            <summary>
            添加显示日志
            </summary>
            <param name="logText">显示内容</param>
            <param name="styleId">样式标识ID</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.Clear">
            <summary>
            清空日志
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.BackColor">
            <summary>
            获取或设置日志控件背景色
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControlF.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk">
            <summary>
            日志显示控件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk._maxItemCount">
            <summary>
            最多显示项数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.MaxItemCount">
            <summary>
            获取或设置最多显示项数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.IsLock">
            <summary>
            是否锁定滚动
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk._templateType">
            <summary>
            模板类型[true:内置模板;false:外部文件模板]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk._htStyle">
            <summary>
            key:ClassId,value:style
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk._refreshCount">
            <summary>
            单次最大刷新日志条数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk._cacheCapcity">
            <summary>
            日志缓存容量
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.StartRefreshLogThread(System.Int32,System.Int32)">
            <summary>
            启动刷新日志线程
            </summary>
            <param name="refreshCount">单次最大刷新日志条数</param>
            <param name="cacheCapcity">日志缓存容量,建议等于日志最大项数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.RemoveOutElements">
            <summary>
            移除超出限制的日志项
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.SetTemplate(System.String,System.String,System.String)">
            <summary>
            设置日志显示模板
            </summary>
            <param name="templateFilePath">日志模板html文件路径</param>
            <param name="logContainerEleId">显示日志的容器元素id</param>
            <param name="logItemEleName">日志项内容名称</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.AddLog(System.String)">
            <summary>
            添加显示日志
            </summary>
            <param name="logText">日志文本</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.AddLogStyleForColor(System.String,System.Drawing.Color)">
            <summary>
            添加显示日志,样式指定为颜色
            </summary>
            <param name="logText">日志文本</param>
            <param name="color">该条记录文本所显示的颜色</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.AddLogStyleForCss(System.String,System.String)">
            <summary>
            添加显示日志,样式指定为style
            </summary>
            <param name="logText">日志文本</param>
            <param name="style">样式</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.AddLogStyleForClass(System.String,System.String)">
            <summary>
            添加显示日志,样式指定为css中定义的类名
            </summary>
            <param name="logText">日志文本</param>
            <param name="className">css class名称</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.Clear">
            <summary>
            清空日志
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.ShowLogItem.#ctor(System.String,System.String,UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.StyleType)">
            <summary>
            
            </summary>
            <param name="logText"></param>
            <param name="css"></param>
            <param name="styleType">样式类型</param>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.LogControl_bk.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm">
            <summary>
            无边框窗体
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.NONE">
            <summary>
            空
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.TLEFT">
            <summary>
            左边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.RIGHT">
            <summary>
            右边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.TOP">
            <summary>
            上边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.BOTTOM">
            <summary>
            下边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.LEFTTOP">
            <summary>
            左上边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.RIGHTTOP">
            <summary>
            右上边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.LEFTBOTTOM">
            <summary>
            左下边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.RIGHTBOTTOM">
            <summary>
            右下边缘
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.IsDisableDragMoveForm">
            <summary>
            是否禁用拖动移动窗口[true:禁用]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.IsAllowMinimize">
            <summary>
            是否允许最小化[true:允许]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm._formResizeStyle">
            <summary>
            窗口修改大小样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.FormResizeStyle">
            <summary>
            窗口修改大小样式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            重写WndProc函数实现可调整大小
            </summary>
            <param name="m">消息对象</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.CreateParams">
            <summary>
             重写参数,否则点击任务栏图片时不会最小化的
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm._isUseInOutEffect">
            <summary>
            是否启用窗口加载退出特效[true:启用;false:禁用]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.IsUseInOutEffect">
            <summary>
            获取或设置是否启用窗口加载退出特效[true:启用;false:禁用]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm._inDurationTime">
            <summary>
            入场特效持续时长,单位/毫秒
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.InDurationTime">
            <summary>
            获取或设置入场特效持续时长,单位/毫秒
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm._inAnimateType">
            <summary>
            入场动画类型(WindowAnimateType中的值按位枚举运算
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.InAnimateType">
            <summary>
            获取或设置入场动画类型(WindowAnimateType中的值按位枚举运算
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm._outDurationTime">
            <summary>
            出场特效持续时长,单位/毫秒
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.OutDurationTime">
            <summary>
            获取或设置出场特效持续时长,单位/毫秒
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm._outAnimateType">
            <summary>
            出场动画类型(WindowAnimateType中的值按位枚举运算
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.OutAnimateType">
            <summary>
            获取或设置出场动画类型(WindowAnimateType中的值按位枚举运算
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.OnLoad(System.EventArgs)">
            <summary>
            重写OnLoad方法实现窗口淡入
            </summary>
            <param name="e">参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.OnFormClosed(System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            重写OnFormClosed方法实现窗口淡出
            </summary>
            <param name="e">参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.SetWindowState(System.Windows.Forms.FormWindowState,System.Boolean)">
            <summary>
            设置窗口状态
            </summary>
            <param name="windowState">窗体状态</param>
            <param name="maximizedFullScreen">最大化是否全屏[true:全屏;false:正常窗口的最大化,任务栏可见时显示任务栏,否则全屏;默认为false]</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NoneBorderForm.SwitchWindowState(System.Boolean)">
            <summary>
            切换窗口状态
            </summary>
            <param name="maximizedFullScreen">最大化是否全屏[true:全屏;false:正常窗口的最大化,任务栏可见时显示任务栏,否则全屏;默认为false]</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.ResizeStyle">
            <summary>
            无边框窗口大小重设样式
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.ResizeStyle.None">
            <summary>
            不允许调整
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.ResizeStyle.Top">
            <summary>
            上边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.ResizeStyle.Bottom">
            <summary>
            下边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.ResizeStyle.Left">
            <summary>
            左边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.ResizeStyle.Right">
            <summary>
            右边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.ResizeStyle.LeftTop">
            <summary>
            左上边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.ResizeStyle.LeftBottom">
            <summary>
            左下边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.ResizeStyle.RightTop">
            <summary>
            右上边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.ResizeStyle.RightBottom">
            <summary>
            右下边缘
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.ResizeStyle.All">
            <summary>
            全部八个方向
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NumberTextBox">
            <summary>
            表示一个可用于显示或编辑数字格式文本的控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NumberTextBox.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NumberTextBox.BeginInit">
            <summary>
            用信号通知对象初始化即将开始
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NumberTextBox.EndInit">
            <summary>
            用信号通知对象初始化已完成
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NumberTextBox.DecimalPlaces">
            <summary>
            获取或设置数字显示框（也称作 up-down 控件）中要显示的十进制位数。默认值为 0。
            异常:
            T:System.ArgumentOutOfRangeException:所分配的值小于 0。- 或 - 所赋的值大于 99。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NumberTextBox.Maximum">
            <summary>
            获取或设置数字显示框（也称作 up-down 控件）的最大值。默认值为 100。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NumberTextBox.Minimum">
            <summary>
            获取或设置数字显示框（也称作 up-down 控件）的最小允许值。默认值为 0。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NumberTextBox.Value">
            <summary>
            获取或设置赋给数字显示框（也称作 up-down 控件）的值。
            异常:
            T:System.ArgumentOutOfRangeException:所赋的值小于 System.Windows.Forms.NumericUpDown.Minimum 属性值。- 或 - 所赋的值大于 System.Windows.Forms.NumericUpDown.Maximum属性值。
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NumberTextBox.ValueChanged">
            <summary>
            值改变事件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NumberTextBox.OnLostFocus(System.EventArgs)">
            <summary>
            OnLostFocus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.NumberTextBox.OnTextChanged(System.EventArgs)">
            <summary>
            OnTextChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.OpacityPanel">
            <summary>
            透明Panel
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.OpacityPanel._opacity">
            <summary>
            透明度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.OpacityPanel.Opacity">
            <summary>
            获取或设置控件透明度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.OpacityPanel.RealBackColor">
            <summary>
            真实背景色
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.OpacityPanel.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.OpacityPanel.CreateParams">
            <summary>
            重写控件生成参数使控件支持透明
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.OpacityPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘控件
            </summary>
            <param name="e">e</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.FPageGridColumnsSetting">
            <summary>
            分页数据显示控件列设置窗口
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.FPageGridColumnsSetting._columnSettingInfoList">
            <summary>
            当前绑定的全部列集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.FPageGridColumnsSetting.ColumnSettingDockStatus">
            <summary>
            获取或设置当前列设置状态
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.FPageGridColumnsSetting.SwitchColumnSettingDockStatus(UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridColumnSettingStatus,UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridColumnSettingStatus)">
            <summary>
            切换列设置状态
            </summary>
            <param name="status">列设置状态</param>
            <param name="oldStatus">旧状态</param>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.FPageGridColumnsSetting.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.FPageGridColumnsSetting.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.FPageGridColumnsSetting.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.ColumnSettingInfo">
            <summary>
            列设置类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.ColumnSettingInfo._columnVisibleChangedNotify">
            <summary>
            列可见性改变通知委托
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.ColumnSettingInfo.ColumnName">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.ColumnSettingInfo.Visible">
            <summary>
            是否显示
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.ColumnSettingInfo.HeaderText">
            <summary>
            列标题
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.ColumnSettingInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.ColumnSettingInfo.#ctor(System.Windows.Forms.DataGridViewColumn,System.Action{System.String,System.Boolean})">
            <summary>
            构造函数
            </summary>
            <param name="column">列</param>
            <param name="columnVisibleChangedNotify">列可见性改变通知委托</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.ColumnSettingInfo.ToString">
            <summary>
            重写ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.DataRowClickArgs">
            <summary>
            据行单击或双击事件参数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.DataRowClickArgs.#ctor(System.Object,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="row">双击的数据行</param>
            <param name="rowIndex">行索引</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.DataRowClickArgs.Row">
            <summary>
            获取双击的数据行
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.DataRowClickArgs.RowIndex">
            <summary>
            行索引
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.DataRowSelectionChangedArgs">
            <summary>
            选中行改变事件参数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.DataRowSelectionChangedArgs.#ctor(System.Int32,System.Int32,System.Object,System.Object,System.Collections.Generic.List{System.Object})">
            <summary>
            构造函数
            </summary>
            <param name="rowHandle">当前选中行索引</param>
            <param name="prevRowHandle">上次选中行索引</param>
            <param name="row">当前行数据</param>
            <param name="prevRow">上次行数据</param>
            <param name="selectedRows">选中行数据集合</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.DataRowSelectionChangedArgs.RowHandle">
            <summary>
            当前选中行索引
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.DataRowSelectionChangedArgs.PrevRowHandle">
            <summary>
            上次选中行索引
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.DataRowSelectionChangedArgs.Row">
            <summary>
            当前行数据
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.DataRowSelectionChangedArgs.PrevRow">
            <summary>
            上次行数据
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.DataRowSelectionChangedArgs.SelectedRows">
            <summary>
            选中行数据集合
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridColumnSettingStatus">
            <summary>
            分页表格列设置控件状态
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridColumnSettingStatus.Float">
            <summary>
            浮动
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridColumnSettingStatus.Dock">
            <summary>
            停靠
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridColumnSettingStatus.Hiden">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridColumnSettingStatus.Disable">
            <summary>
            禁用
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageInfo">
            <summary>
            分页信息
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageInfo.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="totalCount">总数据记录数</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageInfo.PageCount">
            <summary>
            分总页数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageInfo.PageSize">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageInfo.PageIndex">
            <summary>
            页索引
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageInfo.TotalCount">
            <summary>
            总数据记录数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageSizeChangedArgs">
            <summary>
            分页大小改变事件参数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageSizeChangedArgs.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="pageSize">查询页大小</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageSizeChangedArgs.PageSize">
            <summary>
            查询页大小
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.QueryDataArgs">
            <summary>
            查询数据参数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.QueryDataArgs.#ctor(System.Int64,System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="pageIndex">当前要查询页数</param>
            <param name="pageSize">查询页大小</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.QueryDataArgs.PageIndex">
            <summary>
            获取当前要查询页数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.QueryDataArgs.PageSize">
            <summary>
            查询页大小
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridControlCommon">
            <summary>
            分页显示控件公共类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridControlCommon.DisplayColSettingFormText">
            <summary>
            显示列设置窗口标题
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridControlCommon._currentAssemblyDirectory">
            <summary>
            当前程序集所在目录
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridControlCommon.GetDefaultSettingDirectory(System.Boolean)">
            <summary>
            获取设置默认存放目录
            </summary>
            <param name="defaultDirFlag">设置默认目录标识[true:应用程序目录;false:用户目录;默认为true]</param>
            <returns>设置默认存放目录</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridControlCommon.GetGridColumnSettingFilePath(System.String,System.String)">
            <summary>
            获取表格列设置文件路径
            </summary>
            <param name="settingDirectory">用户设置数据存放目录</param>
            <param name="dataSourceName">数据源名称</param>
            <returns>表格列设置文件路径</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridControlCommon.IsDataSourceChanged(System.String,System.Data.DataTable,System.String,System.Data.DataTable)">
            <summary>
            判断数据源是否改变[改变返回true,否则返回false]
            </summary>
            <param name="oldDataSourceName">旧的数据源名称</param>
            <param name="oldTable">旧的数据表</param>
            <param name="dataSourceName">数据源名称</param>
            <param name="dt">数据表</param>
            <returns>改变返回true,否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridControlCommon.SetDXGridViewColumnAutoSizeToDisplayedHeaders(System.Object)">
            <summary>
            设置DXGridControl控件中的列宽度为自适应内容宽度
            </summary>
            <param name="gridControl">GridControl</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageGridControlCommon.CompareColumnName(System.String,System.String)">
            <summary>
            比较DataGridViewColumn列名是否相同,相同返回true
            </summary>
            <param name="name1"></param>
            <param name="name2"></param>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl">
            <summary>
            分页数据表格
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl._fPageGridColumnsSetting">
            <summary>
            列显示设置窗口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.ColumnVisibleChangedNotify(System.String,System.Boolean)">
            <summary>
            列可见性改变通知处理方法
            </summary>
            <param name="columnName">DataGridViewColumn</param>
            <param name="visible"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.GridView_MouseDoubleClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            表格控件鼠标双击事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.GridView_MouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            表格控件鼠标单击事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl._prevSelectedRow">
            <summary>
            前次选中的行
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.GridView_SelectionChanged(System.Object,System.EventArgs)">
            <summary>
            表格选中行改变事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.UCPageGridControl_Load(System.Object,System.EventArgs)">
            <summary>
            Load
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl._preHidenCol">
            <summary>
            目标列
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.dataGridView_ColumnHeaderMouseClick(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            表格列头右键单击事件处理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.QueryData">
            <summary>
            查询数据事件
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.PageSizeChanged">
            <summary>
            分页大小改变事件
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.DataRowClick">
            <summary>
            数据行单击事件
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.DataRowDoubleClick">
            <summary>
            数据行双击事件
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.DataRowSelectionChanged">
            <summary>
            选中行改变事件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.ShowData(System.Object,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            显示数据
            </summary>
            <param name="dataSource">数据源</param>
            <param name="dataSourceName">数据源名称</param>
            <param name="hidenColumns">隐藏列集合</param>
            <param name="colHeadInfos">列标题映射字典[key:列名;value:列标题;默认为null]</param>
            <param name="allowEditColumns">允许编辑的列集合[当为null或空时,全部列都可编辑;默认为null]</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.ShowData``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            显示数据
            </summary>
            <typeparam name="T">数据模型类型</typeparam>
            <param name="dataSource">数据源</param>
            <param name="dataSourceName">数据源名称</param>
            <param name="hidenColumns">隐藏列集合</param>
            <param name="colHeadInfos">列标题映射字典[key:列名;value:列标题;默认为null]</param>
            <param name="allowEditColumns">允许编辑的列集合[当为null或空时,全部列都可编辑;默认为null]</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.DataBinding(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            DataGridView绑定数据
            </summary>
            <param name="dataSourceName">数据源名称</param>
            <param name="dataSource">数据源</param>
            <param name="hidenColumns">隐藏列集合</param>
            <param name="colHeadInfos">列标题映射字典[key:列名;value:列标题;默认为null]</param>
            <param name="allowEditColumns">允许编辑的列集合[当为null或空时,全部列都可编辑;默认为null]</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.OnRaiseQueryData(UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.QueryDataArgs)">
            <summary>
            触发查询数据事件
            </summary>
            <param name="e">查询参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.SetPageInfo(UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageInfo)">
            <summary>
            设置分页
            </summary>
            <param name="pageInfo">页信息</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.PrimitiveSetPageInfo(UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.PageInfo)">
            <summary>
            设置分页
            </summary>
            <param name="pageInfo">页信息</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.Clear">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.EnableColumnHeaderContextMenuStripHiden">
            <summary>
            获取或设置是否启用列标题右键菜单隐藏列[true:启用;false:禁用]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.AlignDirection">
            <summary>
            获取或设置分页控件对齐方向[true:LeftToRight;false:RightToLeft]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.ColumnSettingWidth">
            <summary>
            获取或设置列设置区域宽度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.EnablePagingBar">
            <summary>
            获取或设置是否启用分页栏
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.ColumnSettingStatus">
            <summary>
            获取或设置列设置控件状态
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl._enableRowNum">
            <summary>
            是否启用显示行号显示
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.EnableRowNum">
            <summary>
            获取或设置是否启用显示行号显示
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.EnableUserAdjustPageSize">
            <summary>
            获取或设置是否启用用户调整分页大小
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.SwitchPageSizeVisible(System.Boolean)">
            <summary>
            切换分页大小可见性
            </summary>
            <param name="visible">分页大小可见性</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.PageSizeMaximum">
            <summary>
            获取或设置分页大小最大值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.PageSizeMinimum">
            <summary>
            获取或设置分页大小最小值
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl._isLastColumnAutoSizeModeFill">
            <summary>
            最后一列显示模式是否默认Fill[true:Fill;false:系统默认;默认值:false]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.IsLastColumnAutoSizeModeFill">
            <summary>
            获取或设置最后一列显示模式是否默认Fill[true:Fill;false:系统默认;默认值:true]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.DataGridView_RowPostPaint(System.Object,System.Windows.Forms.DataGridViewRowPostPaintEventArgs)">
            <summary>
            绘制表格行号
            </summary>
            <param name="sender">sender</param>
            <param name="e">e</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.GridControl">
            <summary>
            获取表格控件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl._settingDirectory">
            <summary>
            用户设置数据存放目录
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.SettingDirectory">
            <summary>
            获取或设置用户设置数据存放目录
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl._dataSourceName">
            <summary>
            获取
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.DataSourceName">
            <summary>
            获取当前数据源名称
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.DataSource">
            <summary>
            获取数据源
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl._pageInfo">
            <summary>
            当前分页信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.PageInfo">
            <summary>
            获取当前分页信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.FocusedRowIndex">
            <summary>
            获取或设置焦点行索引
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PageGrid.UCPageGridControl.SelectedRows">
            <summary>
            获取选中行集合
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PaintBaseControl">
            <summary>
            纯绘制控件基类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PaintBaseControl._grafx">
            <summary>
            图形双缓冲缓冲区对象
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PaintBaseControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PaintBaseControl.OnCreateControl">
            <summary>
            重写OnCreateControl
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PaintBaseControl.OnSizeChanged(System.EventArgs)">
            <summary>
            重写OnSizeChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PaintBaseControl.CreateBufferedGraphics">
            <summary>
            创建双缓冲绘图
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PaintBaseControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重写OnPaint
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PaintBaseControl.CheckInvokeRequired">
            <summary>
            检查当前是否在主线程
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PaintBaseControl.CustomerPaint">
            <summary>
            绘制
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PaintBaseControl.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Interface.IPartAsynWaitWinform">
            <summary>
            Winfromn异步等待接口
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.PartAsynExcuteFactoryWinform">
            <summary>
            Winform异步执行对象创建工厂类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.PartAsynExcuteFactoryWinform.#cctor">
            <summary>
            静态构造函数初始化默认异步等待类型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.PartAsynExcuteFactoryWinform.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.PartAsynExcuteFactoryWinform._partAsynExcuteType">
            <summary>
            Winfrom异步执行对象创建类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.PartAsynExcuteFactoryWinform.PartAsynExcuteType">
            <summary>
            获取或设置Winfrom异步执行对象创建类型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.PartAsynExcuteFactoryWinform.ConvertShadeBackground(System.Object)">
            <summary>
            转换遮罩层背景色
            </summary>
            <param name="shadeBackground">遮罩层背景色对象</param>
            <returns>遮罩层背景色</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.PartAsynExcuteFactoryWinform.CreateExcute``3">
            <summary>
            创建异步执行对象
            </summary>
            <typeparam name="T">异步执行参数类型</typeparam>
            <typeparam name="TContainer">容器控件类型</typeparam>
            <typeparam name="TResult">异步执行返回值类型</typeparam>
            <returns>异步执行对象</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.PartAsynWaitHelper">
            <summary>
            Winform异步等待辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.PartAsynWaitHelper.#cctor">
            <summary>
            静态构造函数创建异步执行对象创建工厂对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.PartAsynWaitHelper._partAsynExcuteFactory">
            <summary>
            异步执行对象创建工厂对象
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.PartAsynWaitHelper.PartAsynExcuteFactory">
            <summary>
            获取或设置异步执行对象创建工厂对象
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.PartAsynWaitHelper.Wait``2(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{``0,``1},System.Windows.Forms.Control)">
             <summary>
             异步等待
             </summary>
             <typeparam name="T">异步执行参数类型</typeparam>
             <typeparam name="TResult">异步执行返回值类型</typeparam>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.PartAsynWaitHelper.Wait``2(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{``0,``1},System.Windows.Forms.Control,UtilZ.Dotnet.Ex.Base.IPartAsynWait)">
             <summary>
             异步等待
             </summary>
             <typeparam name="T">异步执行参数类型</typeparam>
             <typeparam name="TResult">异步执行返回值类型</typeparam>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
            <param name="asynWait">异步等待UI</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl">
            <summary>
            Metro等待样式框
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.UIDesignMode">
            <summary>
            获取UI是否处于设计器模式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.Caption">
            <summary>
            获取或设置提示标题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.Hint">
            <summary>
            获取或设置提示内容
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl._isCanceled">
            <summary>
            是否已经取消
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.IsCanceled">
            <summary>
            获取是否已经取消
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.IsShowCancel">
            <summary>
            获取或设置是否显示取消按钮
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.ShadeBackground">
            <summary>
            获取或设置动画背景色
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.Canceled">
            <summary>
            取消事件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl._monitor">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.Cancel">
            <summary>
            取消操作
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.StartAnimation">
            <summary>
            开始动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.StopAnimation">
            <summary>
            停止动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.SetInfo(System.Object)">
            <summary>
            设置信息(保留接口)
            </summary>
            <param name="para">参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.Reset">
            <summary>
            重置异步等待框
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.MetroShadeControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.WinformPartAsynExcuteV1`3">
            <summary>
            Winfrom异步执行类
            </summary>
            <typeparam name="T">异步执行参数类型</typeparam>
            <typeparam name="TContainer">容器控件类型</typeparam>
            <typeparam name="TResult">异步执行返回值类型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.WinformPartAsynExcuteV1`3.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.WinformPartAsynExcuteV1`3._shadeType">
            <summary>
            默认当遮罩层类型为自定义类型时用于创建遮罩层的类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.WinformPartAsynExcuteV1`3.ShadeType">
            <summary>
            当遮罩层类型为自定义类型时用于创建遮罩层的类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.WinformPartAsynExcuteV1`3._containerControl">
            <summary>
            容器控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.WinformPartAsynExcuteV1`3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.WinformPartAsynExcuteV1`3.Excute(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{`0,`2},`1)">
            <summary>
            执行异步委托
            </summary>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.WinformPartAsynExcuteV1`3.PrimitiveReleseResource">
            <summary>
            释放异步委托资源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V1.WinformPartAsynExcuteV1`3.SetShadeControl(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            设置遮罩层控件
            </summary>
            <param name="containerControl">挡住当前窗体的form 或 userControl</param>
            <param name="shadeControl">遮罩层控件</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2">
            <summary>
            Metro等待样式框
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2._isCanceled">
            <summary>
            是否已经取消
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.IsCanceled">
            <summary>
            获取是否已经取消
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.Caption">
            <summary>
            获取或设置提示标题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.Hint">
            <summary>
            获取或设置提示内容
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.IsShowCancel">
            <summary>
            获取或设置是否显示取消按钮
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.ShadeBackground">
            <summary>
            获取或设置动画背景色
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.Canceled">
            <summary>
            取消事件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2._monitor">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.Cancel">
            <summary>
            取消操作
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.StartAnimation">
            <summary>
            开始动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.StopAnimation">
            <summary>
            停止动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.SetInfo(System.Object)">
            <summary>
            设置信息(保留接口)
            </summary>
            <param name="para">参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.Reset">
            <summary>
            重置异步等待框
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.UIDesignMode">
            <summary>
            获取UI是否处于设计器模式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重写绘制
            </summary>
            <param name="e">e</param>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.UCMetroShadeControl2.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.WinformPartAsynExcute2`3">
            <summary>
            Winfrom异步执行类
            </summary>
            <typeparam name="T">异步执行参数类型</typeparam>
            <typeparam name="TContainer">容器控件类型</typeparam>
            <typeparam name="TResult">异步执行返回值类型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.WinformPartAsynExcute2`3.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.WinformPartAsynExcute2`3._shadeType">
            <summary>
            默认当遮罩层类型为自定义类型时用于创建遮罩层的类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.WinformPartAsynExcute2`3.ShadeType">
            <summary>
            当遮罩层类型为自定义类型时用于创建遮罩层的类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.WinformPartAsynExcute2`3._containerControl">
            <summary>
            容器控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.WinformPartAsynExcute2`3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.WinformPartAsynExcute2`3.Excute(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{`0,`2},`1)">
            <summary>
            执行异步委托
            </summary>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V2.WinformPartAsynExcute2`3.PrimitiveReleseResource">
            <summary>
            释放异步委托资源
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3">
            <summary>
            第三种方式
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3._isCanceled">
            <summary>
            是否已经取消
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.IsCanceled">
            <summary>
            获取是否已经取消
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.Caption">
            <summary>
            获取或设置提示标题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.Hint">
            <summary>
            获取或设置提示内容
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.IsShowCancel">
            <summary>
            获取或设置是否显示取消按钮
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.ShadeBackground">
            <summary>
            获取或设置动画背景色
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.Canceled">
            <summary>
            取消事件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3._monitor">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.Cancel">
            <summary>
            取消操作
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.StartAnimation">
            <summary>
            开始动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.StopAnimation">
            <summary>
            停止动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.SetInfo(System.Object)">
            <summary>
            设置信息(保留接口)
            </summary>
            <param name="para">参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.Reset">
            <summary>
            重置异步等待框
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.UIDesignMode">
            <summary>
            获取UI是否处于设计器模式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.UCMetroShadeControl3.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.WinformPartAsynExcute3`3">
            <summary>
            Winfrom异步执行类
            </summary>
            <typeparam name="T">异步执行参数类型</typeparam>
            <typeparam name="TContainer">容器控件类型</typeparam>
            <typeparam name="TResult">异步执行返回值类型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.WinformPartAsynExcute3`3.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.WinformPartAsynExcute3`3._shadeType">
            <summary>
            默认当遮罩层类型为自定义类型时用于创建遮罩层的类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.WinformPartAsynExcute3`3.ShadeType">
            <summary>
            当遮罩层类型为自定义类型时用于创建遮罩层的类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.WinformPartAsynExcute3`3._containerControl">
            <summary>
            容器控件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.WinformPartAsynExcute3`3._shadeControl">
            <summary>
            遮罩层控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.WinformPartAsynExcute3`3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.WinformPartAsynExcute3`3.Excute(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{`0,`2},`1)">
            <summary>
            执行异步委托
            </summary>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V3.WinformPartAsynExcute3`3.PrimitiveReleseResource">
            <summary>
            释放异步委托资源
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4">
            <summary>
            第四种方式控件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4._isCanceled">
            <summary>
            是否已经取消
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.IsCanceled">
            <summary>
            获取是否已经取消
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.Caption">
            <summary>
            获取或设置提示标题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.Hint">
            <summary>
            获取或设置提示内容
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.IsShowCancel">
            <summary>
            获取或设置是否显示取消按钮
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.ShadeBackground">
            <summary>
            获取或设置动画背景色
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.Canceled">
            <summary>
            取消事件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4._monitor">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.Cancel">
            <summary>
            取消操作
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.StartAnimation">
            <summary>
            开始动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.StopAnimation">
            <summary>
            停止动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.SetInfo(System.Object)">
            <summary>
            设置信息(保留接口)
            </summary>
            <param name="para">参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.Reset">
            <summary>
            重置异步等待框
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.UIDesignMode">
            <summary>
            获取UI是否处于设计器模式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.UCMetroShadeControl4.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.WinformPartAsynExcute4`3">
            <summary>
            Winfrom异步执行类
            </summary>
            <typeparam name="T">异步执行参数类型</typeparam>
            <typeparam name="TContainer">容器控件类型</typeparam>
            <typeparam name="TResult">异步执行返回值类型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.WinformPartAsynExcute4`3.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.WinformPartAsynExcute4`3._shadeType">
            <summary>
            默认当遮罩层类型为自定义类型时用于创建遮罩层的类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.WinformPartAsynExcute4`3.ShadeType">
            <summary>
            当遮罩层类型为自定义类型时用于创建遮罩层的类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.WinformPartAsynExcute4`3._containerControl">
            <summary>
            容器控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.WinformPartAsynExcute4`3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.WinformPartAsynExcute4`3.Excute(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{`0,`2},`1)">
            <summary>
            执行异步委托
            </summary>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V4.WinformPartAsynExcute4`3.PrimitiveReleseResource">
            <summary>
            释放异步委托资源
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5">
            <summary>
            异步等等遮罩层控件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5._opacity">
            <summary>
            透明度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.Opacity">
            <summary>
            获取或设置控件透明度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.BackColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5._backgroundBrush">
            <summary>
            背景画刷
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5._realColor">
            <summary>
            真实背景色
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.RealColor">
            <summary>
            获取或设置真实背景色
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.CreateParams">
            <summary>
            重写控件生成参数使控件支持透明
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5._isCanceled">
            <summary>
            是否已经取消
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.IsCanceled">
            <summary>
            获取是否已经取消
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.Caption">
            <summary>
            获取或设置提示标题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.Hint">
            <summary>
            获取或设置提示内容
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.IsShowCancel">
            <summary>
            获取或设置是否显示取消按钮
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.ShadeBackground">
            <summary>
            获取或设置动画背景色
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.Canceled">
            <summary>
            取消事件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5._monitor">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.Cancel">
            <summary>
            取消操作
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.StartAnimation">
            <summary>
            开始动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.StopAnimation">
            <summary>
            停止动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.SetInfo(System.Object)">
            <summary>
            设置信息(保留接口)
            </summary>
            <param name="para">参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.Reset">
            <summary>
            重置异步等待框
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.UIDesignMode">
            <summary>
            获取UI是否处于设计器模式
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.Load">
            <summary>
            控件加载完成事件
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.ForeColor">
            <summary>
            重写前景色属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5._partRefreshAreas">
            <summary>
            当前局部刷新区域集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            重写OnMouseMove
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            重写OnMouseClick
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.OnCreateControl">
            <summary>
            重写OnCreateControl
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.OnResize(System.EventArgs)">
            <summary>
            重写OnResize
            </summary>
            <param name="e">e</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.ShadeControl5.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘控件
            </summary>
            <param name="e">e</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.WinformPartAsynExcute5`3">
            <summary>
            Winfrom异步执行类
            </summary>
            <typeparam name="T">异步执行参数类型</typeparam>
            <typeparam name="TContainer">容器控件类型</typeparam>
            <typeparam name="TResult">异步执行返回值类型</typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.WinformPartAsynExcute5`3.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.WinformPartAsynExcute5`3._shadeType">
            <summary>
            默认当遮罩层类型为自定义类型时用于创建遮罩层的类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.WinformPartAsynExcute5`3.ShadeType">
            <summary>
            当遮罩层类型为自定义类型时用于创建遮罩层的类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.WinformPartAsynExcute5`3._containerControl">
            <summary>
            容器控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.WinformPartAsynExcute5`3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.WinformPartAsynExcute5`3.Excute(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{`0,`2},`1)">
            <summary>
            执行异步委托
            </summary>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.V5.WinformPartAsynExcute5`3.PrimitiveReleseResource">
            <summary>
            释放异步委托资源
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteBase`3">
            <summary>
            Winform异步执行基类
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TContainer"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteBase`3._asynControlType">
            <summary>
            异步等待控件类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteBase`3._asynModifyControls">
            <summary>
            Tab禁用的控件集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteBase`3.#cctor">
            <summary>
            静态构造函数初始化
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteBase`3.AssertIAsynWait(System.Type)">
            <summary>
            断言对象类型是IAsynWait和UserControl的子类对象类型
            </summary>
            <param name="value">要断言的对象类型</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteBase`3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteHelper">
            <summary>
            Winform异步执行辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteHelper.EnableControls(System.Collections.Generic.List{System.Windows.Forms.Control})">
            <summary>
            启用当显示类型为只显示提示信息框大小类型时禁用状态的控件
            </summary>
            <param name="disableControls">当显示类型为只显示提示信息框大小类型时当前处于禁用状态的控件集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteHelper.DisableControls(System.Windows.Forms.Control,System.Collections.Generic.List{System.Windows.Forms.Control})">
            <summary>
            当显示类型为只显示提示信息框大小类型时禁用状态的控件集合
            </summary>
            <param name="containerControl">容器控件</param>
            <param name="disableControls">当显示类型为只显示提示信息框大小类型时当前处于禁用状态的控件集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteHelper.DisableTab(System.Windows.Forms.Control,System.Collections.Generic.List{System.Windows.Forms.Control})">
            <summary>
            禁用容器控件内的子控件的Tab焦点选中功能
            </summary>
            <param name="containerControl">容器控件</param>
            <param name="disableTabControls">禁用Tab键可获取焦点的控件集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteHelper.EnableTab(System.Collections.Generic.List{System.Windows.Forms.Control})">
            <summary>
            启用容器控件内的子控件的Tab焦点选中功能
            </summary>
            <param name="disableTabControls">禁用Tab键可获取焦点的控件集合</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteTypeDefine">
            <summary>
            Winfrom异步执行对象创建类型定义类(推荐使用OpacityShadeDisableTab值3)
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteTypeDefine.ShadeDisableControl">
            <summary>
            等等动画+禁用容器内控件方式实现(注:不可在异步执行方法中修改控件的Enable属,否则会导致控件的TabStop状态达不到预期效果)
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteTypeDefine.OpacityDisableTab">
            <summary>
            半透明用户控件等待动画+禁用控件Tab(最小华还原左上角有一块白色的出现绘制异常,原因不明,猜测与半透明有关)
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteTypeDefine.OpacityShadeDisableTab">
            <summary>
            半透明遮罩层+等待动画+禁用控件Tab(注:不可在异步执行方法中修改控件的TabStop属性,否则会导致控件的TabStop状态达不到预期效果;容器控件大小改变时会闪烁，因为半透明控件winform不支持双缓冲)
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteTypeDefine.ScreenshotImgBackgrounDisableTab">
            <summary>
            容器控件截图作为异步等等控件背景+禁用控件Tab(注:控件状态改变在背景中不能体现出现,同时容器控件大小改变时要重新框图并做半透明处理,比较消耗CPU,容器控件越大性能越低)
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.Excute.Winform.WinformPartAsynExcuteTypeDefine.OpacityCustomerDisableTab">
            <summary>
            自定义半透明控件+禁用控件Tab
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.WinformPartAsynWaitHelper">
            <summary>
            Winform异步等待辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.WinformPartAsynWaitHelper.#cctor">
            <summary>
            静态构造函数创建异步执行对象创建工厂对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.WinformPartAsynWaitHelper._partAsynExcuteFactory">
            <summary>
            异步执行对象创建工厂对象
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.WinformPartAsynWaitHelper.PartAsynExcuteFactory">
            <summary>
            获取或设置异步执行对象创建工厂对象
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.WinformPartAsynWaitHelper.Wait``2(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{``0,``1},System.Windows.Forms.Control)">
             <summary>
             异步等待
             </summary>
             <typeparam name="T">异步执行参数类型</typeparam>
             <typeparam name="TResult">异步执行返回值类型</typeparam>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PartAsynWait.WinformPartAsynWaitHelper.Wait``2(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{``0,``1},System.Windows.Forms.Control,UtilZ.Dotnet.Ex.Base.IPartAsynWait)">
             <summary>
             异步等待
             </summary>
             <typeparam name="T">异步执行参数类型</typeparam>
             <typeparam name="TResult">异步执行返回值类型</typeparam>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
            <param name="asynWait">异步等待UI</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridAttribute">
            <summary>
            属性表格修改值特性
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1">
            <summary>
            PropertyGrid集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1._items">
            <summary>
            内部集合列表
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.Item(System.Int32)">
            <summary>
            Returns an employee object at index position.
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.IsReadOnly">
            <summary>
            集合是否只读
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.Add(`0)">
            <summary>
            添加项
            </summary>
            <param name="item">要添加的项</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.Contains(`0)">
            <summary>
            是否包含指定项
            </summary>
            <param name="item">指定项</param>
            <returns>返回包含结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始，将整个 System.Collections.Generic.List`1 复制到兼容的一维数组
            </summary>
            <param name="array">一维 System.Array，它是从 System.Collections.Generic.List`1 复制的元素的目标。 System.Array必须具有从零开始的索引。</param>
            <param name="arrayIndex">中从零开始的索引，从此处开始复制</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.Remove(`0)">
            <summary>
            移除与指定的谓词所定义的条件相匹配的所有元素
            </summary>
            <param name="item">System.Predicate`1 委托，用于定义要移除的元素应满足的条件</param>
            <returns>从 System.Collections.Generic.List`1 中移除的元素数</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            返回循环访问 System.Collections.Generic.List`1 的枚举数
            </summary>
            <returns>用于 System.Collections.Generic.List`1.Enumerator 的 System.Collections.Generic.List`1</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.GetAttributes">
            <summary>
            返回此组件实例的自定义属性的集合
            </summary>
            <returns>包含此对象的属性的 System.ComponentModel.AttributeCollection。</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.GetClassName">
            <summary>
            返回此组件实例的类名称
            </summary>
            <returns>对象的类名称，如果该类没有名称，则为 null</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.GetComponentName">
            <summary>
            返回某个组件的此实例的名称
            </summary>
            <returns>对象的名称，如果该对象不具有名称，则为 null</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.GetConverter">
            <summary>
            返回此组件实例的类型转换器
            </summary>
            <returns>作为此对象转换器的 System.ComponentModel.TypeConverter，或为 null（如果此对象不存在任何 System.ComponentModel.TypeConverter）。</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.GetDefaultEvent">
            <summary>
            返回某个组件的此实例的默认事件
            </summary>
            <returns>表示此对象的默认事件的 System.ComponentModel.EventDescriptor；如果该对象没有事件，则为 null。</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.GetDefaultProperty">
            <summary>
            返回此组件实例的默认属性
            </summary>
            <returns>表示此对象的默认属性的 System.ComponentModel.PropertyDescriptor；如果该对象没有属性，则为 null。</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.GetEditor(System.Type)">
            <summary>
            返回指定类型的此实例的一个组件的编辑器
            </summary>
            <param name="editorBaseType">一个 System.Type ，它表示此对象的编辑器</param>
            <returns>System.Object 是此对象的编辑器的指定类型或 null 如果找不到编辑器中。</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.GetEvents">
            <summary>
            返回此组件实例的事件
            </summary>
            <returns>一个 System.ComponentModel.EventDescriptorCollection，表示此组件实例的事件。</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.GetEvents(System.Attribute[])">
            <summary>
            使用指定的属性数组作为筛选器，返回此组件实例的事件。
            </summary>
            <param name="attributes">用作筛选器的 System.Attribute 类型数组</param>
            <returns>表示此组件实例的已筛选事件的 System.ComponentModel.EventDescriptorCollection。</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.GetProperties">
            <summary>
            返回此组件实例的属性
            </summary>
            <returns>表示此组件实例的属性的 System.ComponentModel.PropertyDescriptorCollection。</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.GetProperties(System.Attribute[])">
            <summary>
            使用特性数组作为筛选器，返回此组件实例的属性
            </summary>
            <param name="attributes">用作筛选器的 System.Attribute 类型数组</param>
            <returns>一个 System.ComponentModel.PropertyDescriptorCollection，它表示此组件实例的已筛选属性</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridCollection`1.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            返回一个对象，该对象包含指定的属性描述符所描述的属性
            </summary>
            <param name="pd">一个 System.ComponentModel.PropertyDescriptor，表示要查找其所有者的属性</param>
            <returns>一个 System.Object，表示指定属性的所有者</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.CollectionEditorEx.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.CollectionEditorEx._listbox">
            <summary>
            集合编辑列表控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.CollectionEditorEx.CreateCollectionForm">
            <summary>
            创建一个新的窗体来显示和编辑当前集合
            </summary>
            <returns>一个 System.ComponentModel.Design.CollectionEditor.CollectionForm 作为用户界面提供用于编辑集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.CollectionEditorEx.Ok_Click(System.Object,System.EventArgs)">
            <summary>
            集合编辑器点击OK
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.CollectionEditorEx.CreateNewItemTypes">
            <summary>
            获取此集合编辑器可以包含的数据类型
            </summary>
            <returns>此集合可以包含的数据类型的数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.CollectionEditorEx.CanRemoveInstance(System.Object)">
            <summary>
            指示是否可以删除原始集合的成员
            </summary>
            <param name="value">要移除的值</param>
            <returns>true 如果允许此值从集合中删除;否则为 false。 默认实现始终返回 true</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.CollectionEditorEx.GetObjectsFromInstance(System.Object)">
            <summary>
            返回包含给定的对象的列表
            </summary>
            <param name="instance">System.Collections.ArrayList 作为对象返回</param>
            <returns>System.Collections.ArrayList 其中包含要创建的各个对象</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridOrderAttribute">
            <summary>
            属性排序
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridOrderAttribute.Order">
            <summary>
            顺序索引
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyGridOrderAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="order">顺序索引</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyValueVerifyBase">
            <summary>
            属性设置值有效性验证基类
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyValueVerifyBase.PropertyValueVerifyResultNotify">
            <summary>
            属性值有效性验证结果通知事件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Base.PropertyValueVerifyBase.OnRaisePropertyValueVerifyResultNotify(System.Boolean,System.String)">
            <summary>
            调用属性设置值有效性验证结果通知事件
            </summary>
            <param name="isValid">最新值的有效性[true:有效,false:无效]</param>
            <param name="errorMesage">当最新值无效时的错误提示消息</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoLonLatTypeConverter">
            <summary>
            经度纬度表格属性转换器[此类暂时不使用]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoLonLatTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            返回该转换器是否可以使用指定的上下文将给定类型的对象转换为此转换器的类型[是否从显示文本转换为真实对象]
            </summary>
            <param name="context">提供格式上下文</param>
            <param name="sourceType">表示要转换的类型</param>
            <returns>如果该转换器能够执行转换，则为 true；否则为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoLonLatTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            使用指定的上下文和区域性信息将给定的对象转换为此转换器的类型[从显示文本转换为真实对象]
            </summary>
            <param name="context">提供格式上下文</param>
            <param name="culture">用作当前区域性的 CultureInfo</param>
            <param name="value">要转换的 Object</param>
            <returns>表示转换的 value 的 Object</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoLonLatTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            返回此转换器是否可以使用指定的上下文将该对象转换为指定的类型[是否能转换为显示对象]
            </summary>
            <param name="context">提供格式上下文</param>
            <param name="destinationType">表示要转换到的类型</param>
            <returns>如果该转换器能够执行转换，则为 true；否则为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoLonLatTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            使用指定的上下文和区域性信息将给定的值对象转换为指定的类型[转换为显示对象]
            </summary>
            <param name="context">提供格式上下文</param>
            <param name="culture">如果传递 null，则采用当前区域性</param>
            <param name="value">要转换的 Object</param>
            <param name="destinationType">value 参数要转换成的 Type</param>
            <returns>表示转换的 value 的 Object</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel">
            <summary>
            Demo模型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.Age">
            <summary>
            获取或设置年龄
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.File">
            <summary>
            获取或设置文件
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.Directory">
            <summary>
            获取或设置目录
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel._password">
            <summary>
            数据库密码
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.Password">
            <summary>
            获取或设置数据库连接密码
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.Direction">
            <summary>
            自定义编辑控件
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.Img">
            <summary>
            获取或设置围棋背景
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.p">
            <summary>
            展开
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.PersonEx">
            <summary>
            展开
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.PrimitiveType">
            <summary>
            基元类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.Addr">
            <summary>
            地址信息
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel._mapCenterLatitude">
            <summary>
            地图居中坐标纬度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.MapCenterLatitude">
            <summary>
            获取或设置地图居中坐标纬度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.OrderType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.PropertyGridCategoryNames">
            <summary>
            表格排序组名称列表
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.Addrs">
            <summary>
            地址列表
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.GetPasswordChar(System.String)">
            <summary>
            获取密码显示字符
            </summary>
            <param name="propertyName">属性名称</param>
            <returns>密码显示字符</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.GetFileExtension(System.String)">
            <summary>
            获取文件扩展名
            </summary>
            <param name="propertyName">要获取扩展名的文件字段名称</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.GetFileName(System.String)">
            <summary>
            获取初始包含目录的全路径文件名,默认请返回null[当GetFileName有返回值时,GetInitialDirectory不调用]
            </summary>
            <param name="propertyName">要获取扩展名的文件字段名称</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.GetInitialDirectory(System.String)">
            <summary>
            获取初始目录,默认请返回null[当GetFileName有返回值时,GetInitialDirectory不调用]
            </summary>
            <param name="propertyName">要获取扩展名的文件字段名称</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.GetPropertyGridDropDownItems(System.String)">
            <summary>
            获取表格下拉框选择列表集合
            </summary>
            <param name="propertyName">属性名称</param>
            <returns>表格下拉框选择列表集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.GetPropertyGridDisplayName(System.String)">
            <summary>
            获取下拉列表项对象显示项属性名称
            </summary>
            <param name="propertyName">属性名称</param>
            <returns>下拉列表项对象显示项属性名称</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DemoModel.GetInitialSelectedPath(System.String)">
            <summary>
            获取初始目录
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DirectionEnum">
            <summary>
            PropertyGrid枚举
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DirectionEnum.Left">
            <summary>
            左
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DirectionEnum.Right">
            <summary>
            右
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DirectionEnum.Up">
            <summary>
            上
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.DirectionEnum.Down">
            <summary>
            下
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.NAddress">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.NAddress.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.NAddress.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.NAddress.ToString">
            <summary>
            重写ToString
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.Person">
            <summary>
            Person
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.Person.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.Person.LastName">
            <summary>
            最后一个名字
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.Person.FirstName">
            <summary>
            第一个名字
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.Person.Age">
            <summary>
            年龄
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.Person.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo">
            <summary>
            PropertyGrid排序Demo
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.Name1">
            <summary>
            Name1
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.Birthday">
            <summary>
            NameB
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.Birthday2">
            <summary>
            NameB2
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.Age">
            <summary>
            NameC
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.InnerPerson">
            <summary>
            InnerPerson
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.OrderType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.PropertyGridCategoryNames">
            <summary>
            表格排序组名称列表
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.Employees">
            <summary>
            员工集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.GetCollectionDisplayInfo(System.String)">
            <summary>
            获取集合显示信息
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.GetCreateNewItemTypes">
            <summary>
            获取此集合编辑器可以包含的数据类型
            </summary>
            <returns>此集合可以包含的数据类型的数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.GetObjectsInstanceMaxCount(System.String)">
            <summary>
            获取允许的最大实例数[小于1无限制]
            </summary>
            <param name="propertyName">属性名称</param>
            <returns>许的最大实例数</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.GetCanRemoveInstance(System.String,System.Object)">
            <summary>
            获取集合是否允许删除项
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="value">要移除的值</param>
            <returns>true 如果允许此值从集合中删除;否则为 false。 默认实现始终返回 true</returns>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.CollectionEditCompleted">
            <summary>
            f
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.CollectionEditCompletedNotify(System.String)">
            <summary>
            集合编辑完成
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PersonDemo.ToString">
            <summary>
            重写ToString
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.Employee2">
            <summary>
            Employee is our sample business or domin object. It derives from the general base class Person.
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.Employee">
            <summary>
            Employee is our sample business or domin object. It derives from the general base class Person.
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.EmployeeBase">
            <summary>
            Employee is our sample business or domin object. It derives from the general base class Person.
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PostureCommon">
            <summary>
            态势公共方法类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PostureCommon._longitudeLatitudeAMSStr">
            <summary>
            经度或纬度度分秒格式化字符串
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PostureCommon._longitudeLatitudeSplitArr">
            <summary>
            经度或纬度坐标字符串(80°20′52″格式)拆分字符数组
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PostureCommon.IsNoValid(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            判断经度或纬度是否是无效的[true:无效,false:有效]
            </summary>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="invalidLongitude">无效经度值</param>
            <param name="invalidLatitude">无效纬度值</param>
            <returns>经度或纬度是否是无效的[true:无效,false:有效]</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PostureCommon.LongitudeIsNoValid(System.Double,System.Double)">
            <summary>
            判断经度是否是无效的[true:无效,false:有效]
            </summary>
            <param name="longitude">经度</param>
            <param name="invalidLongitudeLatitude">无效经度值</param>
            <returns>经度是否是无效的[true:无效,false:有效]</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PostureCommon.LatitudeIsNoValid(System.Double,System.Double)">
            <summary>
            判断纬度是否是无效的[true:无效,false:有效]
            </summary>
            <param name="latitude">纬度</param>
            <param name="invalidLatitude">无效纬度值</param>
            <returns>纬度是否是无效的[true:无效,false:有效]</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PostureCommon.ConvertToCoorString(System.Double)">
            <summary>
            转换坐标值转换为坐标显示字符串,小数格式坐标为度分秒格式字符串(110.54->110°45′00″)
            </summary>
            <param name="longitude">经度字符串</param>
            <returns>度分秒格式字符串</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PostureCommon.ConvertCoordStrToCoord(System.Object,System.Object,System.Double@,System.Double@)">
            <summary>
            转换经纬度坐标字符串为经纬度坐标值[转换成功返回true,否则返回false]
            </summary>
            <param name="objLongitude">经度坐标字符串值</param>
            <param name="objLatitude">纬度坐标字符串值</param>
            <param name="longitude">经度值</param>
            <param name="latitude">纬度值</param>
            <returns>转换成功返回true,否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PostureCommon.ConvertCoordStrToCoord(System.Object,System.Double@)">
            <summary>
            转换坐标字符串为坐标值[转换成功返回true,否则返回false]
            </summary>
            <param name="objValue">坐标字符串值</param>
            <param name="value">坐标值</param>
            <returns>转换成功返回true,否则返回false</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PropertyGridCustomEnumEditor">
            <summary>
            属性表格枚举自定义编辑器
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PropertyGridCustomEnumEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            获取由 EditValue 方法使用的编辑器样式
            </summary>
            <param name="context">可用于获取附加上下文信息的 ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle 值，指示 EditValue 方法使用的编辑器样式。 如果 UITypeEditor 不支持该方法，则 GetEditStyle 将返回 None</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PropertyGridCustomEnumEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            使用 GetEditStyle 方法所指示的编辑器样式编辑指定对象的值
            </summary>
            <param name="context">可用于获取附加上下文信息的 ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider，此编辑器可用其来获取服务</param>
            <param name="value">要编辑的对象</param>
            <returns>新的对象值。 如果对象的值尚未更改，则它返回的对象应与传递给它的对象相同</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PropertyGridEnumControl">
            <summary>
            属性表格枚举编辑控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PropertyGridEnumControl.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PropertyGridEnumControl.EnumValue">
            <summary>
            获取编辑的枚举值
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PropertyGridEnumControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PropertyGridEnumControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.PropertyGridEnumControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.SexEnum">
            <summary>
            PropertyGrid枚举
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.SexEnum.M">
            <summary>
            M
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.SexEnum.F">
            <summary>
            F
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Demo.SexEnum.O">
            <summary>
            O
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridCategoryOrder">
            <summary>
            表格分组排序接口
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridCategoryOrder.OrderType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridCategoryOrder.PropertyGridCategoryNames">
            <summary>
            表格排序组名称列表
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridCollection">
            <summary>
            表格集合显示集合接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridCollection.GetCollectionDisplayInfo(System.String)">
            <summary>
            获取集合显示信息
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridCollection.GetCreateNewItemTypes">
            <summary>
            获取此集合编辑器可以包含的数据类型
            </summary>
            <returns>此集合可以包含的数据类型的数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridCollection.GetObjectsInstanceMaxCount(System.String)">
            <summary>
            获取允许的最大实例数[小于1无限制]
            </summary>
            <param name="propertyName">属性名称</param>
            <returns>许的最大实例数</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridCollection.GetCanRemoveInstance(System.String,System.Object)">
            <summary>
            获取集合是否允许删除项
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="value">要移除的值</param>
            <returns>true 如果允许此值从集合中删除;否则为 false。 默认实现始终返回 true</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridCollection.CollectionEditCompletedNotify(System.String)">
            <summary>
            集合编辑完成通知
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridCollectionItem">
            <summary>
            表格集合显示项接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridCollectionItem.GetItemInfo">
            <summary>
            获取集合项显示信息
            </summary>
            <returns>集合项显示信息</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridDirectory">
            <summary>
            表格文件选择接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridDirectory.GetInitialSelectedPath(System.String)">
            <summary>
            获取初始目录
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridDropDown">
            <summary>
            属性表格下拉框选择列表接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridDropDown.GetPropertyGridDropDownItems(System.String)">
            <summary>
            获取表格下拉框选择列表集合
            </summary>
            <param name="propertyName">属性名称</param>
            <returns>表格下拉框选择列表集合</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridDropDown.GetPropertyGridDisplayName(System.String)">
            <summary>
            获取下拉列表项对象显示项属性名称
            </summary>
            <param name="propertyName">属性名称</param>
            <returns>下拉列表项对象显示项属性名称</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridFile">
            <summary>
            表格文件选择接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridFile.GetFileExtension(System.String)">
            <summary>
            获取文件扩展名
            </summary>
            <param name="propertyName">要获取扩展名的文件字段名称</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridFile.GetFileName(System.String)">
            <summary>
            获取初始包含目录的全路径文件名,默认请返回null[当GetFileName有返回值时,GetInitialDirectory不调用]
            </summary>
            <param name="propertyName">要获取扩展名的文件字段名称</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridFile.GetInitialDirectory(System.String)">
            <summary>
            获取初始目录,默认请返回null[当GetFileName有返回值时,GetInitialDirectory不调用]
            </summary>
            <param name="propertyName">要获取扩展名的文件字段名称</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridOrder">
            <summary>
            表格属性排序接口
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridOrder.OrderType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridOrder.GetCustomSortPropertyName(System.Collections.Generic.List{System.String})">
            <summary>
            获取自定义属性排序数组集合[当OrderType值为Custom时必须实现此接口]
            </summary>
            <param name="propertyNames">需要排序的属性名称列表</param>
            <returns>自定义属性排序数组集合</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.PropertyGridOrderType">
            <summary>
            表格排序类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.PropertyGridOrderType.Ascending">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.PropertyGridOrderType.Descending">
            <summary>
            降序
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.PropertyGridOrderType.Custom">
            <summary>
            自定义
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridPassword">
            <summary>
            表格密码设置接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.Interface.IPropertyGridPassword.GetPasswordChar(System.String)">
            <summary>
            获取密码显示字符
            </summary>
            <param name="propertyName">属性名称</param>
            <returns>密码显示字符</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.PropertyGridHelper">
            <summary>
            属性表格辅助扩展类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.PropertyGridHelper.UpdateValue``1(``0,``0)">
            <summary>
            更新通过属性表格修改值的对象中的值到目标对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="valueObj">值对象</param>
            <param name="targetObj">目标对象</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.PropertyGridHelper.SetSelectedObject(System.Windows.Forms.PropertyGrid,System.Object)">
            <summary>
            设置PropertyGrid的SelectedObject
            </summary>
            <param name="propertyGrid">PropertyGrid</param>
            <param name="selectedObject">SelectedObject</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.PropertyGridHelper.propertyGrid_SelectedObjectsChanged(System.Object,System.EventArgs)">
            <summary>
            PropertyGrid控件SelectedObjectsChanged
            </summary>
            <param name="sender">sender</param>
            <param name="e">e</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.PropertyGridHelper.propertyGrid_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            PropertyGrid控件Paint
            </summary>
            <param name="sender">sender</param>
            <param name="e">e</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridCollectionConverter">
            <summary>
            PropertyGrid集合显示信息接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            使用指定的上下文和区域性信息将给定的值对象转换为指定的类型[转换为显示对象]
            </summary>
            <param name="context">提供格式上下文</param>
            <param name="culture">如果传递 null，则采用当前区域性</param>
            <param name="value">要转换的 Object</param>
            <param name="destType">value 参数要转换成的 Type</param>
            <returns>表示转换的 value 的 Object</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridCollectionItemConverter">
            <summary>
            PropertyGrid集合项显示信息接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridCollectionItemConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            使用指定的上下文和区域性信息将给定的值对象转换为指定的类型[转换为显示对象]
            </summary>
            <param name="context">提供格式上下文</param>
            <param name="culture">如果传递 null，则采用当前区域性</param>
            <param name="value">要转换的 Object</param>
            <param name="destType">value 参数要转换成的 Type</param>
            <returns>表示转换的 value 的 Object</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridDropdownConverter">
            <summary>
            属性表格编辑下拉框转换器(用于枚举和基元集合或复杂对象集合下拉选择)
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridDropdownConverter._ipropertyGridDropDownListType">
            <summary>
            IPropertyGridDropDownList类型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridDropdownConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            使用指定的上下文返回此对象是否支持可以从列表中选取的标准值集
            </summary>
            <param name="context">提供格式上下文</param>
            <returns>如果应调用 GetStandardValues 来查找对象支持的一组公共值，则为 true；否则，为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridDropdownConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            获取下拉框的显示枚举集合
            </summary>
            <param name="context">提供格式上下文</param>
            <returns>包含标准有效值集的 TypeConverter.StandardValuesCollection；如果数据类型不支持标准值集，则为null</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridDropdownConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            返回该转换器是否可以使用指定的上下文将给定类型的对象转换为此转换器的类型[是否从显示文本转换为真实对象]
            </summary>
            <param name="context">提供格式上下文</param>
            <param name="sourceType">表示要转换的类型</param>
            <returns>如果该转换器能够执行转换，则为 true；否则为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridDropdownConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            使用指定的上下文和区域性信息将给定的对象转换为此转换器的类型[从显示文本转换为真实对象]
            </summary>
            <param name="context">提供格式上下文</param>
            <param name="culture">用作当前区域性的 CultureInfo</param>
            <param name="value">要转换的 Object</param>
            <returns>表示转换的 value 的 Object</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridDropdownConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            返回此转换器是否可以使用指定的上下文将该对象转换为指定的类型[是否能转换为显示对象]
            </summary>
            <param name="context">提供格式上下文</param>
            <param name="destinationType">表示要转换到的类型</param>
            <returns>如果该转换器能够执行转换，则为 true；否则为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridDropdownConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            使用指定的上下文和区域性信息将给定的值对象转换为指定的类型[转换为显示对象]
            </summary>
            <param name="context">提供格式上下文</param>
            <param name="culture">如果传递 null，则采用当前区域性</param>
            <param name="value">要转换的 Object</param>
            <param name="destinationType">value 参数要转换成的 Type</param>
            <returns>表示转换的 value 的 Object</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridPasswordConverter">
            <summary>
            属性表格密码编辑转换器
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridPasswordConverter._stringType">
            <summary>
            字符串类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridPasswordConverter._ipropertyGridPasswordType">
            <summary>
            表格密码设置接口类型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridPasswordConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            返回该转换器是否可以使用指定的上下文将给定类型的对象转换为此转换器的类型[是否从显示文本转换为真实对象]
            </summary>
            <param name="context">提供格式上下文</param>
            <param name="sourceType">表示要转换的类型</param>
            <returns>如果该转换器能够执行转换，则为 true；否则为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridPasswordConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            使用指定的上下文和区域性信息将给定的对象转换为此转换器的类型[从显示文本转换为真实对象]
            </summary>
            <param name="context">提供格式上下文</param>
            <param name="culture">用作当前区域性的 CultureInfo</param>
            <param name="value">要转换的 Object</param>
            <returns>表示转换的 value 的 Object</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridPasswordConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            返回此转换器是否可以使用指定的上下文将该对象转换为指定的类型[是否能转换为显示对象]
            </summary>
            <param name="context">提供格式上下文</param>
            <param name="destinationType">表示要转换到的类型</param>
            <returns>如果该转换器能够执行转换，则为 true；否则为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridPasswordConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            使用指定的上下文和区域性信息将给定的值对象转换为指定的类型[转换为显示对象]
            </summary>
            <param name="context">提供格式上下文</param>
            <param name="culture">如果传递 null，则采用当前区域性</param>
            <param name="value">要转换的 Object</param>
            <param name="destinationType">value 参数要转换成的 Type</param>
            <returns>表示转换的 value 的 Object</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridSortConverter">
            <summary>
            PropertyGrid排序Converter
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridSortConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            使用指定的上下文返回此对象是否支持可以从列表中选取的标准值集
            </summary>
            <param name="context">提供格式上下文</param>
            <returns>如果应调用 GetStandardValues 来查找对象支持的一组公共值，则为 true；否则，为 false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridSortConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            获取由值参数指定的对象类型的属性集合
            </summary>
            <param name="context">一个 System.ComponentModel.ITypeDescriptorContext，用于提供格式上下文</param>
            <param name="value">System.Object ，它指定要获取其属性的对象类型</param>
            <param name="attributes">类型的数组 System.Attribute ，将用作筛选器</param>
            <returns>一个 System.ComponentModel.PropertyDescriptorCollection 与组件公开的属性或 null 是否存在任何属性</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.TypeConverters.PropertyGridSortConverter.GetOrderedPropertyNames(System.ComponentModel.PropertyDescriptorCollection,System.Boolean)">
            <summary>
            获取属性名称排序列表
            </summary>
            <param name="pdc">PropertyDescriptorCollection</param>
            <param name="orderFlag">true:升序;false:降序</param>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.UITypeEditors.PropertyGridDirectoryEditor">
            <summary>
            属性编辑窗口目录编辑
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.UITypeEditors.PropertyGridDirectoryEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            获取由 EditValue 方法使用的编辑器样式
            </summary>
            <param name="context">可用于获取附加上下文信息的 ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle  值，指示 EditValue 方法使用的编辑器样式。 如果 UITypeEditor 不支持该方法，则 GetEditStyle 将返回 None</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.UITypeEditors.PropertyGridDirectoryEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            使用 GetEditStyle 方法所指示的编辑器样式编辑指定对象的值
            </summary>
            <param name="context">可用于获取附加上下文信息的 ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider ，此编辑器可用其来获取服务</param>
            <param name="value">要编辑的对象</param>
            <returns>新的对象值。 如果对象的值尚未更改，则它返回的对象应与传递给它的对象相同</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.UITypeEditors.PropertyGridFileEditor">
            <summary>
            属性编辑窗口文件编辑
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.UITypeEditors.PropertyGridFileEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            获取由 EditValue 方法使用的编辑器样式
            </summary>
            <param name="context">可用于获取附加上下文信息的 ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle  值，指示 EditValue 方法使用的编辑器样式。 如果 UITypeEditor 不支持该方法，则 GetEditStyle 将返回 None</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.PropertyGrid.UITypeEditors.PropertyGridFileEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            使用 GetEditStyle 方法所指示的编辑器样式编辑指定对象的值
            </summary>
            <param name="context">可用于获取附加上下文信息的 ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider ，此编辑器可用其来获取服务</param>
            <param name="value">要编辑的对象</param>
            <returns>新的对象值。 如果对象的值尚未更改，则它返回的对象应与传递给它的对象相同</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.Resource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.Resource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.Resource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.Resource.Dropdown">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.Resource.firstPage">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.Resource.lastPage">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.Resource.LoadWait">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.Resource.nextPage">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.Resource.prePage">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.UCOpacityControlBase">
            <summary>
            半透明用户控件基类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.UCOpacityControlBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.UCOpacityControlBase._opacity">
            <summary>
            透明度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.UCOpacityControlBase.Opacity">
            <summary>
            获取或设置控件透明度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.UCOpacityControlBase.BackColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.UCOpacityControlBase._backgroundBrush">
            <summary>
            背景画刷
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.UCOpacityControlBase._realColor">
            <summary>
            真实背景色
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.UCOpacityControlBase.RealColor">
            <summary>
            获取或设置真实背景色
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.UCOpacityControlBase.CreateParams">
            <summary>
            重写控件生成参数使控件支持透明
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Controls.UCOpacityControlBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘控件
            </summary>
            <param name="e">e</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl">
            <summary>
            控件接口
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.Load">
            <summary>
            在第一次显示控件前发生
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.LostFocus">
            <summary>
            当控件失去焦点时发生
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.Width">
            <summary>
            获取或设置控件的宽度（以像素为单位）
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.Height">
            <summary>
            获取或设置控件的高度（以像素为单位）
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.Size">
            <summary>
            获取或设置窗体的大小
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.Visible">
            <summary>
            获取或设置一个值，该值指示是否显示该控件及其所有子控件
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.Location">
            <summary>
            获取或设置以屏幕坐标表示的代表 System.Windows.Forms.Form 左上角的 System.Drawing.Point。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.UIDesignMode">
            <summary>
            获取UI是否处于设计器模式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.InvokeRequired">
            <summary>
            获取一个值，该值指示调用方在对控件进行方法调用时是否必须调用 Invoke 方法，因为调用方位于创建控件所在的线程以外的线程中
            如果控件的 System.Windows.Forms.Control.Handle 是在与调用线程不同的线程上创建的（说明您必须通过 Invoke方法对控件进行调用），则为 true；否则为 false。
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.Controls">
            <summary>
            获取包含在控件内的控件的集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.Dock">
            <summary>
            获取或设置哪些控件边框停靠到其父控件并确定控件如何随其父级一起调整大小
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.IsDisposed">
            <summary>
            获取一个值，该值指示控件是否已经被释放[如果控件已经被释放，则为 true；否则为 false]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.Invoke(System.Delegate)">
            <summary>
            在拥有此控件的基础窗口句柄的线程上执行指定的委托
            </summary>
            <param name="method">包含要在控件的线程上下文中调用的方法的委托</param>
            <returns>正在被调用的委托的返回值，或者如果委托没有返回值，则为 null</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.Invoke(System.Delegate,System.Object[])">
            <summary>
            在拥有控件的基础窗口句柄的线程上，用指定的参数列表执行指定委托
            </summary>
            <param name="method">一个方法委托，它采用的参数的数量和类型与 args 参数中所包含的相同</param>
            <param name="args">作为指定方法的参数传递的对象数组。如果此方法没有参数，该参数可以是 null</param>
            <returns>System.Object，它包含正被调用的委托返回值；如果该委托没有返回值，则为 null</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.FindForm">
            <summary>
            检索控件所在的窗体
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.Focus">
            <summary>
            为控件设置输入焦点
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.Hide">
            <summary>
            隐藏控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.Refresh">
            <summary>
            强制控件使其工作区无效并立即重绘自己和任何子控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IControl.Contains(System.Windows.Forms.Control)">
            <summary>
            检索一个值，该值指示指定控件是否为一个控件的子控件
            </summary>
            <param name="ctl">要计算的 System.Windows.Forms.Control</param>
            <returns>如果指定控件是控件的子控件，则为 true；否则为 false</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IForm">
            <summary>
            窗口接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IForm.ShowDialog">
            <summary>
            将窗口显示为模态对话框
            </summary>
            <returns>对话返回值</returns>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IForm.StartPosition">
            <summary>
            获取或设置运行时窗体的起始位置
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IForm.FormClosing">
            <summary>
            关闭窗体前发生
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IOriginalDataShow">
            <summary>
            原始数据展示接口
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IOriginalDataShow.DefaultOriginalDataShowType">
            <summary>
            默认原始数据显示类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IOriginalDataShow.IgnoreDataShowTypes">
            <summary>
            获取或设置排除或忽略要展示的原始数据项集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IOriginalDataShow.DataLoadType">
            <summary>
            获取当前数据加载类型[true:二进制;false:文件]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IOriginalDataShow.FileName">
            <summary>
            获取或设置数据文件路径
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IOriginalDataShow.Data">
            <summary>
            获取或设置数据
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IOriginalDataShow.Clear">
            <summary>
            清除当前显示
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.OriginalDataShowType">
            <summary>
            原始数据显示类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.OriginalDataShowType.ASC">
            <summary>
            ASC编码
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.OriginalDataShowType.Unicode">
            <summary>
            Unicode编码
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.OriginalDataShowType.Bin">
            <summary>
            二进制
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.OriginalDataShowType.Hex">
            <summary>
            十六进制
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.OriginalDataShowTypeCollection">
            <summary>
            原始数据显示类型集合
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.OriginalDataShowTypeCollection._items">
            <summary>
            数据项集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.OriginalDataShowTypeCollection.#ctor(System.Collections.Generic.IEnumerable{UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.OriginalDataShowType})">
            <summary>
            构造函数
            </summary>
            <param name="items">数据项集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.OriginalDataShowTypeCollection.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数
            </summary>
            <returns>一个循环访问集合的枚举数</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.OriginalDataShowTypeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数
            </summary>
            <returns>一个循环访问集合的枚举数</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IUIAction">
            <summary>
            UI动作行为接口
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.IUIAction.MouseAction">
            <summary>
            鼠标行为动作事件
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionArgs">
            <summary>
            鼠标操作命令事参数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionArgs.#ctor(UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionType,System.Windows.Forms.MouseEventArgs)">
            <summary>
            构造函数
            </summary>
            <param name="type">获取鼠标行为类型</param>
            <param name="mouseArgs">鼠标操作参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionArgs.#ctor(UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionType,System.EventArgs)">
            <summary>
            构造函数
            </summary>
            <param name="type">获取鼠标行为类型</param>
            <param name="args">事件参数</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionArgs.Type">
            <summary>
            获取鼠标行为类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionArgs.Args">
            <summary>
            事件参数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionArgs.MouseArgs">
            <summary>
            鼠标事件参数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionType">
            <summary>
            鼠标行为类形
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionType.MouseDown">
            <summary>
            鼠标按下
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionType.MouseMove">
            <summary>
            鼠标移动
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionType.MouseUp">
            <summary>
            鼠标弹起
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionType.MouseWheel">
            <summary>
            移动鼠标滚轮
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionType.MouseEnter">
            <summary>
            鼠标指针进入控件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionType.MouseLeave">
            <summary>
            鼠标指针离开控件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.Winform.Interface.MouseActionType.MouseHover">
            <summary>
            鼠标指针停放在控件上
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.ChromeWindowHelper">
            <summary>
            ChromeWindow辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.ChromeWindowHelper.AdjustWindowFullScreenSizeLocation(System.Windows.Window,System.Double)">
            <summary>
            调整窗口全屏大小和位置
            </summary>
            <param name="window">目标窗口</param>
            <param name="pre">用于比较的误差精度值</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.TextBlockEx">
            <summary>
            TextBlock扩展类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.TextBlockEx.SetTextBlockToolTip(System.Windows.Controls.TextBlock,System.String,System.Double)">
            <summary>
            当文本长度超出TextBlock范围时，设置ToolTip
            </summary>
            <param name="textBlock">TextBlock</param>
            <param name="tooltip">tooltip</param>
            <param name="pre">误差值</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.TextBoxEx">
            <summary>
            TextBox扩展类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.TextBoxEx.SetTextBoxToolTip(System.Windows.Controls.TextBox,System.String,System.Double)">
            <summary>
            当文本长度超出TextBox范围时，设置ToolTip
            </summary>
            <param name="textBox">TextBox</param>
            <param name="tooltip">tooltip</param>
            <param name="pre">误差值</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.ValueConverterAbs">
            <summary>
            ValueConverter基类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.ValueConverterAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.ValueConverterAbs.GetEntryAssemblyDirectory">
            <summary>
            获取主程序目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.ValueConverterAbs.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            将后台对象转换为显示的对象
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.ValueConverterAbs.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            将显示的对象转换为后台对象
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.WPFHelper">
            <summary>
            WPF辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.WPFHelper.IsInDesignMode(System.Windows.UIElement)">
            <summary>
            判断UI是否处于设计模式[处理设计模式返回true;否则返回false]
            </summary>
            <param name="ele">要判断的UI元素</param>
            <returns>处理设计模式返回true;否则返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.WPFHelper.IsDisposed(System.Windows.Window)">
            <summary>
            判断当前窗口是否已释放[返回值:true:已释放Invoke;false:未释放]
            </summary>
            <param name="window">要判判断的窗口</param>
            <returns>返回值:true:已释放Invoke;false:未释放</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.WPFHelper.InvokeRequired(System.Windows.Threading.DispatcherObject)">
            <summary>
            判断当前操作是否需要调用Invoke[返回值:true:调用Invoke;false:不需要]
            </summary>
            <param name="dispatcher">判断的对象</param>
            <returns>返回值:true:调用Invoke;false:不需要</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Base.WPFHelper.FindRootWindow(System.Windows.FrameworkElement)">
            <summary>
            查找元素根窗口
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.VisibilityBoolConverter">
            <summary>
            Visibility与Bool转换接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.VisibilityBoolConverter.#ctor">
            <summary>
            构造函数 
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.VisibilityBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            将后台对象转换为显示的对象
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.VisibilityBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            将显示的对象转换为后台对象
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetInfoGroup">
            <summary>
            机柜组-对应一行机柜
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetInfoGroup.Group">
            <summary>
            机柜组
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetInfoGroup.Name">
            <summary>
            组名
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetInfoGroup.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetInfo">
            <summary>
            机柜信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetInfo.Name">
            <summary>
            机柜名称
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetInfo.Height">
            <summary>
            机柜高度,总U数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetInfo.CabinetDeviceUnitList">
            <summary>
            设备单元列表
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDeviceUnit">
            <summary>
            设备单元
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDeviceUnit.BeginLocation">
            <summary>
            设备U起始索引
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDeviceUnit.Height">
            <summary>
            设备高度,占U数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDeviceUnit.DeviceList">
            <summary>
            设备列表,为null或Count=0,表示空U
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDeviceUnit.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDevice">
            <summary>
            设备
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDevice.PropertyChanged">
            <summary>
            属性值改变通知事件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDevice.OnRaisePropertyChanged(System.String)">
            <summary>
            属性值改变通知方法
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDevice.DeviceName">
            <summary>
            获取或设置该U对应的设备名称
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDevice.DeviceBackground">
            <summary>
            获取或设置该U背景
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDevice.DeviceStatusBrush">
            <summary>
            设备状态元素
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDevice.DeviceBorderThickness">
            <summary>
            设备边框宽度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDevice.DeviceBorderBrush">
            <summary>
            设备边框Brush
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDevice.Orientation">
            <summary>
            机柜共用位置设备方向
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDevice.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDevice.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DeviceOrientation">
            <summary>
            机柜共用位置设备方向
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DeviceOrientation.None">
            <summary>
            无共用
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DeviceOrientation.Left">
            <summary>
            左
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DeviceOrientation.Right">
            <summary>
            右
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DeviceOrientation.Front">
            <summary>
            前
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DeviceOrientation.Back">
            <summary>
            后
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetCalibrationControl">
            <summary>
            UCCabinetUnitControl.xaml 的交互逻辑
            </summary>
            <summary>
            UCCabinetCalibrationControl
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetCalibrationControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetCalibrationControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl">
            <summary>
            UCCabinetControl.xaml 的交互逻辑
            </summary>
            <summary>
            UCCabinetControl
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.CabinetInfoGroupListProperty">
            <summary>
            机柜设备组列表依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.RowSeparatorProperty">
            <summary>
            机柜设备行间距依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.ColumnSeparatorProperty">
            <summary>
            机柜设备列间距依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.TitleVisibleProperty">
            <summary>
            标题是否显示依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.CabinetWidthProperty">
            <summary>
            机柜宽度依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.DeviceNameStyleProperty">
            <summary>
            设备名称样式依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.CabinetNameStyleProperty">
            <summary>
            机柜名称样式依赖属性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.CabinetInfoGroupList">
            <summary>
            获取或设置机柜设备组列表
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.RowSeparator">
            <summary>
            获取或设置机柜行间距,单位/像素
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.ColumnSeparator">
            <summary>
            获取或设置机柜列间距,单位/像素
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.TitleVisible">
            <summary>
            标题是否显示[true:显示;false:不显示]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.CabinetWidth">
            <summary>
            机柜宽度,单位/像素
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.DeviceNameStyle">
            <summary>
            获取或设置设备名称样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.CabinetNameStyle">
            <summary>
            获取或设置机柜名称样式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetDeviceControl">
            <summary>
            UCCabinetDeviceUnitControl.xaml 的交互逻辑
            </summary>
            <summary>
            UCCabinetDeviceControl
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetDeviceControl.DeviceNameStyleProperty">
            <summary>
            设备名称样式依赖属性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetDeviceControl.DeviceNameStyle">
            <summary>
            获取或设置设备名称样式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetDeviceControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetDeviceControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetDeviceUControl">
            <summary>
            UCCabinetU.xaml 的交互逻辑
            </summary>
            <summary>
            UCCabinetDeviceUControl
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetDeviceUControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetDeviceUControl.UpdateCabinetDevice(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDeviceUnit,System.Windows.Style)">
            <summary>
            更新机柜设备
            </summary>
            <param name="deviceUnit"></param>
            <param name="deviceNameStyle"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetDeviceUControl.UpdateDeviceNameStyle(System.Windows.Style)">
            <summary>
            蠹啄剖梁柱设备名称样式
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetDeviceUControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetEmptyUCalibrationControl">
            <summary>
            UCCabinetEmptyUCalibrationControl.xaml 的交互逻辑
            </summary>
            <summary>
            UCCabinetEmptyUCalibrationControl
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetEmptyUCalibrationControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetEmptyUCalibrationControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetEmptyUControl">
            <summary>
            UCCabinet4U.xaml 的交互逻辑
            </summary>
            <summary>
            UCCabinetEmptyUControl
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetEmptyUControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetEmptyUControl.UpdateCabinetDevice(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.CabinetDeviceUnit)">
            <summary>
            更新设备单元
            </summary>
            <param name="deviceUnit">备单元</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetEmptyUControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl">
            <summary>
            UCCabinetRowControl.xaml 的交互逻辑
            </summary>
            <summary>
            UCCabinetRowControl
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.CabinetInfoGroupProperty">
            <summary>
            机柜设备列表依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.SeparatorProperty">
            <summary>
            机柜设备间距依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.TitleVisibleProperty">
            <summary>
            标题是否显示依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.CabinetWidthProperty">
            <summary>
            机柜宽度依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.DeviceNameStyleProperty">
            <summary>
            设备名称样式依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.CabinetNameStyleProperty">
            <summary>
            机柜名称样式依赖属性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.CabinetInfoGroup">
            <summary>
            获取或设置机柜设备列表
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.Separator">
            <summary>
            获取或设置机柜间距,单位/像素
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.TitleVisible">
            <summary>
            标题是否显示[true:显示;false:不显示]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.CabinetWidth">
            <summary>
            机柜宽度,单位/像素
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.DeviceNameStyle">
            <summary>
            获取或设置设备名称样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.CabinetNameStyle">
            <summary>
            获取或设置机柜名称样式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.CalCabineRowtControlWidth(System.Int32,System.Double,System.Double)">
            <summary>
            计算行控件宽度
            </summary>
            <param name="cabineCount"></param>
            <param name="cabinetWidth"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.CalCabinetWidth(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            计算机柜控件宽度
            </summary>
            <param name="cabineCount"></param>
            <param name="totalWidth"></param>
            <param name="separator"></param>
            <param name="maxWidth"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCCabinetRowControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCSingleCabinetControl">
            <summary>
            UCCabinetControl.xaml 的交互逻辑
            </summary>
            <summary>
            UCSingleCabinetControl
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCSingleCabinetControl.CabinetInfoProperty">
            <summary>
            烟雾值依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCSingleCabinetControl.DeviceNameStyleProperty">
            <summary>
            设备名称样式依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCSingleCabinetControl.CabinetNameStyleProperty">
            <summary>
            机柜名称样式依赖属性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCSingleCabinetControl.CabinetNameStyle">
            <summary>
            获取或设置机柜名称样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCSingleCabinetControl.DeviceNameStyle">
            <summary>
            获取或设置设备名称样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCSingleCabinetControl.CabinetInfo">
            <summary>
            获取或设置机柜设备列表
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCSingleCabinetControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCSingleCabinetControl.CalCabinetControlHeight(System.Int32)">
            <summary>
            计算机柜控件高度
            </summary>
            <param name="height">机柜身体高度</param>
            <returns>机柜控件高度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCSingleCabinetControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs">
            <summary>
            坐标基类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.DockOrientation">
            <summary>
            坐标轴停靠方向
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.AxisType">
            <summary>
            坐标轴类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.Orientation">
            <summary>
            坐标方向
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.LabelStyle">
            <summary>
            刻度值样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.LabelSize">
            <summary>
            刻度线宽度或高度小于0使用默认值30,单位:像素
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.LabelMinInterval">
            <summary>
            两个刻度值间最小间隔, 为double.NaN使用默认值,单位:像素
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.DrawAxisLine">
            <summary>
            true:绘制坐标线;false:不绘制坐标线
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.AxisLineStyle">
            <summary>
            坐标线样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.EnableBackgroundLabelLine">
            <summary>
            是否启用背景刻度线
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.BackgroundLabelLineStyle">
            <summary>
            背景刻度线样式
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.CreateBackgroundLabelLineFunc">
            <summary>
            创建图表中坐标背景线回调
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.TitleStyle">
            <summary>
            标题样式
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs._PRE">
            <summary>
            浮点数比较精度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.PRE">
            <summary>
            浮点数比较精度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.Background">
            <summary>
            获取或设置坐标样式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.GetIsAllowZoomTranslate">
            <summary>
            获取是坐标允许缩放平移
            </summary>
            <returns></returns>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.ZoomDelta">
            <summary>
            坐标轴缩放变化量,值无效或小于等于0,不进行缩放,大于等于0为每次缩放比例[取值范围0-1];默认为double.NaN
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs._zoom">
            <summary>
            显示比例
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.Zoom">
            <summary>
            获取或设置缩放比例,值必需大于0,小于等于0或double.NaN使用默认值1,不进行缩放
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.ZoomIn(System.Windows.Controls.Canvas,System.Double@)">
            <summary>
            缩小
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.ZoomOut(System.Windows.Controls.Canvas,System.Double@)">
            <summary>
            放大
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.PrimitiveZoom(System.Windows.Controls.Canvas,System.Double@)">
            <summary>
            缩放
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.Update(System.Windows.Controls.Canvas)">
            <summary>
            缩放更新
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.Width">
            <summary>
            获取坐标轴宽度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.Height">
            <summary>
            获取坐标轴高度
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs._axisCanvas">
            <summary>
            绘制坐标的画布
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.CalculateAxisSize(System.Double)">
            <summary>
            计算X轴高度和Y轴宽度
            </summary>
            <param name="labelTextSize">Label文本X轴高度,Y轴宽度</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.GetAxisYLabelTextLineInterval">
            <summary>
            获取Y轴Label和文本之间的间隔
            </summary>
            <returns>Y轴Label和文本之间的间隔</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.GetXAxisHeight">
            <summary>
            获取X坐标轴高度
            </summary>
            <returns>X坐标轴高度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.PrimitiveGetXAxisHeight">
            <summary>
            获取X坐标轴高度
            </summary>
            <returns>X坐标轴高度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.DrawX(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries},System.Double)">
            <summary>
            绘制X轴
            </summary>
            <param name="seriesCollection">Series集合</param>
            <param name="axisWidth">X轴宽度</param>
            <returns>Label的X列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.PrimitiveDrawX(System.Windows.Controls.Canvas,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries})">
            <summary>
            绘制X轴
            </summary>
            <param name="axisCanvas">画布</param>
            <param name="seriesCollection">Series集合</param>
            <returns>Label的X列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.DrawY(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries},System.Double)">
            <summary>
            绘制Y轴
            </summary>
            <param name="seriesCollection">Series集合</param>
            <param name="axisHeight">Y轴高度</param>
            <returns>Label的Y列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.PrimitiveDrawY(System.Windows.Controls.Canvas,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries})">
            <summary>
            子类重写此函数时,必须设置Y轴宽度
            </summary>
            <param name="axisCanvas">画布</param>
            <param name="seriesCollection">Series集合</param>
            <returns>Label的Y列表</returns>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.AxisControl">
            <summary>
            获取坐标轴控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.IsAxisYLeft">
            <summary>
            Y坐标轴是否左停靠
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.IsAxisXBottom">
            <summary>
            X坐标轴是否底部停靠
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.Validate">
            <summary>
            验证坐标轴有效性,无效直接抛出ArgumentException异常
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.PrimitiveValidate">
            <summary>
            验证坐标轴有效性,无效直接抛出ArgumentException异常
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.GetX(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem)">
            <summary>
            获取指定项在X轴的坐标值
            </summary>
            <param name="item">目标项</param>
            <returns>指定项在X轴的坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.PrimitiveGetX(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem)">
            <summary>
            获取指定项在X轴的坐标值
            </summary>
            <param name="item">目标项</param>
            <returns>指定项在X轴的坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.GetY(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem)">
            <summary>
            获取指定项在Y轴的坐标值
            </summary>
            <param name="item">目标项</param>
            <returns>指定项在Y轴的坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs.PrimitiveGetY(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem)">
            <summary>
            获取指定项在Y轴的坐标值
            </summary>
            <param name="item">目标项</param>
            <returns>指定项在Y轴的坐标值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisLabelOrientation">
            <summary>
            坐标刻度方向
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisLabelOrientation.LeftToRight">
            <summary>
            从左往右
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisLabelOrientation.TopToBottom">
            <summary>
            从上往下
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisLabelOrientation.RightToLeft">
            <summary>
            从右往左
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisLabelOrientation.BottomToTop">
            <summary>
            从下往上
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisType">
            <summary>
            坐标类类型
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisType.X">
            <summary>
            X轴
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisType.Y">
            <summary>
            Y轴
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeAxis">
            <summary>
            日期时间坐标轴
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeAxis.LabelStep">
            <summary>
            坐标轴刻度值间隔,为null时自动计算
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeAxis.MinValue">
            <summary>
            坐标轴刻度最小值,为null时自动计算
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeAxis.MaxValue">
            <summary>
            坐标轴刻度最大值,为null时自动计算
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeAxis.ShowLastLabel">
            <summary>
            是否显示刻度标记[true:显示;false:不显示]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeAxis.CustomAxisTextFormatCunc">
            <summary>
            获取或设置自定义LabelText
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeAxis.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeAxis.PrimitiveGetXAxisHeight">
            <summary>
            获取X坐标轴高度
            </summary>
            <returns>X坐标轴高度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeAxis.PrimitiveDrawY(System.Windows.Controls.Canvas,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries})">
            <summary>
            子类重写此函数时,必须设置Y轴宽度
            </summary>
            <param name="axisCanvas">画布</param>
            <param name="seriesCollection">Series集合</param>
            <returns>Label的Y列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeAxis.PrimitiveDrawX(System.Windows.Controls.Canvas,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries})">
            <summary>
            绘制X轴
            </summary>
            <param name="axisCanvas">画布</param>
            <param name="seriesCollection">Series集合</param>
            <returns>Label的X列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeAxis.PrimitiveGetX(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem)">
            <summary>
            获取指定项在X轴的坐标值
            </summary>
            <param name="item">目标项</param>
            <returns>指定项在X轴的坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeAxis.PrimitiveGetY(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem)">
            <summary>
            获取指定项在Y轴的坐标值
            </summary>
            <param name="item">目标项</param>
            <returns>指定项在Y轴的坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeAxis.Update(System.Windows.Controls.Canvas)">
            <summary>
            缩放更新
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelAxis">
            <summary>
            LabelAxis
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelAxis.AxisSize">
            <summary>
            X轴表示坐标轴表高度,Y轴表示坐标轴宽度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelAxis.AutoSizeFactor">
            <summary>
            自动计算条形图宽度因子,越大表示自动计算出来的条形图越宽,默认值2
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelAxis.Angle">
            <summary>
            旋转角度
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelAxis.CustomAxisTextFormatCunc">
            <summary>
            获取或设置自定义LabelText
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelAxis._axisData">
            <summary>
            [key:Label;value:LabelItem]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelAxis.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelAxis.PrimitiveGetXAxisHeight">
            <summary>
            获取X坐标轴高度
            </summary>
            <returns>X坐标轴高度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelAxis.CreateAxisData(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries})">
            <summary>
            返回Column X:宽度或Y:高度
            </summary>
            <param name="seriesCollection"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelAxis.PrimitiveDrawX(System.Windows.Controls.Canvas,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries})">
            <summary>
            绘制X轴
            </summary>
            <param name="axisCanvas">画布</param>
            <param name="seriesCollection">Series集合</param>
            <returns>Label的X列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelAxis.PrimitiveDrawY(System.Windows.Controls.Canvas,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries})">
            <summary>
            子类重写此函数时,必须设置Y轴宽度
            </summary>
            <param name="axisCanvas">画布</param>
            <param name="seriesCollection">Series集合</param>
            <returns>Label的Y列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelAxis.PrimitiveGetX(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem)">
            <summary>
            获取指定项在X轴的坐标值
            </summary>
            <param name="item">目标项</param>
            <returns>指定项在X轴的坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelAxis.PrimitiveGetY(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem)">
            <summary>
            获取指定项在Y轴的坐标值
            </summary>
            <param name="item">目标项</param>
            <returns>指定项在Y轴的坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelAxis.Update(System.Windows.Controls.Canvas)">
            <summary>
            缩放更新
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LabelSeriesItem">
            <summary>
            [key:IChartItem;value:坐标值]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AngleQuadrantInfo.Radians">
            <summary>
            角度对应的弧度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AngleQuadrantInfo.ModRadians">
            <summary>
            用于计算值的余角弧度
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberAxis">
            <summary>
            数值坐标轴
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberAxis.LabelStep">
            <summary>
            坐标轴刻度值间隔,为double.NaN时自动计算
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberAxis.MinValue">
            <summary>
            坐标轴刻度最小值,为double.NaN时自动计算
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberAxis.MaxValue">
            <summary>
            坐标轴刻度最大值,为double.NaN时自动计算
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberAxis.ShowLastLabel">
            <summary>
            是否显示刻度标记[true:显示;false:不显示]
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberAxis.CustomAxisTextFormatCunc">
            <summary>
            获取或设置自定义LabelText
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberAxis.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberAxis.PrimitiveGetXAxisHeight">
            <summary>
            获取X坐标轴高度
            </summary>
            <returns>X坐标轴高度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberAxis.PrimitiveDrawY(System.Windows.Controls.Canvas,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries})">
            <summary>
            子类重写此函数时,必须设置Y轴宽度
            </summary>
            <param name="axisCanvas">画布</param>
            <param name="seriesCollection">Series集合</param>
            <returns>Label的Y列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberAxis.PrimitiveDrawX(System.Windows.Controls.Canvas,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries})">
            <summary>
            绘制X轴
            </summary>
            <param name="axisCanvas">画布</param>
            <param name="seriesCollection">Series集合</param>
            <returns>Label的X列表</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberAxis.PrimitiveGetX(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem)">
            <summary>
            获取指定项在X轴的坐标值
            </summary>
            <param name="item">目标项</param>
            <returns>指定项在X轴的坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberAxis.PrimitiveGetY(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem)">
            <summary>
            获取指定项在Y轴的坐标值
            </summary>
            <param name="item">目标项</param>
            <returns>指定项在Y轴的坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberAxis.Update(System.Windows.Controls.Canvas)">
            <summary>
            缩放更新
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.BackgroundLabelLineSegment">
            <summary>
            图表区域坐标线段
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.BackgroundLabelLineSegment.Point1">
            <summary>
            点1
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.BackgroundLabelLineSegment.Point2">
            <summary>
            点2
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.BackgroundLabelLineSegment.#ctor(System.Windows.Point,System.Windows.Point)">
            <summary>
            构造函数
            </summary>
            <param name="point1">点1</param>
            <param name="point2">点2</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1">
            <summary>
            Chart集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.CollectionChanged">
            <summary>
            集合改变事件
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.ChartCollectionChanged">
            <summary>
            Chart集合改变事件
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引的值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.Count">
            <summary>
            获取集合中的元素个数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.IsReadOnly">
            <summary>
            集合是否只读
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.Add(`0)">
            <summary>
            添加项到集合中
            </summary>
            <param name="item">新项</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加集合到本集合中
            </summary>
            <param name="items">目标集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.Insert(System.Int32,`0)">
            <summary>
            插入项到指定位置
            </summary>
            <param name="index">插入位置</param>
            <param name="item">要插入的项</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入集合到指定位置
            </summary>
            <param name="index">插入位置</param>
            <param name="items">要插入的集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.Remove(`0)">
            <summary>
            移除项
            </summary>
            <param name="item">要移除的项</param>
            <returns>移除结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.RemoveAll(System.Predicate{`0})">
            <summary>
            移除满足匹配条件的项
            </summary>
            <param name="match">匹配条件</param>
            <returns>移除的项数</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的项
            </summary>
            <param name="index">目标索引</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.Clear">
            <summary>
            清空集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.Contains(`0)">
            <summary>
            集合中是否包含某项
            </summary>
            <param name="item">目标项</param>
            <returns>包含结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制集合到指定数据
            </summary>
            <param name="array">目标数据</param>
            <param name="arrayIndex">起始位置</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.IndexOf(`0)">
            <summary>
            检索某项所在位置
            </summary>
            <param name="item">目标项</param>
            <returns>目标项在集合中的位置</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerable.GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollection`1.Tag">
            <summary>
            获取或设置标记Tag
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartConstant">
            <summary>
            图表常量定义类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartConstant.ZERO_D">
            <summary>
            double0
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartConstant.ZERO_I">
            <summary>
            int0
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartConstant.LABEL_TEXT_INTERVAL">
            <summary>
            标签现文本之间的间隔
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartConstant.DEFAULT_STEP_SIZE">
            <summary>
            默认步长
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartConstant.AXIS_DEFAULT_SIZE">
            <summary>
            坐标默认宽度或高度
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartConstant.TOOLTIP_PRE">
            <summary>
            TOOLTIP有效范围精度
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartConstant.ROW_COLUMN_DEFAULT_INDEX">
            <summary>
            Grid行列默认索引
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartConstant.GRID_START_SIZE">
            <summary>
            Grid*指示大小宽度
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartConstant.DEFAULT_ZOOM">
            <summary>
            默认缩放比例值
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartDockOrientation">
            <summary>
            图表元素停靠方向
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartDockOrientation.Left">
            <summary>
            左侧
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartDockOrientation.Top">
            <summary>
            上侧
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartDockOrientation.Right">
            <summary>
            右侧
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartDockOrientation.Bottom">
            <summary>
            下侧
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartCollection`1">
            <summary>
            Chart集合接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartCollection`1.ChartCollectionChanged">
            <summary>
            Chart集合改变事件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the range.
            </summary>
            <param name="index">The index.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollectionChangedEventArgs`1">
            <summary>
            Chart集合改变事件参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollectionChangedEventArgs`1.Action">
            <summary>
            改变行为
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollectionChangedEventArgs`1.NewItems">
            <summary>
            新项集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollectionChangedEventArgs`1.OldItems">
            <summary>
            旧项集合
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollectionChangedEventArgs`1.#ctor(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollectionChangedAction,System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            构造函数
            </summary>
            <param name="action">改变行为</param>
            <param name="newItems">新项集合</param>
            <param name="oldItems">旧项集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollectionChangedEventArgs`1.#ctor(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollectionChangedAction,`0,`0)">
            <summary>
            构造函数
            </summary>
            <param name="action">改变行为</param>
            <param name="newItem">新项</param>
            <param name="oldItem">旧项</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollectionChangedAction">
            <summary>
            Chart集合改变改变行为
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollectionChangedAction.Add">
            <summary>
            添加
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollectionChangedAction.Remove">
            <summary>
            移除
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollectionChangedAction.Replace">
            <summary>
            替换
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartCollectionChangedAction.Move">
            <summary>
            移动
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PointInfo">
            <summary>
            Chart绘制点信息
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PointInfo.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PointInfo.Item">
            <summary>
            数据项
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PointInfo.#ctor(System.Windows.Point,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartValue)">
            <summary>
            构造函数
            </summary>
            <param name="point">Point</param>
            <param name="item">数据项</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PointInfo.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem">
            <summary>
            SeriesLegendItem
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem.Brush">
            <summary>
            Series Brush
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem.Title">
            <summary>
            Series Title
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem.Series">
            <summary>
            Series
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem.CliceControls">
            <summary>
            片所包含的控件集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem.ShowSeries">
            <summary>
            是否显示当前项
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem.#ctor(System.Windows.Media.Brush,System.String,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries)">
            <summary>
            构造函数
            </summary>
            <param name="brush">Series Brush</param>
            <param name="title">Series Title</param>
            <param name="series">Series</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem.#ctor(System.Windows.Media.Brush,System.String,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries,System.Collections.Generic.IEnumerable{System.Windows.FrameworkElement})">
            <summary>
            构造函数
            </summary>
            <param name="brush">Series Brush</param>
            <param name="title">Series Title</param>
            <param name="series">Series</param>
            <param name="sliceControls">片所包含的控件集合</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesOrientation">
            <summary>
            Series方向
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesOrientation.Horizontal">
            <summary>
            水平方向
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesOrientation.Vertical">
            <summary>
            垂直方向
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ValueCollection">
            <summary>
            Series值集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ValueCollection.Name">
            <summary>
            参数值名称
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ValueCollection.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValueAbs">
            <summary>
            包含坐标双值项基类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValueAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValueAbs.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tooltipText">tooltipText</param>
            <param name="tag">tag</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValueAbs.GetXValue1">
            <summary>
            获取X轴坐标值1
            </summary>
            <returns>X轴坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValueAbs.GetXValue2">
            <summary>
            获取X轴坐标值2
            </summary>
            <returns>X轴坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValueAbs.GetYValue1">
            <summary>
            获取Y轴坐标值1
            </summary>
            <returns>Y轴坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValueAbs.GetYValue2">
            <summary>
            获取Y轴坐标值2
            </summary>
            <returns>Y轴坐标值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisValueAbs">
            <summary>
            包含坐标值项基类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisValueAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisValueAbs.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tooltipText">tooltipText</param>
            <param name="tag">tag</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisValueAbs.GetXValue">
            <summary>
            获取X轴坐标值
            </summary>
            <returns>X轴坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisValueAbs.GetYValue">
            <summary>
            获取Y轴坐标值
            </summary>
            <returns>Y轴坐标值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartChildValueAbs">
            <summary>
            ChartValue子项基类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartChildValueAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartChildValueAbs.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tooltipText">tooltipText</param>
            <param name="tag">tag</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartChildValueAbs.GetValue">
            <summary>
            获取子项值
            </summary>
            <returns>子项值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartItemAbs">
            <summary>
            Chart项基类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartItemAbs.TooltipText">
            <summary>
            Series上点显示的TooltipText
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartItemAbs.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartItemAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartItemAbs.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tooltipText">tooltipText</param>
            <param name="tag">tag</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLabelValueAbs">
            <summary>
            Chart Label值基类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLabelValueAbs.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLabelValueAbs.LabelLineStyle">
            <summary>
            Label线样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLabelValueAbs.LabelStyle">
            <summary>
            样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLabelValueAbs.MinValue">
            <summary>
            最小值,double.NaN自动计算
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLabelValueAbs.MaxValue">
            <summary>
            最大值,double.NaN自动计算
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLabelValueAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLabelValueAbs.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tooltipText">tooltipText</param>
            <param name="tag">tag</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLabelValueAbs.ToString">
            <summary>
            重写ToString
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartNoAxisValueAbs">
            <summary>
            无坐标值基类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartNoAxisValueAbs.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartNoAxisValueAbs.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartNoAxisValueAbs.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartNoAxisValueAbs.Style">
            <summary>
            样式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartNoAxisValueAbs.GetValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartNoAxisValueAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartNoAxisValueAbs.#ctor(System.Object,System.String,System.String,System.Windows.Style,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value">值</param>
            <param name="label">Label</param>
            <param name="title">标题</param>
            <param name="style">样式</param>
            <param name="tooltip">tooltip</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartRadarValueAbs">
            <summary>
            雷达图值基类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartRadarValueAbs.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartRadarValueAbs.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartRadarValueAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartRadarValueAbs.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tooltipText">tooltipText</param>
            <param name="tag">tag</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartRadarValueAbs.GetLabel">
            <summary>
            获取Label
            </summary>
            <returns>Label</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartRadarValueAbs.GetValue">
            <summary>
            获取值
            </summary>
            <returns>值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartValueAbs">
            <summary>
            Chart值基类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartValueAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartValueAbs.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tooltipText">tooltipText</param>
            <param name="tag">tag</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartAxisDoubleValue">
            <summary>
            包含坐标双值项接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartAxisDoubleValue.GetXValue1">
            <summary>
            获取X轴坐标值1
            </summary>
            <returns>X轴坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartAxisDoubleValue.GetXValue2">
            <summary>
            获取X轴坐标值2
            </summary>
            <returns>X轴坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartAxisDoubleValue.GetYValue1">
            <summary>
            获取Y轴坐标值1
            </summary>
            <returns>Y轴坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartAxisDoubleValue.GetYValue2">
            <summary>
            获取Y轴坐标值2
            </summary>
            <returns>Y轴坐标值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartAxisValue">
            <summary>
            包含坐标值项接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartAxisValue.GetXValue">
            <summary>
            获取X轴坐标值
            </summary>
            <returns>X轴坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartAxisValue.GetYValue">
            <summary>
            获取Y轴坐标值
            </summary>
            <returns>Y轴坐标值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartChildValue">
            <summary>
            ChartValue子项接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartChildValue.GetValue">
            <summary>
            获取子项值
            </summary>
            <returns>子项值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem">
            <summary>
            Chart项接口
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem.TooltipText">
            <summary>
            Series上点显示的TooltipText
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLabelValue">
            <summary>
            Chart Label值接口
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLabelValue.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLabelValue.LabelLineStyle">
            <summary>
            Label线样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLabelValue.LabelStyle">
            <summary>
            Label文本样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLabelValue.MinValue">
            <summary>
            最小值,double.NaN自动计算
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLabelValue.MaxValue">
            <summary>
            最大值,double.NaN自动计算
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartNoAxisValue">
            <summary>
            无坐标值接口
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartNoAxisValue.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartNoAxisValue.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartNoAxisValue.Style">
            <summary>
            样式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartNoAxisValue.GetValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartRadarValue">
            <summary>
            雷达图值接口
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartRadarValue.GetLabel">
            <summary>
            获取Label
            </summary>
            <returns>Label</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartRadarValue.GetValue">
            <summary>
            获取值
            </summary>
            <returns>值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartValue">
            <summary>
            Chart值接口
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValue">
            <summary>
            包含坐标双值项类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValue.XValue1">
            <summary>
            X轴坐标值1
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValue.XValue2">
            <summary>
            X轴坐标值2
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValue.YValue1">
            <summary>
            Y轴坐标值1
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValue.YValue2">
            <summary>
            Y轴坐标值2
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValue.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValue.GetXValue1">
            <summary>
            获取X轴坐标值1
            </summary>
            <returns>X轴坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValue.GetXValue2">
            <summary>
            获取X轴坐标值2
            </summary>
            <returns>X轴坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValue.GetYValue1">
            <summary>
            获取Y轴坐标值1
            </summary>
            <returns>Y轴坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisDoubleValue.GetYValue2">
            <summary>
            获取Y轴坐标值2
            </summary>
            <returns>Y轴坐标值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisValue">
            <summary>
            包含坐标值项实体类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisValue.XValue">
            <summary>
            获取X轴值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisValue.YValue">
            <summary>
            获取Y轴值
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisValue.#ctor(System.Object,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="xValue">X轴值</param>
            <param name="yValue">Y轴值</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisValue.#ctor(System.Object,System.Object,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="xValue">X轴值</param>
            <param name="yValue">Y轴值</param>
            <param name="tooltipText">tooltipText</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisValue.GetXValue">
            <summary>
            获取X轴坐标值
            </summary>
            <returns>X轴坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisValue.GetYValue">
            <summary>
            获取Y轴坐标值
            </summary>
            <returns>Y轴坐标值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartAxisValue.ToString">
            <summary>
            重写ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartChildValue">
            <summary>
            ChartValue子项实体类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartChildValue.Value">
            <summary>
            获取子项值
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartChildValue.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartChildValue.#ctor(System.Object,System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="value">子项值</param>
            <param name="tooltipText">tooltipText</param>
            <param name="tag">tag</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartChildValue.GetValue">
            <summary>
            获取子项值
            </summary>
            <returns>子项值</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLabelValue">
            <summary>
            Chart Label值类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLabelValue.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLabelValue.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tooltipText">tooltipText</param>
            <param name="tag">tag</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartNoAxisValue">
            <summary>
            无坐标值实体类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartNoAxisValue.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartNoAxisValue.#ctor(System.Object,System.String,System.String,System.Windows.Style,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value"></param>
            <param name="label"></param>
            <param name="title"></param>
            <param name="style"></param>
            <param name="tooltip"></param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartRadarValue">
            <summary>
            雷达图值类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartRadarValue.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartRadarValue.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tooltipText">tooltipText</param>
            <param name="tag">tag</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper">
            <summary>
            坐标辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.DoubleToCeilingInteger(System.Double,System.Nullable{System.Int64})">
            <summary>
            向上取整
            </summary>
            <param name="value">目标值</param>
            <param name="muilt">放大倍数</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.DoubleToFloorInteger(System.Double,System.Nullable{System.Int64})">
            <summary>
            向下取整
            </summary>
            <param name="value">目标值</param>
            <param name="muilt">缩小倍数</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.CalDoubleToIntegerMuilt(System.Double)">
            <summary>
            计算double值向上或向下取整的倍数
            </summary>
            <param name="value">目标值</param>
            <returns>double值向上或向下取整的倍数</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.DoubleHasValue(System.Double)">
            <summary>
            判断double什是否有效[有效返回true;无效返回false]
            </summary>
            <param name="value">目标值</param>
            <returns>有效返回true;无效返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.DrawXAxisLabelLine(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs,System.Windows.Controls.Canvas,System.Double,System.Double)">
            <summary>
            绘制X轴坐标刻度线
            </summary>
            <param name="axis">X轴坐标</param>
            <param name="canvas">画布</param>
            <param name="x1">第一个X</param>
            <param name="x2">第二个X</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.DrawXAxisLabelLine(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs,System.Windows.Controls.Canvas,System.Collections.Generic.List{System.Double})">
            <summary>
            绘制X轴坐标刻度线
            </summary>
            <param name="axis">X轴坐标</param>
            <param name="canvas">画布</param>
            <param name="xList">X轴刻度集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.DrawYAxisLabelLine(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs,System.Windows.Controls.Canvas,System.Double,System.Double)">
            <summary>
            绘制Y轴坐标刻度线
            </summary>
            <param name="axis">Y轴坐标</param>
            <param name="canvas">画布</param>
            <param name="y1">第一个Y</param>
            <param name="y2">第二个Y</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.DrawYAxisLabelLine(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs,System.Windows.Controls.Canvas,System.Collections.Generic.List{System.Double})">
            <summary>
            绘制Y轴坐标刻度线
            </summary>
            <param name="axis">Y轴坐标</param>
            <param name="canvas">画布</param>
            <param name="yList">Y轴刻度集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.CalculateLabelStepSize(System.Double,System.Double,System.Double)">
            <summary>
            计算LabelStepX坐标轴宽度或Y坐标轴高度
            </summary>
            <param name="area">坐标值范围</param>
            <param name="axisSize">X坐标轴宽度或Y坐标轴高度</param>
            <param name="labelStepValue">labelStep值</param>
            <returns>LabelStepX坐标轴宽度或Y坐标轴高度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.CreateLabelControl(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs,System.String)">
            <summary>
            创建坐标轴Label控件
            </summary>
            <param name="axis">坐标轴</param>
            <param name="labelText">标签文本</param>
            <returns>Label控件</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.MeasureLabelTextSize(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs,System.String)">
            <summary>
            测量标签文本大小
            </summary>
            <param name="axis">坐标轴</param>
            <param name="labelText">标签文本</param>
            <returns>标签文本大小</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.GetChartItemAxisValue(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem,System.Boolean)">
            <summary>
            获取IChartItem中坐标轴的值
            </summary>
            <param name="item">目标项</param>
            <param name="x">X轴为true;Y轴为false</param>
            <returns>IChartItem中坐标轴的值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.CreateColumn(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IColumnSeries)">
            <summary>
            创建ColumnSeries显示控件
            </summary>
            <param name="series">ColumnSeries</param>
            <returns>ColumnSeries显示控件</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.SetColumnTooltipText(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IColumnSeries,System.String,System.Windows.FrameworkElement)">
            <summary>
            设置ColumnSeriesTooltip
            </summary>
            <param name="series">ColumnSeries</param>
            <param name="tooltipText">Tooltip</param>
            <param name="column">Column控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.ConvertToDouble(System.Object)">
            <summary>
            将object转换为double,转换失败返回double.NaN
            </summary>
            <param name="obj">目标对象</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisHelper.ConvertToDateTime(System.Object)">
            <summary>
            将object转换为DateTime,转换失败返回null
            </summary>
            <param name="obj">目标对象</param>
            <returns>转换结果</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper">
            <summary>
            坐标辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.DoubleToCeilingInteger(System.Double,System.Nullable{System.Int64})">
            <summary>
            向上取整
            </summary>
            <param name="value">目标值</param>
            <param name="muilt">放大倍数</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.DoubleToFloorInteger(System.Double,System.Nullable{System.Int64})">
            <summary>
            向下取整
            </summary>
            <param name="value">目标值</param>
            <param name="muilt">缩小倍数</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.CalDoubleToIntegerMuilt(System.Double)">
            <summary>
            计算double值向上或向下取整的倍数
            </summary>
            <param name="value">目标值</param>
            <returns>double值向上或向下取整的倍数</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.DoubleHasValue(System.Double)">
            <summary>
            判断double什是否有效[有效返回true;无效返回false]
            </summary>
            <param name="value">目标值</param>
            <returns>有效返回true;无效返回false</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.DrawXAxisLabelLine(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs,System.Windows.Controls.Canvas,System.Double,System.Double)">
            <summary>
            绘制X轴坐标刻度线
            </summary>
            <param name="axis">X轴坐标</param>
            <param name="canvas">画布</param>
            <param name="x1">第一个X</param>
            <param name="x2">第二个X</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.DrawXAxisLabelLine(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs,System.Windows.Controls.Canvas,System.Collections.Generic.List{System.Double})">
            <summary>
            绘制X轴坐标刻度线
            </summary>
            <param name="axis">X轴坐标</param>
            <param name="canvas">画布</param>
            <param name="xList">X轴刻度集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.DrawYAxisLabelLine(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs,System.Windows.Controls.Canvas,System.Double,System.Double)">
            <summary>
            绘制Y轴坐标刻度线
            </summary>
            <param name="axis">Y轴坐标</param>
            <param name="canvas">画布</param>
            <param name="y1">第一个Y</param>
            <param name="y2">第二个Y</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.DrawYAxisLabelLine(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs,System.Windows.Controls.Canvas,System.Collections.Generic.List{System.Double})">
            <summary>
            绘制Y轴坐标刻度线
            </summary>
            <param name="axis">Y轴坐标</param>
            <param name="canvas">画布</param>
            <param name="yList">Y轴刻度集合</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.CalculateLabelStepSize(System.Double,System.Double,System.Double)">
            <summary>
            计算LabelStepX坐标轴宽度或Y坐标轴高度
            </summary>
            <param name="area">坐标值范围</param>
            <param name="axisSize">X坐标轴宽度或Y坐标轴高度</param>
            <param name="labelStepValue">labelStep值</param>
            <returns>LabelStepX坐标轴宽度或Y坐标轴高度</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.CreateLabelControl(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs,System.String)">
            <summary>
            创建坐标轴Label控件
            </summary>
            <param name="axis">坐标轴</param>
            <param name="labelText">标签文本</param>
            <returns>Label控件</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.MeasureLabelTextSize(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisAbs,System.String)">
            <summary>
            测量标签文本大小
            </summary>
            <param name="axis">坐标轴</param>
            <param name="labelText">标签文本</param>
            <returns>标签文本大小</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.GetChartItemAxisValue(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartItem,System.Boolean)">
            <summary>
            获取IChartItem中坐标轴的值
            </summary>
            <param name="item">目标项</param>
            <param name="x">X轴为true;Y轴为false</param>
            <returns>IChartItem中坐标轴的值</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.CreateColumn(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IColumnSeries)">
            <summary>
            创建ColumnSeries显示控件
            </summary>
            <param name="series">ColumnSeries</param>
            <returns>ColumnSeries显示控件</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.SetColumnTooltipText(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IColumnSeries,System.String,System.Windows.FrameworkElement)">
            <summary>
            设置ColumnSeriesTooltip
            </summary>
            <param name="series">ColumnSeries</param>
            <param name="tooltipText">Tooltip</param>
            <param name="column">Column控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.ConvertToDouble(System.Object)">
            <summary>
            将object转换为double,转换失败返回double.NaN
            </summary>
            <param name="obj">目标对象</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartHelper.ConvertToDateTime(System.Object)">
            <summary>
            将object转换为DateTime,转换失败返回null
            </summary>
            <param name="obj">目标对象</param>
            <returns>转换结果</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartStyleHelper">
            <summary>
            Chart样式辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartStyleHelper.GetSegmentSeriesDefaultStyle">
            <summary>
            获取SegmentSeries默认样式(Line)
            </summary>
            <returns>SegmentSeries默认样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartStyleHelper.CreateSegmentSeriesStyle(System.Windows.Media.Brush,System.Double,System.Double)">
            <summary>
            创建SegmentSeries样式(Line)
            </summary>
            <param name="stroke">Line.Stroke</param>
            <param name="strokeThickness">Line.StrokeThickness</param>
            <param name="mouseOverStrokeThickness">鼠标移上去时Line.StrokeThickness的值</param>
            <returns>SegmentSeries默认样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartStyleHelper.GetDefaultAxisLabelLineStyle">
            <summary>
            获取默认坐标标签线样式(Path)
            </summary>
            <returns>默认坐标标签线样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartStyleHelper.GetDefaultBackgroundLabelLineStyle">
            <summary>
            获取默认坐标标签背景线样式(Path)
            </summary>
            <returns>默认坐标标签背景线样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartStyleHelper.GetAxisLabelStyle(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartDockOrientation)">
            <summary>
            获取默认坐标标签样式(TextBlock)
            </summary>
            <returns>默认坐标标签样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartStyleHelper.CreateAxisTitleStyle(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartDockOrientation)">
            <summary>
            创建坐标标题样式(TextBlock)
            </summary>
            <returns>坐标标题样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartStyleHelper.GetLineSeriesDefaultStyle">
            <summary>
            获取LineSeries默认样式(Path)
            </summary>
            <returns>LineSeries默认样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartStyleHelper.CreateLineSeriesStyle(System.Windows.Media.Brush,System.Double,System.Double)">
            <summary>
            创建LineSeries样式(Path)
            </summary>
            <param name="stroke">Path.Stroke</param>
            <param name="strokeThickness">Path.StrokeThickness</param>
            <param name="mouseOverStrokeThickness">鼠标移上去时Path.StrokeThickness的值</param>
            <returns>LineSeries样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartStyleHelper.CreateColumnSeriesStyle(System.Windows.Media.Brush,System.Windows.Media.Brush,System.Double,System.Double)">
            <summary>
            创建ColumnSeries样式
            </summary>
            <param name="fill">Rectangle.Fill</param>
            <param name="stroke">Rectangle.Stroke</param>
            <param name="strokeThickness">Rectangle.StrokeThickness</param>
            <param name="mouseOverStrokeThickness">鼠标移上去时Rectangle.StrokeThickness的值</param>
            <returns>ColumnSeries样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartStyleHelper.CreateColumnSeriesStyle(System.Windows.Media.Brush,System.Double)">
            <summary>
            创建ColumnSeries样式(Rectangle)
            </summary>
            <param name="fill">Rectangle.Fill</param>
            <param name="mouseOverOpacity">鼠标移上去时Rectangle.Opacity的值</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartStyleHelper.CreatePieSeriesStyle(System.Windows.Media.Brush,System.Windows.Media.Brush,System.Double,System.Double)">
            <summary>
            创建PieSeries样式(Path)
            </summary>
            <param name="stroke">Path.Stroke</param>
            <param name="fill">Path.Fill</param>
            <param name="strokeThickness">Path.StrokeThickness</param>
            <param name="mouseOverStrokeThickness">鼠标移上去时Path.StrokeThickness的值</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartStyleHelper.CreateRadarSeriesAxisStytle(System.Windows.Media.Brush)">
            <summary>
            创建雷达图坐标样式(Line)
            </summary>
            <param name="stroke">颜色</param>
            <returns>达图坐标样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartStyleHelper.CreateRadarSeriesItemStytle(System.Windows.Media.Brush,System.Windows.Media.Brush,System.Double,System.Double,System.Double)">
            <summary>
            创建雷达图坐标样式(Path)
            </summary>
            <param name="stroke">颜色</param>
            <param name="fill">填充</param>
            <param name="opacity">透明度</param>
            <param name="strokeThickness">Path.StrokeThickness</param>
            <param name="mouseOverStrokeThickness">鼠标移上去时Path.StrokeThickness的值</param>
            <returns>达图坐标样式</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ColorBrushHelper">
            <summary>
            SolidColorBrush辅助类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ColorBrushHelper._colorBrushList">
            <summary>
            Gets or sets the application level default series color list
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ColorBrushHelper.GetNextColor">
            <summary>
            获取下一种颜色的Brush
            </summary>
            <returns>Brush</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ColorBrushHelper.GetNextColorByIndex(System.Int32@)">
            <summary>
            获取指定索引的颜色的Brush
            </summary>
            <param name="index">目标索引</param>
            <returns>Brush</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ColorBrushHelper.GetColorByIndex(System.Int32)">
            <summary>
            获取指定索引的颜色的Brush
            </summary>
            <param name="index">目标索引</param>
            <returns>Brush</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLegendResourceDictionaryKeyConstant">
            <summary>
            Legend ItemControl.ItemTemplate Key定义常量类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLegendResourceDictionaryKeyConstant.NO_EDIT_LEGEND_ITEMCONTROL_STYLE_KEY">
            <summary>
            UI上不允许点击CheckBox
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartLegendResourceDictionaryKeyConstant.ALOOW_EDIT_LEGEND_ITEMCONTROL_STYLE_KEY">
            <summary>
            UI上允许点击CheckBox
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.HorizontalChartLegend">
            <summary>
            HorizontalChartLegend.xaml 的交互逻辑
            </summary>
            <summary>
            HorizontalChartLegend
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.HorizontalChartLegend.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.HorizontalChartLegend.DockOrientation">
            <summary>
            获取或设置Legend控件停靠方向
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.HorizontalChartLegend.Size">
            <summary>
            获取或设置水平方向高度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.HorizontalChartLegend.AllowChecked">
            <summary>
            获取或设置允许选中项
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.HorizontalChartLegend.LegendControl">
            <summary>
            获取或设置获取Legend控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.HorizontalChartLegend.UpdateLegend(System.Collections.Generic.List{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem})">
            <summary>
            更新Legend控件显示项
            </summary>
            <param name="legendBrushList">Legend控件显示项列表</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.HorizontalChartLegend.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLegend">
            <summary>
            Legend接口
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLegend.DockOrientation">
            <summary>
            获取或设置Legend控件停靠方向
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLegend.AllowChecked">
            <summary>
            获取或设置允许选中项
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLegend.Size">
            <summary>
            获取或设置水平方向高度;垂直方向宽高度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLegend.HorizontalAlignment">
            <summary>
            获取或设置Legend控件水平对齐方式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLegend.VerticalAlignment">
            <summary>
            获取或设置Legend控件垂直对齐方式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLegend.Margin">
            <summary>
            获取或设置Legend控件Margin
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLegend.LegendControl">
            <summary>
            获取或设置获取Legend控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLegend.UpdateLegend(System.Collections.Generic.List{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem})">
            <summary>
            更新Legend控件显示项
            </summary>
            <param name="legendBrushList">Legend控件显示项列表</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.VerticalChartLegend">
            <summary>
            VerticalChartLegend.xaml 的交互逻辑
            </summary>
            <summary>
            VerticalChartLegend
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.VerticalChartLegend.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.VerticalChartLegend.DockOrientation">
            <summary>
            获取或设置Legend控件停靠方向
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.VerticalChartLegend.Size">
            <summary>
            获取或设置垂直方向宽高度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.VerticalChartLegend.AllowChecked">
            <summary>
            获取或设置允许选中项
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.VerticalChartLegend.LegendControl">
            <summary>
            获取或设置获取Legend控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.VerticalChartLegend.UpdateLegend(System.Collections.Generic.List{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem})">
            <summary>
            更新Legend控件显示项
            </summary>
            <param name="legendBrushList">Legend控件显示项列表</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.VerticalChartLegend.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ColumnSeries">
            <summary>
            条形图
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ColumnSeries.Orientation">
            <summary>
            获取或设置ColumnSeries方向
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ColumnSeries.Size">
            <summary>
            获取或设置ColumnSeries水平方向高度,垂直方向宽度,为double.NaN则自动计算,默认为double.NaN
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ColumnSeries.GetStyle">
            <summary>
            获取ColumnSeries样式
            </summary>
            <returns>ColumnSeries样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ColumnSeries.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ColumnSeries.StyleChanged(System.Windows.Style)">
            <summary>
            重写StyleChanged
            </summary>
            <param name="style">新样式</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ColumnSeries.PrimitiveDraw(System.Windows.Controls.Canvas)">
            <summary>
            重写PrimitiveAdd
            </summary>
            <param name="canvas"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ColumnSeries.PrimitiveClear(System.Windows.Controls.Canvas)">
            <summary>
            重写PrimitiveRemove
            </summary>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ColumnSeries.VisibilityChanged(System.Windows.Visibility,System.Windows.Visibility)">
            <summary>
            重写VisibilityChanged
            </summary>
            <param name="oldVisibility"></param>
            <param name="newVisibility"></param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries">
            <summary>
            Series接口
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.AxisX">
            <summary>
            获取或设置X坐标轴
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.AxisY">
            <summary>
            获取或设置Y坐标轴
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.CreatePointFunc">
            <summary>
            获取或设置创建坐标点对应的附加控件回调
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.ValuesCollectionChanged">
            <summary>
            Values集合改变事件
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.Values">
            <summary>
            获取或设置值集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.Style">
            <summary>
            获取或设置Series样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.EnableTooltip">
            <summary>
            获取或设置是否启用Tooltip[true:启用Tooltip;false:禁用Tooltip]
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.TooltipArea">
            <summary>
            获取或设置Tooltip有效区域,鼠标点周围范围内有点则触发Tooltip,小于0使用默认值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.Title">
            <summary>
            获取或设置Series标题
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.Draw(System.Windows.Controls.Canvas)">
            <summary>
            将Series绘制到已设置设定大小的画布中
            </summary>
            <param name="canvas">目标画布</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.Clear">
            <summary>
            将Series从画布中移除[返回值:true:需要全部重绘;false:不需要重绘]
            </summary>
            <returns>返回值:true:需要全部重绘;false:不需要重绘</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.Update">
            <summary>
            更新Series
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.AppendLegendItemToList(System.Collections.Generic.List{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem})">
            <summary>
            将Series中的Legend项追加到列表中
            </summary>
            <param name="legendBrushList">Legend列表</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.Visibility">
            <summary>
            获取或设置SeriesVisibility
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ISeries.Tag">
            <summary>
            获取或设置Tag
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeries">
            <summary>
            线形图
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeries.LineSeriesType">
            <summary>
            获取或设置线曲线类型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeries.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeries.CreatePathGeometry(System.Collections.Generic.List{System.Collections.Generic.List{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PointInfo}})">
            <summary>
            创建曲线Geometry
            </summary>
            <param name="pointInfoListCollection">目标点信息集合</param>
            <returns>Geometry</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeriesType">
            <summary>
            线类型枚举
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeriesType.PolyLine">
            <summary>
            特点:比较硬 
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeriesType.Bezier">
            <summary>
            特点:追加点时最后一节线的趋势走向与追加之前会发生变化
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeriesType.PolyQuadraticBezier">
            <summary>
            特点:线与点会发生偏移
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeriesType.QuadraticBezier">
            <summary>
            特点:转角很尖锐
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeriesBase">
            <summary>
            LineSeries基类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeriesBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeriesBase.StyleChanged(System.Windows.Style)">
            <summary>
            Series样式改变通知
            </summary>
            <param name="style">新样式</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeriesBase.EnableTooltipChanged(System.Boolean)">
            <summary>
            EnableTooltip改变通知
            </summary>
            <param name="enableTooltip">新EnableTooltip值</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeriesBase.PrimitiveDraw(System.Windows.Controls.Canvas)">
            <summary>
            将Series添加到已设置设定大小的画布中
            </summary>
            <param name="canvas">目标画布</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeriesBase.CreatePathGeometry(System.Collections.Generic.List{System.Collections.Generic.List{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PointInfo}})">
            <summary>
            创建曲线Geometry
            </summary>
            <param name="pointInfoListCollection">目标点信息集合</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeriesBase.PrimitiveClear(System.Windows.Controls.Canvas)">
            <summary>
            将Series从画布中移除[返回值:true:需要全部重绘;false:不需要重绘]
            </summary>
            <returns>返回值:true:需要全部重绘;false:不需要重绘</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LineSeriesBase.VisibilityChanged(System.Windows.Visibility,System.Windows.Visibility)">
            <summary>
            Visibility改变通知
            </summary>
            <param name="oldVisibility">旧值</param>
            <param name="newVisibility">新值</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PieSeries">
            <summary>
            饼图
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PieSeries.AxisX">
            <summary>
            获取或设置X坐标轴
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PieSeries.AxisY">
            <summary>
            获取或设置Y坐标轴
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PieSeries.CreatePointFunc">
            <summary>
            获取或设置创建坐标点对应的附加控件回调
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PieSeries.TooltipArea">
            <summary>
            获取或设置Tooltip有效区域,鼠标点周围范围内有点则触发Tooltip,小于0使用默认值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PieSeries.Style">
            <summary>
            获取或设置Series样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PieSeries.LabelStyle">
            <summary>
            标签样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PieSeries.Radius">
            <summary>
            饼图半径,小于等于0或为IsInfinity或NaN使用控件高度和宽度中的最小值
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PieSeries.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PieSeries.PrimitiveDraw(System.Windows.Controls.Canvas)">
            <summary>
            将Series添加到已设置设定大小的画布中
            </summary>
            <param name="canvas">目标画布</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PieSeries.PrimitiveClear(System.Windows.Controls.Canvas)">
            <summary>
            将Series从画布中移除[返回值:true:需要全部重绘;false:不需要重绘]
            </summary>
            <returns>返回值:true:需要全部重绘;false:不需要重绘</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PieSeries.StyleChanged(System.Windows.Style)">
            <summary>
            Series样式改变通知
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PieSeries.VisibilityChanged(System.Windows.Visibility,System.Windows.Visibility)">
            <summary>
            Visibility改变通知
            </summary>
            <param name="oldVisibility">旧值</param>
            <param name="newVisibility">新值</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarSeries">
            <summary>
            雷达Series
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarSeries.AxisX">
            <summary>
            获取或设置X坐标轴
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarSeries.AxisY">
            <summary>
            获取或设置Y坐标轴
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarSeries.CreatePointFunc">
            <summary>
            获取或设置创建坐标点对应的附加控件回调
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarSeries.TooltipArea">
            <summary>
            获取或设置Tooltip有效区域,鼠标点周围范围内有点则触发Tooltip,小于0使用默认值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarSeries.Radius">
            <summary>
            雷达图半径,小于等于0或为IsInfinity或NaN使用控件高度和宽度中的最小值
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarSeries.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarSeries.PrimitiveClear(System.Windows.Controls.Canvas)">
            <summary>
            将Series从画布中移除[返回值:true:需要全部重绘;false:不需要重绘]
            </summary>
            <returns>返回值:true:需要全部重绘;false:不需要重绘</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarSeries.PrimitiveDraw(System.Windows.Controls.Canvas)">
            <summary>
            将Series绘制到已设置设定大小的画布中
            </summary>
            <param name="canvas">目标画布</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarSeries.EnableTooltipChanged(System.Boolean)">
            <summary>
            EnableTooltip改变通知
            </summary>
            <param name="enableTooltip">新EnableTooltip值</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarSeries.StyleChanged(System.Windows.Style)">
            <summary>
            Series样式改变通知
            </summary>
            <param name="style">新样式</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarSeries.VisibilityChanged(System.Windows.Visibility,System.Windows.Visibility)">
            <summary>
            Visibility改变通知
            </summary>
            <param name="oldVisibility">旧值</param>
            <param name="newVisibility">新值</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarLabel.MinValue">
            <summary>
            最小值,double.NaN自动计算
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarLabel.MaxValue">
            <summary>
            最大值,double.NaN自动计算
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.RadarLabel.Radians">
            <summary>
            坐标线弧度
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SegmentSeries">
            <summary>
            线段图
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SegmentSeries.Orientation">
            <summary>
            获取或设置ColumnSeries方向
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SegmentSeries.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SegmentSeries.StyleChanged(System.Windows.Style)">
            <summary>
            Series样式改变通知
            </summary>
            <param name="style">新样式</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SegmentSeries.PrimitiveDraw(System.Windows.Controls.Canvas)">
            <summary>
            将Series绘制到已设置设定大小的画布中
            </summary>
            <param name="canvas">目标画布</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SegmentSeries.PrimitiveClear(System.Windows.Controls.Canvas)">
            <summary>
            将Series从画布中移除[返回值:true:需要全部重绘;false:不需要重绘]
            </summary>
            <returns>返回值:true:需要全部重绘;false:不需要重绘</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SegmentSeries.EnableTooltipChanged(System.Boolean)">
            <summary>
            EnableTooltip改变通知
            </summary>
            <param name="enableTooltip">新EnableTooltip值</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SegmentSeries.VisibilityChanged(System.Windows.Visibility,System.Windows.Visibility)">
            <summary>
            Visibility改变通知
            </summary>
            <param name="oldVisibility">旧值</param>
            <param name="newVisibility">新值</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs">
            <summary>
            Series基类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.AxisX">
            <summary>
            获取或设置X坐标轴
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.AxisY">
            <summary>
            获取或设置Y坐标轴
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.CreatePointFunc">
            <summary>
            获取或设置创建坐标点对应的附加控件回调
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.ValuesCollectionChanged">
            <summary>
            Values集合改变事件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs._values">
            <summary>
            值集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.Values">
            <summary>
            获取或设置值集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.Style">
            <summary>
            获取或设置Series样式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.StyleChanged(System.Windows.Style)">
            <summary>
            Series样式改变通知
            </summary>
            <param name="style">新样式</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.EnableTooltip">
            <summary>
            获取或设置是否启用Tooltip[true:启用Tooltip;false:禁用Tooltip]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.EnableTooltipChanged(System.Boolean)">
            <summary>
            EnableTooltip改变通知
            </summary>
            <param name="enableTooltip">新EnableTooltip值</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.TooltipArea">
            <summary>
            获取或设置Tooltip有效区域,鼠标点周围范围内有点则触发Tooltip,小于0使用默认值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.Title">
            <summary>
            获取或设置Series标题
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs._canvas">
            <summary>
            Chart画布
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.Draw(System.Windows.Controls.Canvas)">
            <summary>
            将Series绘制到已设置设定大小的画布中
            </summary>
            <param name="canvas">目标画布</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.PrimitiveDraw(System.Windows.Controls.Canvas)">
            <summary>
            将Series添加到已设置设定大小的画布中
            </summary>
            <param name="canvas">目标画布</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.Clear">
            <summary>
            将Series从画布中移除[返回值:true:需要全部重绘;false:不需要重绘]
            </summary>
            <returns>返回值:true:需要全部重绘;false:不需要重绘</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.PrimitiveClear(System.Windows.Controls.Canvas)">
            <summary>
            将Series从画布中移除[返回值:true:需要全部重绘;false:不需要重绘]
            </summary>
            <returns>返回值:true:需要全部重绘;false:不需要重绘</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.Update">
            <summary>
            更新Series
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.AppendLegendItemToList(System.Collections.Generic.List{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem})">
            <summary>
            将Series中的Legend项追加到列表中
            </summary>
            <param name="legendBrushList">Legend列表</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.AddOrReplaceLegendItem(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem)">
            <summary>
            添加或替换SeriesLegendItem
            </summary>
            <param name="legendItem">新SeriesLegendItem</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.AddLegendItem(UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesLegendItem)">
            <summary>
            添加SeriesLegendItem
            </summary>
            <param name="legendItem">SeriesLegendItem</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.RemoveLegendItem">
            <summary>
            移除当前Series中的SeriesLegendItem
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.Visibility">
            <summary>
            获取或设置SeriesVisibility
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.VisibilityChanged(System.Windows.Visibility,System.Windows.Visibility)">
            <summary>
            Visibility改变通知
            </summary>
            <param name="oldVisibility">旧值</param>
            <param name="newVisibility">新值</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.SeriesAbs.Tag">
            <summary>
            获取或设置Tag
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StackedColumnSeries">
            <summary>
            堆叠条形图
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StackedColumnSeries.Orientation">
            <summary>
            获取或设置ColumnSeries方向
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StackedColumnSeries.Size">
            <summary>
            获取或设置ColumnSeries水平方向高度,垂直方向宽度,为double.NaN则自动计算,默认为double.NaN
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StackedColumnSeries.Style">
            <summary>
            获取或设置Series样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StackedColumnSeries.Title">
            <summary>
            获取或设置Series标题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StackedColumnSeries.TitleStyleDic">
            <summary>
            堆叠标题及样式[key:标题;value:样式(为null自动创建)]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StackedColumnSeries.GetStyle">
            <summary>
            获取样式
            </summary>
            <returns>样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StackedColumnSeries.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StackedColumnSeries.StyleChanged(System.Windows.Style)">
            <summary>
            Series样式改变通知
            </summary>
            <param name="style">新样式</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StackedColumnSeries.PrimitiveDraw(System.Windows.Controls.Canvas)">
            <summary>
            将Series添加到已设置设定大小的画布中
            </summary>
            <param name="canvas">目标画布</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StackedColumnSeries.PrimitiveClear(System.Windows.Controls.Canvas)">
            <summary>
            将Series从画布中移除[返回值:true:需要全部重绘;false:不需要重绘]
            </summary>
            <returns>返回值:true:需要全部重绘;false:不需要重绘</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StackedColumnSeries.VisibilityChanged(System.Windows.Visibility,System.Windows.Visibility)">
            <summary>
            Visibility改变通知
            </summary>
            <param name="oldVisibility">旧值</param>
            <param name="newVisibility">新值</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StepLineSeries">
            <summary>
            步进线形图
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StepLineSeries.Orientation">
            <summary>
            获取或设置ColumnSeries方向
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StepLineSeries.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.StepLineSeries.CreatePathGeometry(System.Collections.Generic.List{System.Collections.Generic.List{UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PointInfo}})">
            <summary>
            创建曲线Geometry
            </summary>
            <param name="pointInfoListCollection">目标点信息集合</param>
            <returns>Geometry</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart">
            <summary>
            图表控件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.SeriesProperty">
            <summary>
            图表集合依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.ChartMinHeightProperty">
            <summary>
             图表区域最小高度值依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.ChartMinWidthProperty">
            <summary>
            图表区域最小宽度值依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.AxesProperty">
            <summary>
            坐标集合依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.LegendProperty">
            <summary>
            Legend依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.ScrollBarWidthProperty">
            <summary>
            滚动条宽度依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.ManaulComitProperty">
            <summary>
            手机提交依赖属性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.Series">
            <summary>
            图表集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.ChartMinHeight">
            <summary>
            图表区域最小高度值,为double.NaN或小于0此值无效,默认为double.NaN
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.ChartMinWidth">
            <summary>
            图表区域最小宽度值,为double.NaN或小于0此值无效,默认为double.NaN
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.Axes">
            <summary>
            坐标集合
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.Legend">
            <summary>
            Legend
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.ScrollBarWidth">
            <summary>
            滚动条宽度,默认10像素
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.ManaulComit">
            <summary>
            手机提交.true;手动更新;false:自动更新
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            重写OnRenderSizeChanged
            </summary>
            <param name="sizeInfo"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.Chart.ChartCanvas_MouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            缩放
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartGridRowColumnDefinition.#ctor(System.Boolean,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLegend,System.Windows.Controls.Grid,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisYWidthInfo,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisXHeightInfo)">
            <summary>
            NoFreeze
            </summary>
            <param name="hasLegend"></param>
            <param name="legend"></param>
            <param name="chartGrid"></param>
            <param name="axisYWidthInfo"></param>
            <param name="axisXHeightInfo"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartGridRowColumnDefinition.#ctor(System.Boolean,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLegend,System.Windows.Controls.Grid,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisYWidthInfo)">
            <summary>
            FreezeY
            </summary>
            <param name="hasLegend"></param>
            <param name="legend"></param>
            <param name="chartGrid"></param>
            <param name="axisYWidthInfo"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartGridRowColumnDefinition.#ctor(System.Boolean,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLegend,System.Windows.Controls.Grid)">
            <summary>
            FreezeY
            </summary>
            <param name="hasLegend"></param>
            <param name="legend"></param>
            <param name="chartGrid"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ChartGridRowColumnDefinition.#ctor(System.Boolean,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.IChartLegend,System.Windows.Controls.Grid,UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.AxisXHeightInfo)">
            <summary>
            FreezeX
            </summary>
            <param name="hasLegend"></param>
            <param name="legend"></param>
            <param name="chartGrid"></param>
            <param name="axisXHeightInfo"></param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimePicker">
            <summary>
            DateTimePicker.xaml 的交互逻辑
            </summary>
            <summary>
            DateTimePicker
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimePicker.ValueProperty">
            <summary>
            值依赖属性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimePicker.Value">
            <summary>
            获取或设置值,百分比
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimePicker.DateTimeChanged">
            <summary>
            日期时间值改变事件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimePicker.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimePicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeValueChangedArgs">
            <summary>
            时间值改变事件参数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeValueChangedArgs.NewValue">
            <summary>
            新值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeValueChangedArgs.OldValue">
            <summary>
            旧值
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.DateTimeValueChangedArgs.#ctor(System.DateTime,System.DateTime)">
            <summary>
            构造函数
            </summary>
            <param name="newValue"></param>
            <param name="oldValue"></param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation">
            <summary>
            gif动画解析及显示类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation._canvas">
            <summary>
            图片显示控件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation._frameList">
            <summary>
            全部帧集合
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation._frameCounter">
            <summary>
            播放帧计数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation._numberOfFrames">
            <summary>
            总帧数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation._numberOfLoops">
            <summary>
            播放帧数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation._currentLoop">
            <summary>
            播放帧索引
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation._logicalWidth">
            <summary>
            gif图片宽度
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation._logicalHeight">
            <summary>
            gif图片高度
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation._frameTimer">
            <summary>
            帧播放时间计时器
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation._currentParseGifFrame">
            <summary>
            当前解析的帧
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation.Reset">
            <summary>
            重置变量参数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation.ParseGif(System.Byte[])">
            <summary>
            解析二进制gif文件
            </summary>
            <param name="gifData">二进制gif数据</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation.ParseBlock(System.Byte[],System.Int32)">
            <summary>
            解析gif数据块
            </summary>
            <param name="gifData">gif数据流</param>
            <param name="offset">流偏移量</param>
            <returns>数据结尾偏移量</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation.ParseGraphicControlExtension(System.Byte[],System.Int32)">
            <summary>
            解析每帧的控制块
            </summary>
            <param name="gifData">gif数据流</param>
            <param name="offset">数据偏移量</param>
            <returns>解析之后的偏移量</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation.ParseLogicalScreen(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="gifData"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation.ParseGraphicBlock(System.Byte[],System.Int32)">
            <summary>
            解析每帧的图像块
            </summary>
            <param name="gifData">gif数据流</param>
            <param name="offset">数据偏移量</param>
            <returns>解析之后的偏移量</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation.ParseExtensionBlock(System.Byte[],System.Int32)">
            <summary>
            解析数据块
            </summary>
            <param name="gifData">gif数据流</param>
            <param name="offset">流偏移量</param>
            <returns>数据结尾偏移量</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation.ParseHeader(System.Byte[],System.Int32)">
            <summary>
            解析gif头
            </summary>
            <param name="gifData">gif数据流</param>
            <param name="offset">流偏移量</param>
            <returns>头位置偏移量</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation.ParseGifDataStream(System.Byte[],System.Int32)">
            <summary>
            解析gif数据流
            </summary>
            <param name="gifData">gif数据流</param>
            <param name="offset">流偏移量</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation.CreateGifAnimation(System.IO.MemoryStream)">
            <summary>
            根据gif流创建gif
            </summary>
            <param name="memoryStream">gif流</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifAnimation.NextFrame(System.Object,System.EventArgs)">
            <summary>
            播放下一帧事件方法
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifFrame">
            <summary>
            gif帧
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifFrame.DelayTime">
            <summary>
            播放延时时间
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifFrame.DisposalMethod">
            <summary>
            帧处理方法标识
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifFrame.Left">
            <summary>
            图像的左边位置
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifFrame.Top">
            <summary>
            图像的上边位置
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifFrame.GifWidth">
            <summary>
            gif图像的宽度
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifFrame.GifHeight">
            <summary>
            gif图像高度
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage">
            <summary>
            GifImage.xaml 的交互逻辑
            </summary>
            <summary>
            GifImage
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage._gifAnimation">
            <summary>
            gif图片动画
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage._image">
            <summary>
            当前显示图片的控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.ForceGifAnimProperty">
            <summary>
            是否强制显示依赖属性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.ForceGifAnim">
            <summary>
            获取或设置是否强制显示
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.SourceProperty">
            <summary>
            gif源依赖属性
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.OnSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            gif源依赖属性改变事件
            </summary>
            <param name="d">依赖属性对象</param>
            <param name="e">参数</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.Source">
            <summary>
            获取或设置gif源
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.StretchProperty">
            <summary>
            描述的Stretch值GifImage如何加载目标矩形依赖属性
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.OnStretchChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            描述的Stretch值GifImage如何加载目标矩形依赖属性改变事件
            </summary>
            <param name="d">依赖属性对象</param>
            <param name="e">参数</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.Stretch">
            <summary>
            获取或设置描述的Stretch值GifImage如何加载目标矩形
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.StretchDirectionProperty">
            <summary>
            确定对缩放的限制也适用于图像的值依赖属性
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.OnStretchDirectionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            确定对缩放的限制也适用于图像的值依赖属性改变事件
            </summary>
            <param name="d">依赖属性对象</param>
            <param name="e">参数</param>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.StretchDirection">
            <summary>
            获取或设置确定对缩放的限制也适用于图像的值
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.ImageFailedEvent">
            <summary>
            图片加载失败路由依赖事件
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.ImageFailed">
            <summary>
            图片加载失败路由依赖事件属性
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.image_ImageFailed(System.Object,System.Windows.ExceptionRoutedEventArgs)">
            <summary>
            图片加载失败
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.RaiseImageFailedEvent(System.Exception)">
            <summary>
            图片加载失败路由依赖事件方法
            </summary>
            <param name="exp">异常信息</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.DeletePreviousImage">
            <summary>
            删除之前的图片
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.CreateNonGifAnimationImage">
            <summary>
            创建非gif的动画图片
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.CreateGifAnimation(System.IO.MemoryStream)">
            <summary>
            创建gif动画
            </summary>
            <param name="memoryStream">内存数据流</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.CreateFromSourceString(System.String)">
            <summary>
            根据源创建获取gif图片的地址
            </summary>
            <param name="source">源</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.WebRequestFinishedDelegate">
            <summary>
            web请求完成委托
            </summary>
            <param name="memoryStream"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.WebRequestFinished(System.IO.MemoryStream)">
            <summary>
            wbe请求完成
            </summary>
            <param name="memoryStream">请求到的内存流</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.WebRequestErrorDelegate">
            <summary>
            web请求错误委托
            </summary>
            <param name="exp"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.WebRequestError(System.Exception)">
            <summary>
            web请求错误
            </summary>
            <param name="exp">错误异常</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.WebResponseCallback(System.IAsyncResult)">
            <summary>
            web数据响应回调
            </summary>
            <param name="asyncResult">异步回调结果</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.WebReadCallback(System.IAsyncResult)">
            <summary>
            web数据读取
            </summary>
            <param name="asyncResult">异步数据结构</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.GetGifStreamFromHttp(System.Uri)">
            <summary>
            根据http url地址获取gif
            </summary>
            <param name="uri">http url地址</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.ReadGifStreamSynch(System.IO.Stream)">
            <summary>
            异步读取gif流
            </summary>
            <param name="stream">gif流</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.GetGifStreamFromPack(System.Uri)">
            <summary>
            根据url地址获取gif流
            </summary>
            <param name="uri">url地址</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImageExceptionRoutedEventArgs">
            <summary>
            gif图片路由异常事件参数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImageExceptionRoutedEventArgs.ErrorException">
            <summary>
            错误异常
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.GifImageExceptionRoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="routedEvent">路由事件</param>
            <param name="sender">路由事件触发者</param>
            <param name="ex">错误异常</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WebReadState">
            <summary>
            web gif数据类
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WebReadState.WebRequest">
            <summary>
            web请求对象
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WebReadState.MemoryStream">
            <summary>
            内存数据流
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WebReadState.ReadStream">
            <summary>
            读取流
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WebReadState.Buffer">
            <summary>
            缓存数据流
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl">
            <summary>
            日志显示控件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.MaxItemCountProperty">
            <summary>
            最多显示项数依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.IsLockProperty">
            <summary>
            是否锁定滚动依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.PriorityProperty">
            <summary>
            显示优化级依赖属性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.MaxItemCount">
            <summary>
            获取或设置最多显示项数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.IsLock">
            <summary>
            获取或设置是否锁定滚动
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.Priority">
            <summary>
            获取或设置显示优化级
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl._refreshCount">
            <summary>
            单次最大刷新日志条数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl._cacheCapcity">
            <summary>
            日志缓存容量
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl._styleDic">
            <summary>
            样式字典集合[key:样式key;value:样式]
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.AddDefaultStyle">
            <summary>
            添加默认样式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.SetLogRefreshInfo(System.Int32,System.Int32)">
            <summary>
            设置日志刷新信息
            </summary>
            <param name="refreshCount">单次最大刷新日志条数</param>
            <param name="cacheCapcity">日志缓存容量,建议等于日志最大项数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.StartRefreshLogThread">
            <summary>
            启动刷新日志线程
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.SetStyle(UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle)">
            <summary>
            设置样式,不存在添加,存在则用新样式替换旧样式
            </summary>
            <param name="style">样式</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.RemoveStyle(UtilZ.Dotnet.WindowsDesktopEx.Base.LogShowStyle)">
            <summary>
            移除样式
            </summary>
            <param name="style">样式标识</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.ClearStyle">
            <summary>
            清空样式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.GetStyles">
            <summary>
            获取当前所有样式数组
            </summary>
            <returns>当前所有样式数组</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.GetStyleById(System.Int32)">
            <summary>
            根据样式标识ID获取样式
            </summary>
            <param name="id">样式标识ID</param>
            <returns>获取样式</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.AddLog(System.String,UtilZ.Dotnet.Ex.Log.LogLevel)">
            <summary>
            添加显示日志
            </summary>
            <param name="logText">显示内容</param>
            <param name="level">日志级别</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.AddLog(System.String,System.Int32)">
            <summary>
            添加显示日志
            </summary>
            <param name="logText">显示内容</param>
            <param name="styleId">样式标识ID</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.Clear">
            <summary>
            清空日志
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.LogControl.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ShowLogItem">
            <summary>
            显示的日志项
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ShowLogItem.StyleID">
            <summary>
            样式标识ID
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ShowLogItem.LogText">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ShowLogItem.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="logText"></param>
            <param name="styleId"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ShowLogItem.#ctor(System.String,UtilZ.Dotnet.Ex.Log.LogLevel)">
            <summary>
            
            </summary>
            <param name="logText"></param>
            <param name="level">日志级别</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl">
            <summary>
            数值输入控件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.ValueProperty">
            <summary>
            值依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.AllowNaNProperty">
            <summary>
            值是否允许为NaN依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.MinimumProperty">
            <summary>
            最小值依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.MaximumProperty">
            <summary>
            最大值依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.DecimalPlacesProperty">
            <summary>
            获取或设置数字显示框中要显示的十进制小数位数依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.NumberWidthProperty">
            <summary>
            数字显示宽度依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.NumberWidthFillDirectionProperty">
            <summary>
            数字文本不足够显示宽度时0的填充方向依赖属性
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.ValueChanged">
            <summary>
            值改变事件
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.Value">
            <summary>
            获取或设置值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.AllowNaN">
            <summary>
            获取或设置值是否允许为NaN,true:允许;false:不允许
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.Minimum">
            <summary>
            获取或设置数字显示框的最小允许值,为double.NaN时无限制
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.Maximum">
            <summary>
            获取或设置数字显示框的最大允许值,为double.NaN时无限制
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.DecimalPlaces">
            <summary>
            获取或设置数字显示框中要显示的十进制小数位数,小于等于0表示小数位数为0
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.NumberWidth">
            <summary>
            获取或设置数字显示宽度,即固定字符长度,小于1表示无限制
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.NumberWidthFillDirection">
            <summary>
            获取或设置当数字文本不足够显示宽度时0的填充方向
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            重写OnPreviewMouseDown
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            重写OnGotFocus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            重写OnLostFocus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            重写OnPreviewKeyDown
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            重写OnPreviewTextInput
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.OnPreviewTextInput_AllLessThanZero(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            皆为负数
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.OnPreviewTextInput_MinimumLessThanZero(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            最大值非负数,最小值负数
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.OnPreviewTextInput_AllGreaterOrEqualToZero(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            皆为非负数
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberControl.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            重写OnTextChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.MinimumMaximumType.AllGreaterOrEqualToZero">
            <summary>
            最大最小值皆为非负数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.MinimumMaximumType.MinimumLessThanZero">
            <summary>
            最小值负数,最大值非负数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.MinimumMaximumType.AllLessThanZero">
            <summary>
            最大最小值皆为负数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberWidthFillDirection">
            <summary>
            数值宽度填充方向
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberWidthFillDirection.Left">
            <summary>
            左侧补0
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberWidthFillDirection.Right">
            <summary>
            右侧补0
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberValueChangedArgs">
            <summary>
            number控件值改变事件参数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberValueChangedArgs.OldValue">
            <summary>
            旧值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberValueChangedArgs.NewValue">
            <summary>
            新值
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.NumberValueChangedArgs.#ctor(System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.PartAsynExcuteFactoryWPF">
            <summary>
            WPF异步执行对象创建工厂类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.PartAsynExcuteFactoryWPF.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.PartAsynExcuteFactoryWPF.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.PartAsynExcuteFactoryWPF._partAsynExcuteType">
            <summary>
            WPF异步执行对象创建类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.PartAsynExcuteFactoryWPF.PartAsynExcuteType">
            <summary>
            获取或设置WPF异步执行对象创建类型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.PartAsynExcuteFactoryWPF.ConvertShadeBackground(System.Object)">
            <summary>
            转换遮罩层背景色
            </summary>
            <param name="shadeBackground">遮罩层背景色对象</param>
            <returns>遮罩层背景色</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.PartAsynExcuteFactoryWPF.CreateExcute``3">
            <summary>
            创建异步执行对象
            </summary>
            <typeparam name="T">异步执行参数类型</typeparam>
            <typeparam name="TContainer">容器控件类型</typeparam>
            <typeparam name="TResult">异步执行返回值类型</typeparam>
            <returns>异步执行对象</returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1">
            <summary>
            UCShadeControl1.xaml 的交互逻辑
            </summary>
            <summary>
            UCShadeControl1
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1._isCanceled">
            <summary>
            是否已经取消
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.IsCanceled">
            <summary>
            获取是否已经取消
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.Caption">
            <summary>
            获取或设置提示标题
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.Hint">
            <summary>
            获取或设置提示内容
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.IsShowCancel">
            <summary>
            获取或设置是否显示取消按钮
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.ShadeBackground">
            <summary>
            获取或设置动画背景色
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.Canceled">
            <summary>
            取消事件
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1._monitor">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.Cancel">
            <summary>
            取消操作
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.StartAnimation">
            <summary>
            开始动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.StopAnimation">
            <summary>
            停止动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.SetInfo(System.Object)">
            <summary>
            设置信息(保留接口)
            </summary>
            <param name="para">参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.Reset">
            <summary>
            重置异步等待框
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.InvokeRequired">
            <summary>
            获取 或设置是否需要调用Invoke
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.Invoke(System.Delegate)">
            <summary>
            在拥有此控件的基础窗口句柄的线程上执行指定的委托
            </summary>
            <param name="method">包含要在控件的线程上下文中调用的方法的委托</param>
            <returns>正在被调用的委托的返回值，或者如果委托没有返回值，则为 null</returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.Invoke(System.Delegate,System.Object[])">
            <summary>
            在拥有控件的基础窗口句柄的线程上，用指定的自变量列表执行指定委托
            </summary>
            <param name="method">一个方法委托，它采用的参数的数量和类型与 args 参数中所包含的相同</param>
            <param name="args">作为指定方法的自变量传递的对象数组。 如果此方法没有参数，该参数可以是 null</param>
            <returns>System.Object，它包含正被调用的委托返回值；如果该委托没有返回值，则为 null</returns>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.UIDesignMode">
            <summary>
            获取UI是否处于设计器模式
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.UCShadeControl1.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.WPFPartAsynExcuteV1`3">
            <summary>
            WPF异步执行类
            </summary>
            <typeparam name="T">异步执行参数类型</typeparam>
            <typeparam name="TContainer">容器控件类型</typeparam>
            <typeparam name="TResult">异步执行返回值类型</typeparam>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.WPFPartAsynExcuteV1`3._asynControlType">
            <summary>
            异步等待控件类型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.WPFPartAsynExcuteV1`3.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.WPFPartAsynExcuteV1`3._shadeType">
            <summary>
            默认当遮罩层类型为自定义类型时用于创建遮罩层的类型
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.WPFPartAsynExcuteV1`3.ShadeType">
            <summary>
            当遮罩层类型为自定义类型时用于创建遮罩层的类型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.WPFPartAsynExcuteV1`3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.WPFPartAsynExcuteV1`3._containerControl">
            <summary>
            容器控件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.WPFPartAsynExcuteV1`3.Excute(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{`0,`2},`1)">
            <summary>
            执行异步委托
            </summary>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.WPFPartAsynExcuteV1`3.PrimitiveReleseResource">
            <summary>
            释放异步委托资源
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.WPFPartAsynExcuteV1`3.RemoveAsynWaitControl(System.Windows.FrameworkElement,System.Windows.Controls.Panel)">
            <summary>
            移除遮罩层控件
            </summary>
            <param name="asynWaitControl"></param>
            <param name="containerControl"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.V1.WPFPartAsynExcuteV1`3.AddAsynWaitControl(System.Windows.FrameworkElement,System.Windows.UIElement)">
            <summary>
            添加遮罩层控件
            </summary>
            <param name="asynWaitControl"></param>
            <param name="containerControl"></param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.WPFPartAsynExcuteBase`3">
            <summary>
            WPF异步执行基类
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TContainer"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.WPFPartAsynExcuteBase`3._asynControlType">
            <summary>
            异步等待控件类型
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.WPFPartAsynExcuteBase`3.#cctor">
            <summary>
            静态构造函数初始化
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.WPFPartAsynExcuteBase`3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.WPFPartAsynExcuteTypeDefine">
            <summary>
            WPF异步执行对象创建类型定义类
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.WPFPartAsynExcuteTypeDefine.Type1">
            <summary>
            类型1
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.WPFPartAsynWaitHelper">
            <summary>
            WPF异步等待辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.WPFPartAsynWaitHelper.#cctor">
            <summary>
            静态构造函数创建异步执行对象创建工厂对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.WPFPartAsynWaitHelper._partAsynExcuteFactory">
            <summary>
            异步执行对象创建工厂对象
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.WPFPartAsynWaitHelper.PartAsynExcuteFactory">
            <summary>
            获取或设置异步执行对象创建工厂对象
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.WPFPartAsynWaitHelper.Wait``2(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{``0,``1},System.Windows.UIElement)">
             <summary>
             异步等待
             </summary>
             <typeparam name="T">异步执行参数类型</typeparam>
             <typeparam name="TResult">异步执行返回值类型</typeparam>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PartAsynWait.WPFPartAsynWaitHelper.Wait``2(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{``0,``1},System.Windows.UIElement,UtilZ.Dotnet.Ex.Base.IPartAsynWait)">
             <summary>
             异步等待
             </summary>
             <typeparam name="T">异步执行参数类型</typeparam>
             <typeparam name="TResult">异步执行返回值类型</typeparam>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
            <param name="asynWait">异步等待UI</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PopupEx">
            <summary>
            Popup扩展辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PopupEx.HasOpen(System.Nullable{System.DateTime},System.Double)">
            <summary>
            判定Popup是否打开
            </summary>
            <param name="popupLastCloseTime"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.TextTrimmingAutoShowTooltipTextBlock">
            <summary>
            当文本长度超出控件长度时,自动显示Tooltip
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.TextTrimmingAutoShowTooltipTextBlock.TextBlockStyleProperty">
            <summary>
            TextBlock样式依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.TextTrimmingAutoShowTooltipTextBlock.TextProperty">
            <summary>
            TextBlock.Text依赖属性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.TextTrimmingAutoShowTooltipTextBlock.TextBlockStyle">
            <summary>
            获取或设置TextBlock样式
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.TextTrimmingAutoShowTooltipTextBlock.Text">
            <summary>
            获取或设置TextBlock.Text
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.TextTrimmingAutoShowTooltipTextBlock.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCPagingControl">
            <summary>
            UCPagingControl.xaml 的交互逻辑
            </summary>
            <summary>
            UCPagingControl
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCPagingControl.SelectedPageIndexProperty">
            <summary>
            当前选中页依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCPagingControl.TotalCountProperty">
            <summary>
            总记录数依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCPagingControl.PageSizeProperty">
            <summary>
            页大小依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCPagingControl.PageSizeMaxProperty">
            <summary>
            页大小最大值依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCPagingControl.PageSizeMinProperty">
            <summary>
            页大小最小值依赖属性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCPagingControl.SelectedPageIndex">
            <summary>
            当前选中页,小于0或超出范围无效
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCPagingControl.TotalCount">
            <summary>
            总记录页数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCPagingControl.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCPagingControl.PageSizeMax">
            <summary>
            页大小最大值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCPagingControl.PageSizeMin">
            <summary>
            页大小最小值
            </summary>
        </member>
        <member name="E:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCPagingControl.QueryData">
            <summary>
            查询数据事件
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCPagingControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.UCPagingControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PagingQueryArgs">
            <summary>
            分页查询参数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PagingQueryArgs.TotalCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PagingQueryArgs.TotalPageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PagingQueryArgs.PageIndex">
            <summary>
            查询目标页,小于0表示无效
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PagingQueryArgs.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PagingQueryArgs.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="totalCount"></param>
            <param name="totalPageCount"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PagingQueryArgs.ToString">
            <summary>
            重写ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PagingQueryArgs.Cancel(System.Int64)">
            <summary>
            取消查询
            </summary>
            <param name="lastPageIndex">上次选中页</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.PagingQueryArgs.Completed">
            <summary>
            查询完成
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator">
            <summary>
            MetroRotaionIndicator.xaml 的交互逻辑
            </summary>
            <summary>
            MetroRotaionIndicator
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator.RadiusProperty">
            <summary>
            动画圆点半径依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator.EllipseColorProperty">
            <summary>
            圆点颜色依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator.AnimalBackgroundProperty">
            <summary>
            动画背景色依赖属性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator.Radius">
            <summary>
            获取或设置动画圆点半径
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator.EllipseColor">
            <summary>
            获取或设置圆点颜色
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator.EllipseColorBrush">
            <summary>
            获取或设置圆点颜色
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator.AnimalBackground">
            <summary>
            获取或设置动画背景色
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator.AnimalBackgroundBrush">
            <summary>
            获取或设置动画背景色
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator.PropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            动画背景色依赖属性值改变事件
            </summary>
            <param name="d">依赖父控件</param>
            <param name="e">属性参数</param>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator._storyboard">
            <summary>
            旋转动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator.StartAnimal">
            <summary>
            启动动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator.Excute(System.Windows.Shapes.Ellipse)">
            <summary>
            启动一个动画
            </summary>
            <param name="el"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator.StopAnimal">
            <summary>
            停止动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.WaitingControls.MetroRotaionIndicator.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer">
            <summary>
            UCZoomTranslateContainerControl.xaml 的交互逻辑
            </summary>
            <summary>
            ZoomTranslateContainer
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.ChildProperty">
            <summary>
            烟雾值依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.ZoomMinScaleProperty">
            <summary>
            缩放最小值依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.ZoomMaxScaleProperty">
            <summary>
            缩放最大值依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.ZoomScaleProperty">
            <summary>
            缩放值依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.ZoomToFullProperty">
            <summary>
            缩放至完整显示依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.ZoomEnableProperty">
            <summary>
            缩放启用依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.TranslateEnableProperty">
            <summary>
            平移启用依赖属性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.Child">
            <summary>
            获取或设置进行缩放平移的控件
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.ZoomMinScale">
            <summary>
            获取或设置缩放最小值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.ZoomMaxScale">
            <summary>
            获取或设置缩放最大值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.ZoomScale">
            <summary>
            获取或设置缩放值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.ZoomToFull">
            <summary>
            获取或设置是否自动缩放至完整显示
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.ZoomEnable">
            <summary>
            获取或设置缩放启用
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.TranslateEnable">
            <summary>
            获取或设置平移启用
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.AutoZoomToFull(System.Double)">
            <summary>
            缩放至完成展示
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.AdjustToZoomout(System.Double)">
            <summary>
            缩小
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.AdjustToZoomin(System.Double)">
            <summary>
            放大
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.Controls.ZoomTranslateContainer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.NumericTextBox">
            <summary>
            NumericTextBox.xaml 的交互逻辑
            </summary>
            <summary>
            NumericTextBox
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.NumericTextBox.MaximumProperty">
            <summary>
            最大值依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.NumericTextBox.MinimumProperty">
            <summary>
            最小值依赖属性
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.NumericTextBox.DigitsProperty">
            <summary>
            小数位数依赖属性
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.NumericTextBox.Maximum">
            <summary>
            获取或设置最大值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.NumericTextBox.Minimum">
            <summary>
            获取或设置最小值
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.NumericTextBox.Digits">
            <summary>
            获取或设置小数位数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.NumericTextBox.PropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            NumericTextBox依赖属性值改变事件
            </summary>
            <param name="d">依赖父控件</param>
            <param name="e">属性参数</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.NumericTextBox.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.NumericTextBox.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.NumericTextBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.PartAsynWait.PartAsynWaitHelper">
            <summary>
            WPF异步等待辅助类
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.PartAsynWait.PartAsynWaitHelper.#cctor">
            <summary>
            静态构造函数创建异步执行对象创建工厂对象
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.PartAsynWait.PartAsynWaitHelper._partAsynExcuteFactory">
            <summary>
            异步执行对象创建工厂对象
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.PartAsynWait.PartAsynWaitHelper.PartAsynExcuteFactory">
            <summary>
            获取或设置异步执行对象创建工厂对象
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.PartAsynWait.PartAsynWaitHelper.Wait``2(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{``0,``1},System.Windows.Controls.Panel)">
             <summary>
             异步等待
             </summary>
             <typeparam name="T">异步执行参数类型</typeparam>
             <typeparam name="TResult">异步执行返回值类型</typeparam>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.PartAsynWait.PartAsynWaitHelper.Wait``2(UtilZ.Dotnet.WindowsDesktopEx.Base.PartAsynWait.Model.PartAsynWaitPara{``0,``1},System.Windows.Controls.Panel,UtilZ.Dotnet.Ex.Base.IPartAsynWait)">
             <summary>
             异步等待
             </summary>
             <typeparam name="T">异步执行参数类型</typeparam>
             <typeparam name="TResult">异步执行返回值类型</typeparam>
            <param name="asynWaitPara">异步等待执行参数</param>
            <param name="containerControl">容器控件</param>
            <param name="asynWait">异步等待UI</param>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.WaitingControls.MetroLRWaitIndicator">
            <summary>
            MetroLRWaitIndicator.xaml 的交互逻辑
            </summary>
            <summary>
            MetroLRWaitIndicator
            </summary>
        </member>
        <member name="F:UtilZ.Dotnet.WindowsDesktopEx.WPF.WaitingControls.MetroLRWaitIndicator._transStorybord">
            <summary>
            动画执行的故事板对象
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.WaitingControls.MetroLRWaitIndicator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.WaitingControls.MetroLRWaitIndicator.Active">
            <summary>
            激活动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.WaitingControls.MetroLRWaitIndicator.Excute(System.Windows.Shapes.Ellipse)">
            <summary>
            启动一个动画
            </summary>
            <param name="el"></param>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.WaitingControls.MetroLRWaitIndicator.Stop">
            <summary>
            停止动画
            </summary>
        </member>
        <member name="M:UtilZ.Dotnet.WindowsDesktopEx.WPF.WaitingControls.MetroLRWaitIndicator.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UtilZ.Dotnet.WindowsDesktopEx.WPF.WaitingControls.AnimalSegmentSize">
            <summary>
            动画段对象
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.WaitingControls.AnimalSegmentSize.Segment1">
            <summary>
            段1
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.WaitingControls.AnimalSegmentSize.Segment2">
            <summary>
            段2
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.WaitingControls.AnimalSegmentSize.Segment3">
            <summary>
            段3
            </summary>
        </member>
        <member name="P:UtilZ.Dotnet.WindowsDesktopEx.WPF.WaitingControls.AnimalSegmentSize.MilliSecondsDelay">
            <summary>
            延迟时间
            </summary>
        </member>
    </members>
</doc>
